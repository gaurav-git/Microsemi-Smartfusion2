#include "firmware/drivers/mss_gpio/mss_gpio.h"
#include "firmware/drivers/mss_spi/mss_spi.h"
#include "firmware/drivers/mss_sys_services/mss_sys_services.h"
#include "firmware/CMSIS/system_m2sxxx.h"
#include "firmware/drivers/mss_i2c/mss_i2c.h"
#include "firmware/drivers/mss_uart/mss_uart.h"
#include "firmware/drivers/mss_uart/mss_uart_regs.h"

#define SLAVE_SER_ADDR_0   0x10u
#define SLAVE_TX_BUFFER_SIZE   10u
#define SLAVE_RX_BUFFER_SIZE   10u

#define READ_ARRAY_OPCODE   0x03
#define DEVICE_ID_READ      0x90

#define WRITE_ENABLE_CMD    0x06
#define WRITE_DISABLE_CMD   0x4
#define PROGRAM_PAGE_CMD    0x02
#define WRITE_STATUS1_OPCODE    0x01
#define CHIP_ERASE_OPCODE   0x60
#define ERASE_4K_BLOCK_OPCODE   0x20
#define ERASE_32K_BLOCK_OPCODE  0x52
#define ERASE_64K_BLOCK_OPCODE  0xD8
#define READ_STATUS         0x05


#define READY_BIT_MASK      0x01

#define UNPROTECT_SECTOR_OPCODE     0x39

#define DONT_CARE       0x00u

#define NB_BYTES_PER_PAGE   256

/*Global Instances*/
mss_i2c_instance_t g_mss_i2c0;
mss_uart_instance_t g_mss_uart0;
mss_spi_instance_t g_mss_spi0;

uint8_t g_slave_rx_buffer[SLAVE_RX_BUFFER_SIZE];
uint8_t g_slave_tx_buffer[SLAVE_TX_BUFFER_SIZE] = {
		1, 2, 3, 4, 5, 6, 7, 8, 9, 10
};
static const mss_gpio_id_t LED[4] = {
		MSS_GPIO_2, MSS_GPIO_3,
		MSS_GPIO_4, MSS_GPIO_8,
};

void delay()
{
	int d = SystemCoreClock / 128;

	while (d-- > 0)
		;
}

int scannumber()
{
	uint8_t rxbuff, x[8]={0}, i=0;//[8];
	mss_uart_instance_t * this_uart = &g_mss_uart0;
	int num;
	while(i<5) {
		MSS_UART_get_rx(&g_mss_uart0, &rxbuff, sizeof(rxbuff));
		if(rxbuff == '\n')
		{
			rxbuff= this_uart->hw_reg->RBR;
			rxbuff= this_uart->hw_reg->RBR;
			break;
		}
		else
			x[i++]=rxbuff;
	}
	num = atoi(x);
	return num;
}

static void wait_ready(void) {
    uint8_t ready_bit;
    uint8_t command = READ_STATUS;

    do {
        MSS_SPI_transfer_block( &g_mss_spi0, &command, sizeof(command), &ready_bit, sizeof(ready_bit) );
        ready_bit = ready_bit & READY_BIT_MASK;
    } while( ready_bit == 1 );
}

void FLASH_global_unprotect(void) {
   uint8_t cmd_buffer[2];
   /* Send Write Enable command */
   cmd_buffer[0] = WRITE_ENABLE_CMD;

   MSS_SPI_set_slave_select(&g_mss_spi0, MSS_SPI_SLAVE_0);
   wait_ready();
   MSS_SPI_transfer_block(&g_mss_spi0, cmd_buffer, 1, 0, 0);

   /* Send Chip Erase command */
   cmd_buffer[0] = WRITE_STATUS1_OPCODE;
   cmd_buffer[1] = 0;

   wait_ready();
   MSS_SPI_transfer_block(&g_mss_spi0, cmd_buffer, 2, 0, 0);
   wait_ready();
   MSS_SPI_clear_slave_select(&g_mss_spi0, MSS_SPI_SLAVE_0);
}

uint8_t ReadFlashStatus(void) {
    uint8_t cmd_buffer[6];
    uint8_t read_buffer[4];
    cmd_buffer[0] = 0x05;
    cmd_buffer[1] = 0x00;

    MSS_SPI_set_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );

    MSS_SPI_transfer_block(&g_mss_spi0, cmd_buffer, 4, read_buffer, sizeof(read_buffer));
    MSS_SPI_clear_slave_select(&g_mss_spi0, MSS_SPI_SLAVE_0);

    return 0;
}

void FLASH_erase_64k_block(uint32_t address) {
    uint8_t cmd_buffer[4];
    /* Send Write Enable command */
    cmd_buffer[0] = WRITE_ENABLE_CMD;

    MSS_SPI_set_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
    wait_ready();
    MSS_SPI_transfer_block( &g_mss_spi0, cmd_buffer, 1, 0, 0 );

    /* Send Chip Erase command */
    cmd_buffer[0] = ERASE_64K_BLOCK_OPCODE;
    cmd_buffer[1] = (address >> 16) & 0xFF;
    cmd_buffer[2] = (address >> 8 ) & 0xFF;
    cmd_buffer[3] = address & 0xFF;

    wait_ready();
    MSS_SPI_transfer_block( &g_mss_spi0, cmd_buffer, sizeof(cmd_buffer), 0, 0 );
    wait_ready();
    MSS_SPI_clear_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
}

void FLASH_read_device_id(uint8_t * manufacturer_id, uint8_t * device_type, uint8_t * device_id)
{
    uint8_t cmd_buffer[6];
    uint8_t read_buffer[3];
    cmd_buffer[0] = 0x9F;
    cmd_buffer[1] = 0x00;
    cmd_buffer[2] = 0x00;
    cmd_buffer[3] = 0x00;

    MSS_SPI_set_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );

    MSS_SPI_transfer_block(&g_mss_spi0, cmd_buffer, 4, read_buffer, sizeof(read_buffer));
    MSS_SPI_clear_slave_select(&g_mss_spi0, MSS_SPI_SLAVE_0);

    *manufacturer_id = read_buffer[0];
    *device_type = read_buffer[1];
    *device_id = read_buffer[2];
}

void system_event_handler (uint8_t event_opcode, uint8_t response) {

	MSS_UART_polled_tx_string(&g_mss_uart0, "\n\rOP-Code: ");
	MSS_UART_polled_tx(&g_mss_uart0, &event_opcode, sizeof(uint8_t));
	MSS_UART_polled_tx_string(&g_mss_uart0, "\n\rResponse: ");
	MSS_UART_polled_tx(&g_mss_uart0, &response, sizeof(uint8_t));
}

void slave_write_handler(mss_i2c_instance_t * this_i2c, uint8_t * p_rx_data,
		uint16_t rx_size) {
	MSS_UART_polled_tx_string(&g_mss_uart0, "Slave Write Handler");
	MSS_UART_polled_tx(&g_mss_uart0, p_rx_data, rx_size);
	MSS_UART_polled_tx(&g_mss_uart0, g_slave_rx_buffer, sizeof(g_slave_rx_buffer));
	MSS_I2C_write(&g_mss_i2c0, SLAVE_SER_ADDR_0, g_slave_tx_buffer,
			sizeof(g_slave_tx_buffer), MSS_I2C_RELEASE_BUS);
}

int main(void)
{
	int i, current_val;
    uint8_t manufacturer_id = 0;
    uint8_t device_id = 0;
    uint8_t device_type = 0;

	SystemInit();
	SystemCoreClockUpdate();

	MSS_SYS_init(system_event_handler);
	MSS_GPIO_init();

    MSS_UART_init(&g_mss_uart0,
                  MSS_UART_115200_BAUD,
                  MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
    MSS_UART_polled_tx_string(&g_mss_uart0, "Hello\n\r");
    MSS_UART_polled_tx_string(&g_mss_uart0, "Hello World\n\r");
    MSS_UART_polled_tx_string(&g_mss_uart0, "Hello Xebrium\n\r");
    MSS_UART_polled_tx_string(&g_mss_uart0, "Hello ALL\n\r");
    MSS_UART_polled_tx_string(&g_mss_uart0, "Hello There\n\r");
    MSS_UART_polled_tx_string(&g_mss_uart0, "Hello World\n\r");
    MSS_UART_polled_tx_string(&g_mss_uart0, "Hello Entire World\n\r");

    /*I2C Initialization*/
	MSS_I2C_init(&g_mss_i2c0, SLAVE_SER_ADDR_0, MSS_I2C_BCLK_DIV_8);
    MSS_I2C_set_slave_tx_buffer(&g_mss_i2c0, g_slave_tx_buffer, sizeof(g_slave_tx_buffer));
    MSS_I2C_set_slave_rx_buffer(&g_mss_i2c0, g_slave_rx_buffer, sizeof(g_slave_rx_buffer));
    MSS_I2C_set_slave_mem_offset_length(&g_mss_i2c0, 1);
    MSS_I2C_register_write_handler(&g_mss_i2c0, (mss_i2c_slave_wr_handler_t)slave_write_handler);
    MSS_I2C_set_gca(&g_mss_i2c0);
    MSS_I2C_enable_slave(&g_mss_i2c0);

    /*SPI Initialization*/
    MSS_SPI_init(&g_mss_spi0);
    MSS_SPI_configure_master_mode(&g_mss_spi0, MSS_SPI_SLAVE_0, MSS_SPI_MODE2,
    		64u, MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE);
    FLASH_read_device_id(&manufacturer_id, &device_type, &device_id);
    MSS_UART_polled_tx_string(&g_mss_uart0, "\n\rManufacturerID: ");
    MSS_UART_polled_tx(&g_mss_uart0, &manufacturer_id, sizeof(uint8_t));
    MSS_UART_polled_tx_string(&g_mss_uart0, "\tDeviceID: ");
    MSS_UART_polled_tx(&g_mss_uart0, &device_id, sizeof(uint8_t));
    MSS_UART_polled_tx_string(&g_mss_uart0, "\tDeviceType: ");
        MSS_UART_polled_tx(&g_mss_uart0, &device_type, sizeof(uint8_t));
    FLASH_global_unprotect();

	/* Init & turn on all LEDs */
	for (i = 0; i < 4; i++) {
		MSS_GPIO_config(LED[i], MSS_GPIO_OUTPUT_MODE);
		MSS_GPIO_set_output(LED[i], 0);
	}
	delay();
	/* Sequence-blink */
	for (;;) {
		for (i = 0; i < 4; i++) {
			current_val = (MSS_GPIO_get_outputs() & (1 << LED[i])) ? 1 : 0;
			MSS_GPIO_set_output(LED[i], current_val ^ 1);
			delay();
			delay();
			delay();
		}
	}
}
