
Demo.elf:     file format elf32-littlearm
Demo.elf
architecture: armv7, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20000191

Program Header:
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00003c20 memsz 0x00010000 flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name            Size      VMA       LMA       File off  Algn  Flags
  0 .vector_table   00000190  20000000  20000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .boot_code      00000320  20000190  20000190  00010190  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text           000036f0  200004b0  200004b0  000104b0  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data           00000080  20003ba0  20003ba0  00013ba0  2**4  CONTENTS, ALLOC, LOAD, DATA
  4 .bss            000002f0  20003c20  20003c20  00013c20  2**4  ALLOC
  5 .heap           0000b0f0  20003f10  20003f10  00013c20  2**4  ALLOC
  6 .stack          00001000  2000f000  2000f000  00013c20  2**4  ALLOC
  7 .debug_aranges  00000680  00000000  00000000  00013c20  2**3  CONTENTS, READONLY, DEBUGGING
  8 .debug_info     0000c499  00000000  00000000  000142a0  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev   0000190f  00000000  00000000  00020739  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_line     00005a83  00000000  00000000  00022048  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame    00001c0c  00000000  00000000  00027acc  2**2  CONTENTS, READONLY, DEBUGGING
 12 .debug_str      00012b8e  00000000  00000000  000296d8  2**0  CONTENTS, READONLY, DEBUGGING
 13 .ARM.attributes 00000029  00000000  00000000  0003c266  2**0  CONTENTS, READONLY
 14 .debug_ranges   00000650  00000000  00000000  0003c28f  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro    00001645  00000000  00000000  0003c8df  2**0  CONTENTS, READONLY, DEBUGGING
 16 .comment        00000068  00000000  00000000  0003df24  2**0  CONTENTS, READONLY
SYMBOL TABLE:
20000000 l    d  .vector_table	00000000 .vector_table
20000190 l    d  .boot_code	00000000 .boot_code
200004b0 l    d  .text	00000000 .text
20003ba0 l    d  .data	00000000 .data
20003c20 l    d  .bss	00000000 .bss
20003f10 l    d  .heap	00000000 .heap
2000f000 l    d  .stack	00000000 .stack
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 ./firmware/CMSIS/startup_gcc/startup_m2sxxx.o
20000190 l       .boot_code	00000000 _start
20000456 l       .boot_code	00000000 SF2_MDDR_MODE_CR
20000452 l       .boot_code	00000000 SF2_EDAC_CR
200001b0 l       .boot_code	00000000 check_esram_edac
200001b8 l       .boot_code	00000000 check_stack_init
200001ca l       .boot_code	00000000 system_init
200001be l       .boot_code	00000000 clear_stack
20000436 l       .boot_code	00000000 RAM_INIT_PATTERN
20000308 l       .boot_code	00000000 fill_memory
200001f2 l       .boot_code	00000000 remap_memory
2000044a l       .boot_code	00000000 SF2_DDRB_NB_SIZE
2000044e l       .boot_code	00000000 SF2_DDRB_CR
20000212 l       .boot_code	00000000 check_esram_remap
2000043e l       .boot_code	00000000 SF2_ESRAM_CR
20000446 l       .boot_code	00000000 SF2_ENVM_REMAP_CR
20000442 l       .boot_code	00000000 SF2_DDR_CR
20000228 l       .boot_code	00000000 check_mirrored_nvm
20000242 l       .boot_code	00000000 copy_data
20000298 l       .boot_code	00000000 block_copy
20000238 l       .boot_code	00000000 copy_text
2000024c l       .boot_code	00000000 clear_bss
20000258 l       .boot_code	00000000 clear_heap
20000280 l       .boot_code	00000000 call_glob_ctor
2000043a l       .boot_code	00000000 HEAP_INIT_PATTERN
2000028a l       .boot_code	00000000 branch_to_main
20000296 l       .boot_code	00000000 ExitLoop
200002ec l       .boot_code	00000000 block_copy_exit
200002a8 l       .boot_code	00000000 block_copy_address_ok
200002b8 l       .boot_code	00000000 block_copy_continue
200002b2 l       .boot_code	00000000 block_copy_byte_copy
200002f0 l       .boot_code	00000000 block_copy_byte
200002c2 l       .boot_code	00000000 block_copy_loop
200002da l       .boot_code	00000000 copy_spare_bytes
200002f6 l       .boot_code	00000000 block_copy_byte_loop
2000037c l       .boot_code	00000000 fill_memory_exit
2000033e l       .boot_code	00000000 fill_memory_end_start
2000032a l       .boot_code	00000000 fill_memory_spare_bytes_start
20000362 l       .boot_code	00000000 fill_memory_spare_bytes_end
20000354 l       .boot_code	00000000 fill_memory_loop
20000366 l       .boot_code	00000000 fill_memory_spare_end_loop
00000000 l    df *ABS*	00000000 crtstuff.c
20003b78 l     O .text	00000000 __EH_FRAME_BEGIN__
200004b0 l     F .text	00000000 deregister_tm_clones
200004cc l     F .text	00000000 register_tm_clones
200004f0 l     F .text	00000000 __do_global_dtors_aux
20003c20 l     O .bss	00000000 completed.6707
20003b94 l     O .text	00000000 __do_global_dtors_aux_fini_array_entry
20000518 l     F .text	00000000 frame_dummy
20003c24 l     O .bss	00000000 object.6712
20003b90 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mss_uart.c
2000053c l     F .text	00000034 NVIC_ClearPendingIRQ
20000570 l     F .text	0000003a set_bit_reg8
200005aa l     F .text	0000003a clear_bit_reg8
200005e4 l     F .text	00000038 read_bit_reg8
200008d4 l     F .text	000001d8 global_init
20000cb4 l     F .text	000000e8 default_tx_handler
20000aac l     F .text	00000208 MSS_UART_isr
20000788 l     F .text	0000014c config_baud_divisors
00000000 l    df *ABS*	00000000 mss_comblk.c
20003c3c l     O .bss	00000001 g_comblk_cmd_opcode
20003c40 l     O .bss	00000004 g_comblk_p_cmd
20003c44 l     O .bss	00000002 g_comblk_cmd_size
20003c48 l     O .bss	00000004 g_comblk_p_data
20003c4c l     O .bss	00000004 g_comblk_data_size
20003c50 l     O .bss	00000004 g_comblk_p_response
20003c54 l     O .bss	00000002 g_comblk_response_size
20003c56 l     O .bss	00000002 g_comblk_response_idx
20003c58 l     O .bss	00000004 g_comblk_completion_handler
20003c5c l     O .bss	00000004 g_comblk_page_handler
20003c60 l     O .bss	00000001 g_request_in_progress
20003c61 l     O .bss	00000001 g_comblk_state
20003c64 l     O .bss	00000004 g_async_event_handler
200011e0 l     F .text	0000004c abort_current_cmd
2000122c l     F .text	00000060 fill_tx_fifo
20000f90 l     F .text	00000210 handle_rx_okay_irq
20000de4 l     F .text	000001ac handle_tx_okay_irq
200011a0 l     F .text	00000040 complete_request
2000128c l     F .text	00000028 process_sys_ctrl_command
00000000 l    df *ABS*	00000000 mss_spi.c
200012b4 l     F .text	00000030 NVIC_EnableIRQ
200012e4 l     F .text	00000034 NVIC_DisableIRQ
20001318 l     F .text	00000034 NVIC_ClearPendingIRQ
20001430 l     F .text	00000128 recover_from_rx_overflow
20001a10 l     F .text	000000d6 fill_slave_tx_fifo
20001ae6 l     F .text	000000a6 read_slave_rx_fifo
20001b8c l     F .text	0000027c mss_spi_isr
00000000 l    df *ABS*	00000000 mss_i2c.c
20001e50 l     F .text	00000034 NVIC_DisableIRQ
20001e84 l     F .text	00000024 enable_slave_if_required
20001ea8 l     F .text	00000852 mss_i2c_isr
00000000 l    df *ABS*	00000000 mss_hpdma.c
20003c68 l     O .bss	00000018 g_transfer
20003c80 l     O .bss	00000004 g_hpdma_end_desc
20003c84 l     O .bss	00000004 g_hpdma_current_desc
20002744 l     F .text	00000154 start_transfer
00000000 l    df *ABS*	00000000 mss_gpio.c
20002a90 l     F .text	00000034 NVIC_DisableIRQ
20002ac4 l     F .text	00000034 NVIC_ClearPendingIRQ
200036d8 l     O .text	00000080 g_config_reg_lut
20003758 l     O .text	00000020 g_gpio_irqn_lut
00000000 l    df *ABS*	00000000 system_m2sxxx.c
20002da0 l     F .text	00000022 silicon_workarounds
20002cc0 l     F .text	0000003c get_rcosc_25_50mhz_frequency
20002cfc l     F .text	0000005c set_clock_frequency_globals
20002d58 l     F .text	00000048 get_silicon_revision
20002dc4 l     F .text	00000030 m2s050_rev_a_workarounds
00000000 l    df *ABS*	00000000 test.c
20003c88 l     O .bss	00000005 g_flash_wr_buf
20003c90 l     O .bss	00000005 g_flash_rd_buf
20003780 l     O .text	00000004 LED
00000000 l    df *ABS*	00000000 winbondflash.c
20003488 l     F .text	00000038 wait_ready
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strtol.c
20003554 l     F .text	000000f0 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/microsemi/softconsole_v6.2/arm-none-eabi-gcc/bin/../lib/gcc/arm-none-eabi/8.2.1/thumb/v7-m/nofp/crti.o
00000000 l    df *ABS*	00000000 c:/microsemi/softconsole_v6.2/arm-none-eabi-gcc/bin/../lib/gcc/arm-none-eabi/8.2.1/thumb/v7-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20003bc0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
20003b94 l       .text	00000000 __init_array_end
20003b90 l       .text	00000000 __preinit_array_end
20003b90 l       .text	00000000 __init_array_start
20003b90 l       .text	00000000 __preinit_array_start
20003280 g     F .text	00000058 FLASH_chip_erase
20003bac g     O .data	00000004 g_FrequencyPCLK2
2000307c g     F .text	0000004c UART_Polled_Rx
2000038a  w    F .boot_code	00000000 DebugMon_Handler
20003bb4 g     O .data	00000004 g_FrequencyFIC1
200026fc g     F .text	00000024 I2C0_IRQHandler
200003ec  w    F .boot_code	00000000 FabricIrq12_IRQHandler
20000000 g       *ABS*	00000000 __vector_table_load
20000380  w    F .boot_code	00000000 HardFault_Handler
20003ba0 g       *ABS*	00000000 __data_load
2000038e  w    F .boot_code	00000000 SysTick_Handler
20002f00 g     F .text	00000050 Init
2000134c g     F .text	000000e4 MSS_SPI_init
20003ba0 g       *ABS*	00000000 _sidata
2000038c  w    F .boot_code	00000000 PendSV_Handler
2000037e  w    F .boot_code	00000000 NMI_Handler
20003ba0 g       .text	00000000 __exidx_end
20002720 g     F .text	00000024 I2C1_IRQHandler
20000764 g     F .text	00000024 UART1_IRQHandler
200003fe  w    F .boot_code	00000000 GPIO5_IRQHandler
20003c98 g     O .bss	00000004 address
20003ba0 g       .text	00000000 _etext
20003c20 g       .bss	00000000 _sbss
200003be  w    F .boot_code	00000000 PLL_LockLost_IRQHandler
200004b0 g       .text	00000000 __text_start
20000430  w    F .boot_code	00000000 GPIO30_IRQHandler
200033b0 g     F .text	000000d8 FLASH_program
20000740 g     F .text	00000024 UART0_IRQHandler
200003cc  w    F .boot_code	00000000 MDDR_IOCalib_IRQHandler
2000040c  w    F .boot_code	00000000 GPIO12_IRQHandler
20003c20 g     O .data	00000000 .hidden __TMC_END__
2000042c  w    F .boot_code	00000000 GPIO28_IRQHandler
20003d1c g     O .bss	00000084 g_mss_spi1
20000424  w    F .boot_code	00000000 GPIO24_IRQHandler
2000039a  w    F .boot_code	00000000 I2C0_SMBAlert_IRQHandler
20000190 g       .vector_table	00000000 _evector_table
20002f50 g     F .text	000000b8 Flash_write
20003ba0 g     O .data	00000004 SystemCoreClock
20003f0c g     O .bss	00000002 loop_count
20000386  w    F .boot_code	00000000 UsageFault_Handler
200003b2  w    F .boot_code	00000000 ENVM0_IRQHandler
20000400  w    F .boot_code	00000000 GPIO6_IRQHandler
00010000 g       *ABS*	00000000 RAM_SIZE
20003c20 g       .bss	00000000 __bss_start__
200030c8 g     F .text	00000074 scannumber
20003540 g     F .text	00000004 itoa
00000000 g       *ABS*	00000000 __DYNAMIC
20003ba0 g       .data	00000000 _sdata
20001e2c g     F .text	00000024 SPI1_IRQHandler
20000426  w    F .boot_code	00000000 GPIO25_IRQHandler
200003f2  w    F .boot_code	00000000 FabricIrq15_IRQHandler
200003f6  w    F .boot_code	00000000 GPIO1_IRQHandler
200003b0  w    F .boot_code	00000000 CAN_IRQHandler
20003224 g     F .text	0000005c FLASH_global_unprotect
200003e8  w    F .boot_code	00000000 FabricIrq10_IRQHandler
20002898 g     F .text	000000f8 HPDMA_Complete_IRQHandler
20000416  w    F .boot_code	00000000 GPIO17_IRQHandler
20003ba0 g       .text	00000000 __exidx_start
00001000 g       *ABS*	00000000 MAIN_STACK_SIZE
200034c8 g     F .text	00000048 __libc_init_array
20000406  w    F .boot_code	00000000 GPIO9_IRQHandler
200003c0  w    F .boot_code	00000000 CommSwitchError_IRQHandler
20003008 g     F .text	00000074 Flash_read
20003bb8 g     O .data	00000004 g_FrequencyFIC64
20000422  w    F .boot_code	00000000 GPIO23_IRQHandler
20003b78 g     F .text	00000000 _init
20003644 g     F .text	00000014 strtol
200031c4 g     F .text	00000060 FLASH_read
2000042e  w    F .boot_code	00000000 GPIO29_IRQHandler
200003d8  w    F .boot_code	00000000 FabricIrq2_IRQHandler
20003f10 g       .bss	00000000 _ebss
20000418  w    F .boot_code	00000000 GPIO18_IRQHandler
20000190 g     F .boot_code	00000000 Reset_Handler
20000000 g       .vector_table	00000000 __vector_table_vma_base_address
200003a0  w    F .boot_code	00000000 I2C1_SMBAlert_IRQHandler
2000040a  w    F .boot_code	00000000 GPIO11_IRQHandler
20002990 g     F .text	00000100 HPDMA_Error_IRQHandler
00001000 g       *ABS*	00000000 MIN_SIZE_HEAP
20002af8 g     F .text	00000078 MSS_GPIO_init
00000000 g       *ABS*	00000000 __smartfusion2_memory_remap
200032d8 g     F .text	000000d8 write_cmd_data
20000390  w    F .boot_code	00000000 WdogWakeup_IRQHandler
20003ba4 g     O .data	00000004 g_FrequencyPCLK0
20003510 g     F .text	00000030 __itoa
20003f0e g     O .bss	00000001 i
200003ba  w    F .boot_code	00000000 USB_DMA_IRQHandler
200003ae  w    F .boot_code	00000000 Timer2_IRQHandler
200003f8  w    F .boot_code	00000000 GPIO2_IRQHandler
20003f10 g       .bss	00000000 __bss_end__
20001774 g     F .text	00000088 MSS_SPI_clear_slave_select
200003ea  w    F .boot_code	00000000 FabricIrq11_IRQHandler
20003f10 g       .bss	00000000 __end
2000313c g     F .text	00000028 FLASH_init
200003d4  w    F .boot_code	00000000 FabricIrq0_IRQHandler
20003c9c g     O .bss	00000040 g_mss_uart1
200003bc  w    F .boot_code	00000000 PLL_Lock_IRQHandler
200003a8  w    F .boot_code	00000000 EthernetMAC_IRQHandler
200003c4  w    F .boot_code	00000000 DDR_IRQHandler
00000000 g       *ABS*	00000000 __mirrored_nvm
200003b8  w    F .boot_code	00000000 USB_IRQHandler
20003bb0 g     O .data	00000004 g_FrequencyFIC0
200003ac  w    F .boot_code	00000000 Timer1_IRQHandler
20000000 g       .vector_table	00000000 __vector_table_start
200003fa  w    F .boot_code	00000000 GPIO3_IRQHandler
20003784 g     O .text	000001b2 g_greeting_msg
200003da  w    F .boot_code	00000000 FabricIrq3_IRQHandler
20000000 g       *ABS*	00000000 RAM_START_ADDRESS
20003658 g     F .text	00000080 __utoa
20003544 g     F .text	00000010 memset
20000382  w    F .boot_code	00000000 MemManage_Handler
20002df4 g     F .text	0000010c main
20001688 g     F .text	000000ec MSS_SPI_set_slave_select
20003e24 g     O .bss	00000074 g_mss_i2c0
20000388  w    F .boot_code	00000000 SVC_Handler
20010000 g       *ABS*	00000000 __main_stack_start
200004b0 g       *ABS*	00000000 __text_load
20003f10 g       .heap	00000000 __heap_start__
20000402  w    F .boot_code	00000000 GPIO7_IRQHandler
20003cdc g     O .bss	00000040 g_mss_uart0
20003ba8 g     O .data	00000004 g_FrequencyPCLK1
2000040e  w    F .boot_code	00000000 GPIO13_IRQHandler
20002ba8 g     F .text	00000020 SystemInit
20002b70 g     F .text	00000038 MSS_GPIO_config
20003b84 g     F .text	00000000 _fini
20003164 g     F .text	00000060 FLASH_read_device_id
200003e2  w    F .boot_code	00000000 FabricIrq7_IRQHandler
2000068c g     F .text	000000b4 MSS_UART_polled_tx_string
20000410  w    F .boot_code	00000000 GPIO14_IRQHandler
200003d2  w    F .boot_code	00000000 FIC64_IRQHandler
20000434  w    F .boot_code	00000000 mscc_post_hw_cfg_init
20003bbc g     O .data	00000004 _impure_ptr
200003b4  w    F .boot_code	00000000 ENVM1_IRQHandler
200003c2  w    F .boot_code	00000000 CacheError_IRQHandler
200003e0  w    F .boot_code	00000000 FabricIrq6_IRQHandler
2000041a  w    F .boot_code	00000000 GPIO19_IRQHandler
200019f0 g     F .text	00000020 MSS_SPI_tx_done
20000404  w    F .boot_code	00000000 GPIO8_IRQHandler
200017fc g     F .text	000001f4 MSS_SPI_transfer_block
200003e6  w    F .boot_code	00000000 FabricIrq9_IRQHandler
20000428  w    F .boot_code	00000000 GPIO26_IRQHandler
20000420  w    F .boot_code	00000000 GPIO22_IRQHandler
20010000 g       .stack	00000000 _estack
2000f000 g       .heap	00000000 _eheap
20000408  w    F .boot_code	00000000 GPIO10_IRQHandler
2000039c  w    F .boot_code	00000000 I2C0_SMBus_IRQHandler
20003c20 g       .data	00000000 _edata
20001e08 g     F .text	00000024 SPI0_IRQHandler
20003f10 g       .bss	00000000 _end
2000041c  w    F .boot_code	00000000 GPIO20_IRQHandler
200003d6  w    F .boot_code	00000000 FabricIrq1_IRQHandler
200003dc  w    F .boot_code	00000000 FabricIrq4_IRQHandler
200003f4  w    F .boot_code	00000000 GPIO0_IRQHandler
20001558 g     F .text	00000130 MSS_SPI_configure_master_mode
200003e4  w    F .boot_code	00000000 FabricIrq8_IRQHandler
20000000 g     O .vector_table	00000000 g_pfnVectors
2000061c g     F .text	00000070 MSS_UART_init
20002bc8 g     F .text	000000f8 SystemCoreClockUpdate
20003da0 g     O .bss	00000084 g_mss_spi0
200003aa  w    F .boot_code	00000000 DMA_IRQHandler
200003ee  w    F .boot_code	00000000 FabricIrq13_IRQHandler
200034c0 g     F .text	00000008 atoi
20003a74 g     O .text	00000101 _ctype_
200003ce  w    F .boot_code	00000000 FAB_PLL_Lock_IRQHandler
20000384  w    F .boot_code	00000000 BusFault_Handler
20003f0f g     O .bss	00000001 ch
20000392  w    F .boot_code	00000000 RTC_Wakeup_IRQHandler
20003e98 g     O .bss	00000074 g_mss_i2c1
20003ba0 g       .data	00000000 __data_start
2000041e  w    F .boot_code	00000000 GPIO21_IRQHandler
20000432  w    F .boot_code	00000000 GPIO31_IRQHandler
200003de  w    F .boot_code	00000000 FabricIrq5_IRQHandler
2000f000 g       .stack	00000000 __stack_start__
200003ca  w    F .boot_code	00000000 ECC_Error_IRQHandler
20000d9c g     F .text	00000048 ComBlk_IRQHandler
200003d0  w    F .boot_code	00000000 FAB_PLL_LockLost_IRQHandler
200003f0  w    F .boot_code	00000000 FabricIrq14_IRQHandler
200003a2  w    F .boot_code	00000000 I2C1_SMBus_IRQHandler
20000414  w    F .boot_code	00000000 GPIO16_IRQHandler
200003fc  w    F .boot_code	00000000 GPIO4_IRQHandler
2000042a  w    F .boot_code	00000000 GPIO27_IRQHandler
20000412  w    F .boot_code	00000000 GPIO15_IRQHandler



Disassembly of section .vector_table:

20000000 <__vector_table_start>:
__vector_table_start():
20000000:	20010000 	.word	0x20010000
20000004:	20000191 	.word	0x20000191
20000008:	2000037f 	.word	0x2000037f
2000000c:	20000381 	.word	0x20000381
20000010:	20000383 	.word	0x20000383
20000014:	20000385 	.word	0x20000385
20000018:	20000387 	.word	0x20000387
	...
2000002c:	20000389 	.word	0x20000389
20000030:	2000038b 	.word	0x2000038b
20000034:	00000000 	.word	0x00000000
20000038:	2000038d 	.word	0x2000038d
2000003c:	2000038f 	.word	0x2000038f
20000040:	20000391 	.word	0x20000391
20000044:	20000393 	.word	0x20000393
20000048:	20001e09 	.word	0x20001e09
2000004c:	20001e2d 	.word	0x20001e2d
20000050:	200026fd 	.word	0x200026fd
20000054:	2000039b 	.word	0x2000039b
20000058:	2000039d 	.word	0x2000039d
2000005c:	20002721 	.word	0x20002721
20000060:	200003a1 	.word	0x200003a1
20000064:	200003a3 	.word	0x200003a3
20000068:	20000741 	.word	0x20000741
2000006c:	20000765 	.word	0x20000765
20000070:	200003a9 	.word	0x200003a9
20000074:	200003ab 	.word	0x200003ab
20000078:	200003ad 	.word	0x200003ad
2000007c:	200003af 	.word	0x200003af
20000080:	200003b1 	.word	0x200003b1
20000084:	200003b3 	.word	0x200003b3
20000088:	200003b5 	.word	0x200003b5
2000008c:	20000d9d 	.word	0x20000d9d
20000090:	200003b9 	.word	0x200003b9
20000094:	200003bb 	.word	0x200003bb
20000098:	200003bd 	.word	0x200003bd
2000009c:	200003bf 	.word	0x200003bf
200000a0:	200003c1 	.word	0x200003c1
200000a4:	200003c3 	.word	0x200003c3
200000a8:	200003c5 	.word	0x200003c5
200000ac:	20002899 	.word	0x20002899
200000b0:	20002991 	.word	0x20002991
200000b4:	200003cb 	.word	0x200003cb
200000b8:	200003cd 	.word	0x200003cd
200000bc:	200003cf 	.word	0x200003cf
200000c0:	200003d1 	.word	0x200003d1
200000c4:	200003d3 	.word	0x200003d3
200000c8:	200003d5 	.word	0x200003d5
200000cc:	200003d7 	.word	0x200003d7
200000d0:	200003d9 	.word	0x200003d9
200000d4:	200003db 	.word	0x200003db
200000d8:	200003dd 	.word	0x200003dd
200000dc:	200003df 	.word	0x200003df
200000e0:	200003e1 	.word	0x200003e1
200000e4:	200003e3 	.word	0x200003e3
200000e8:	200003e5 	.word	0x200003e5
200000ec:	200003e7 	.word	0x200003e7
200000f0:	200003e9 	.word	0x200003e9
200000f4:	200003eb 	.word	0x200003eb
200000f8:	200003ed 	.word	0x200003ed
200000fc:	200003ef 	.word	0x200003ef
20000100:	200003f1 	.word	0x200003f1
20000104:	200003f3 	.word	0x200003f3
20000108:	200003f5 	.word	0x200003f5
2000010c:	200003f7 	.word	0x200003f7
20000110:	200003f9 	.word	0x200003f9
20000114:	200003fb 	.word	0x200003fb
20000118:	200003fd 	.word	0x200003fd
2000011c:	200003ff 	.word	0x200003ff
20000120:	20000401 	.word	0x20000401
20000124:	20000403 	.word	0x20000403
20000128:	20000405 	.word	0x20000405
2000012c:	20000407 	.word	0x20000407
20000130:	20000409 	.word	0x20000409
20000134:	2000040b 	.word	0x2000040b
20000138:	2000040d 	.word	0x2000040d
2000013c:	2000040f 	.word	0x2000040f
20000140:	20000411 	.word	0x20000411
20000144:	20000413 	.word	0x20000413
20000148:	20000415 	.word	0x20000415
2000014c:	20000417 	.word	0x20000417
20000150:	20000419 	.word	0x20000419
20000154:	2000041b 	.word	0x2000041b
20000158:	2000041d 	.word	0x2000041d
2000015c:	2000041f 	.word	0x2000041f
20000160:	20000421 	.word	0x20000421
20000164:	20000423 	.word	0x20000423
20000168:	20000425 	.word	0x20000425
2000016c:	20000427 	.word	0x20000427
20000170:	20000429 	.word	0x20000429
20000174:	2000042b 	.word	0x2000042b
20000178:	2000042d 	.word	0x2000042d
2000017c:	2000042f 	.word	0x2000042f
20000180:	20000431 	.word	0x20000431
20000184:	20000433 	.word	0x20000433
	...

Disassembly of section .boot_code:

20000190 <Reset_Handler>:
Reset_Handler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:150
 * cannot be located in MDDR since MDDR is not available at this point.
 * The bits of the content of register r11 have the following meaning:
 *  reg11[0]: eSRAM EDAC enabled
 *  reg11[1]: MDDR ECC/SECDED enabled
 */
    mov r11, #0
20000190:	f04f 0b00 	mov.w	fp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:151
    ldr r0, SF2_MDDR_MODE_CR
20000194:	f8df 02be 	ldr.w	r0, [pc, #702]	; 20000456 <SF2_MDDR_MODE_CR>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:152
    ldr r0, [r0]
20000198:	6800      	ldr	r0, [r0, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:153
    ldr r1, SF2_EDAC_CR
2000019a:	f8df 12b6 	ldr.w	r1, [pc, #694]	; 20000452 <SF2_EDAC_CR>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:154
    ldr r1, [r1]
2000019e:	6809      	ldr	r1, [r1, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:155
    and r1, r1, #3
200001a0:	f001 0103 	and.w	r1, r1, #3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:156
    and r0, r0, #0x1C
200001a4:	f000 001c 	and.w	r0, r0, #28
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:157
    cmp r0, #0x14
200001a8:	2814      	cmp	r0, #20
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:158
    bne check_esram_edac
200001aa:	d101      	bne.n	200001b0 <check_esram_edac>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:159
    orr r11, r11, #2
200001ac:	f04b 0b02 	orr.w	fp, fp, #2

200001b0 <check_esram_edac>:
check_esram_edac():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:161
check_esram_edac:
    cmp r1, #0
200001b0:	2900      	cmp	r1, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:162
    beq check_stack_init
200001b2:	d001      	beq.n	200001b8 <check_stack_init>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:163
    orr r11, r11, #1
200001b4:	f04b 0b01 	orr.w	fp, fp, #1

200001b8 <check_stack_init>:
check_stack_init():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:165
check_stack_init:
    cmp r11, #0
200001b8:	f1bb 0f00 	cmp.w	fp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:166
    beq system_init
200001bc:	d005      	beq.n	200001ca <system_init>

200001be <clear_stack>:
clear_stack():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:168
clear_stack:
    ldr r0, = __stack_start__
200001be:	48a7      	ldr	r0, [pc, #668]	; (2000045c <SF2_MDDR_MODE_CR+0x6>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:169
    ldr r1, =_estack
200001c0:	49a7      	ldr	r1, [pc, #668]	; (20000460 <SF2_MDDR_MODE_CR+0xa>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:170
    ldr r2, RAM_INIT_PATTERN
200001c2:	f8df 2272 	ldr.w	r2, [pc, #626]	; 20000436 <RAM_INIT_PATTERN>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:171
    bl fill_memory                      /* ; fill_memory takes r0 - r2 as arguments uses r4, r5, r6, r7, r8, r9, and does not preserve contents */
200001c6:	f000 f89f 	bl	20000308 <fill_memory>

200001ca <system_init>:
system_init():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:177
    
/*------------------------------------------------------------------------------
 * Call CMSIS system init function.
 */
 system_init:
    ldr r0, =SystemInit
200001ca:	48a6      	ldr	r0, [pc, #664]	; (20000464 <SF2_MDDR_MODE_CR+0xe>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:178
    blx r0
200001cc:	4780      	blx	r0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:184

/*------------------------------------------------------------------------------
 * Modify MDDR configuration if ECC/SECDED is enabled for MDDR.
 * Enable write combining on MDDR bridge, disable non-bufferable regions.
 */
    and r10, r11, 0x2
200001ce:	f00b 0a02 	and.w	sl, fp, #2
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:185
    cmp r10, #0
200001d2:	f1ba 0f00 	cmp.w	sl, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:186
    beq remap_memory
200001d6:	d00c      	beq.n	200001f2 <remap_memory>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:187
    ldr r0, SF2_DDRB_NB_SIZE
200001d8:	f8df 026e 	ldr.w	r0, [pc, #622]	; 2000044a <SF2_DDRB_NB_SIZE>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:188
    ldr r1, SF2_DDRB_CR
200001dc:	f8df 126e 	ldr.w	r1, [pc, #622]	; 2000044e <SF2_DDRB_CR>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:189
    ldr r2, [r0]
200001e0:	6802      	ldr	r2, [r0, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:190
    ldr r3, [r1]
200001e2:	680b      	ldr	r3, [r1, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:191
    push {r0, r1, r2, r3}
200001e4:	b40f      	push	{r0, r1, r2, r3}
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:192
    mov r2, #0
200001e6:	f04f 0200 	mov.w	r2, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:193
    mov r3, #0xFF
200001ea:	f04f 03ff 	mov.w	r3, #255	; 0xff
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:194
    str r2, [r0]
200001ee:	6002      	str	r2, [r0, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:195
    str r3, [r1]
200001f0:	600b      	str	r3, [r1, #0]

200001f2 <remap_memory>:
remap_memory():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:202
/*------------------------------------------------------------------------------
 * Perform memory remapping based on the value of __smartfusion2_memory_remap
 * set in the linker script.
 */
remap_memory:
    ldr r0, =__smartfusion2_memory_remap
200001f2:	489d      	ldr	r0, [pc, #628]	; (20000468 <SF2_MDDR_MODE_CR+0x12>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:203
    ldr r2, =0
200001f4:	f04f 0200 	mov.w	r2, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:204
    ldr r3, =1
200001f8:	f04f 0301 	mov.w	r3, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:205
    cmp r0, #2
200001fc:	2802      	cmp	r0, #2
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:206
    bne check_esram_remap
200001fe:	d108      	bne.n	20000212 <check_esram_remap>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:210
    /*
     * Remap external RAM to address 0x00000000
     */
    ldr r1, SF2_ESRAM_CR
20000200:	f8df 123a 	ldr.w	r1, [pc, #570]	; 2000043e <SF2_ESRAM_CR>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:211
    str r2, [r1]
20000204:	600a      	str	r2, [r1, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:212
    ldr r1, SF2_ENVM_REMAP_CR
20000206:	f8df 123e 	ldr.w	r1, [pc, #574]	; 20000446 <SF2_ENVM_REMAP_CR>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:213
    str r2, [r1]
2000020a:	600a      	str	r2, [r1, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:214
    ldr r1, SF2_DDR_CR
2000020c:	f8df 1232 	ldr.w	r1, [pc, #562]	; 20000442 <SF2_DDR_CR>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:215
    str r3, [r1]
20000210:	600b      	str	r3, [r1, #0]

20000212 <check_esram_remap>:
check_esram_remap():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:217
check_esram_remap:
    cmp r0, #1
20000212:	2801      	cmp	r0, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:218
    bne check_mirrored_nvm
20000214:	d108      	bne.n	20000228 <check_mirrored_nvm>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:222
    /*
     * Remap internal eSRAM to address 0x00000000
     */
    ldr r1, SF2_DDR_CR
20000216:	f8df 122a 	ldr.w	r1, [pc, #554]	; 20000442 <SF2_DDR_CR>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:223
    str r2, [r1]
2000021a:	600a      	str	r2, [r1, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:224
    ldr r1, SF2_ENVM_REMAP_CR
2000021c:	f8df 1226 	ldr.w	r1, [pc, #550]	; 20000446 <SF2_ENVM_REMAP_CR>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:225
    str r2, [r1]
20000220:	600a      	str	r2, [r1, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:226
    ldr r1, SF2_ESRAM_CR
20000222:	f8df 121a 	ldr.w	r1, [pc, #538]	; 2000043e <SF2_ESRAM_CR>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:227
    str r3, [r1]
20000226:	600b      	str	r3, [r1, #0]

20000228 <check_mirrored_nvm>:
check_mirrored_nvm():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:236
 * This is done for debugging executables running out of eNVM with SoftConsole.
 * The .text section should not be copied in this case since both the LMA and
 * VMA point at the eNVM despite the LMA and VMa having different values.
 */
 check_mirrored_nvm:
    ldr r0, =__mirrored_nvm
20000228:	4890      	ldr	r0, [pc, #576]	; (2000046c <SF2_MDDR_MODE_CR+0x16>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:237
    cmp r0, #0
2000022a:	2800      	cmp	r0, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:238
    bne copy_data
2000022c:	d109      	bne.n	20000242 <copy_data>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:243
    
/*------------------------------------------------------------------------------
 * Copy vector table.
 */
    ldr r0, =__vector_table_load
2000022e:	4890      	ldr	r0, [pc, #576]	; (20000470 <SF2_MDDR_MODE_CR+0x1a>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:244
    ldr r1, =__vector_table_start
20000230:	4990      	ldr	r1, [pc, #576]	; (20000474 <SF2_MDDR_MODE_CR+0x1e>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:245
    ldr r2, =_evector_table
20000232:	4a91      	ldr	r2, [pc, #580]	; (20000478 <SF2_MDDR_MODE_CR+0x22>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:246
    bl block_copy
20000234:	f000 f830 	bl	20000298 <block_copy>

20000238 <copy_text>:
copy_text():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:252
    
/*------------------------------------------------------------------------------
 * Copy code section.
 */
copy_text:
    ldr r0, =__text_load
20000238:	4890      	ldr	r0, [pc, #576]	; (2000047c <SF2_MDDR_MODE_CR+0x26>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:253
    ldr r1, =__text_start
2000023a:	4991      	ldr	r1, [pc, #580]	; (20000480 <SF2_MDDR_MODE_CR+0x2a>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:254
    ldr r2, =_etext
2000023c:	4a91      	ldr	r2, [pc, #580]	; (20000484 <SF2_MDDR_MODE_CR+0x2e>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:255
    bl block_copy
2000023e:	f000 f82b 	bl	20000298 <block_copy>

20000242 <copy_data>:
copy_data():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:262
/*------------------------------------------------------------------------------
 * Copy data section.
 */

 copy_data:
    ldr r0, =__data_load
20000242:	4891      	ldr	r0, [pc, #580]	; (20000488 <SF2_MDDR_MODE_CR+0x32>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:263
    ldr r1, =__data_start
20000244:	4991      	ldr	r1, [pc, #580]	; (2000048c <SF2_MDDR_MODE_CR+0x36>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:264
    ldr r2, =_edata
20000246:	4a92      	ldr	r2, [pc, #584]	; (20000490 <SF2_MDDR_MODE_CR+0x3a>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:265
    bl block_copy
20000248:	f000 f826 	bl	20000298 <block_copy>

2000024c <clear_bss>:
clear_bss():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:271
    
/*------------------------------------------------------------------------------
 *  Clear .bss
 */
clear_bss:                               
    ldr r0, =__bss_start__
2000024c:	4891      	ldr	r0, [pc, #580]	; (20000494 <SF2_MDDR_MODE_CR+0x3e>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:272
    ldr r1, =__bss_end__
2000024e:	4992      	ldr	r1, [pc, #584]	; (20000498 <SF2_MDDR_MODE_CR+0x42>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:273
    ldr r2, RAM_INIT_PATTERN
20000250:	f8df 21e2 	ldr.w	r2, [pc, #482]	; 20000436 <RAM_INIT_PATTERN>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:274
    bl fill_memory                      /* ; fill_memory takes r0 - r2 as arguments uses r4, r5, r6, r7, r8, r9, and does not preserve contents */
20000254:	f000 f858 	bl	20000308 <fill_memory>

20000258 <clear_heap>:
clear_heap():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:287
 * (EDAC). We use the decision made earlier in the startup code of whether or
 * not the stack RAM should be initialized. This decision is held in register
 * r11. A non-zero value indicates that the RAM content should be initialized.
 */
clear_heap:
    cmp r11, #0
20000258:	f1bb 0f00 	cmp.w	fp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:288
    beq call_glob_ctor
2000025c:	d010      	beq.n	20000280 <call_glob_ctor>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:289
    ldr r0, =__heap_start__
2000025e:	488f      	ldr	r0, [pc, #572]	; (2000049c <SF2_MDDR_MODE_CR+0x46>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:290
    ldr r1, =_eheap
20000260:	498f      	ldr	r1, [pc, #572]	; (200004a0 <SF2_MDDR_MODE_CR+0x4a>)
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:291
    ldr r2, HEAP_INIT_PATTERN
20000262:	f8df 21d6 	ldr.w	r2, [pc, #470]	; 2000043a <HEAP_INIT_PATTERN>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:292
    bl fill_memory                      /* ; fill_memory takes r0 - r2 as arguments uses r4, r5, r6, r7, r8, r9, and does not preserve contents */
20000266:	f000 f84f 	bl	20000308 <fill_memory>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:297

/*------------------------------------------------------------------------------
 * Restore MDDR configuration.
 */
    and r10, r11, 0x2
2000026a:	f00b 0a02 	and.w	sl, fp, #2
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:298
    cmp r10, #0
2000026e:	f1ba 0f00 	cmp.w	sl, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:299
    beq call_glob_ctor
20000272:	d005      	beq.n	20000280 <call_glob_ctor>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:300
    pop {r0, r1, r2, r3}
20000274:	bc0f      	pop	{r0, r1, r2, r3}
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:301
    str r2, [r0]
20000276:	6002      	str	r2, [r0, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:302
    str r3, [r1]
20000278:	600b      	str	r3, [r1, #0]
2000027a:	bf00      	nop
2000027c:	f3af 8000 	nop.w

20000280 <call_glob_ctor>:
call_glob_ctor():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:313
     * Align to word and use 32-bits LDR instruction to ensure the ADD instruction
     * taking PC as argument is aligned on a word boundary.
     */
    .align 4
call_glob_ctor:
    ldr.w r0, =__libc_init_array
20000280:	f8df 0220 	ldr.w	r0, [pc, #544]	; 200004a4 <SF2_MDDR_MODE_CR+0x4e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:314
    add lr, pc, #3
20000284:	f20f 0e03 	addw	lr, pc, #3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:315
    bx r0
20000288:	4700      	bx	r0

2000028a <branch_to_main>:
branch_to_main():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:321
    
/*------------------------------------------------------------------------------
 * branch to main.
 */
branch_to_main:
    mov r0, #0      /*  ; no arguments  */
2000028a:	f04f 0000 	mov.w	r0, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:322
    mov r1, #0      /*  ; no argv either */
2000028e:	f04f 0100 	mov.w	r1, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:323
    ldr pc, =main
20000292:	f8df f214 	ldr.w	pc, [pc, #532]	; 200004a8 <SF2_MDDR_MODE_CR+0x52>

20000296 <ExitLoop>:
ExitLoop():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:326

ExitLoop:
    B ExitLoop
20000296:	e7fe      	b.n	20000296 <ExitLoop>

20000298 <block_copy>:
block_copy():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:341
 * should be used as per example linker scripts.
 * Note 1: If the memory address in r0 or r1, byte copy routine is used
 * Note 2: If r1 < r2, will loop indefinetley to highlight linker issue.
 */
block_copy:
    push {r3, r4, r5, r6, r7, r8, lr}
20000298:	e92d 41f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, lr}
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:342
    cmp r0, r1
2000029c:	4288      	cmp	r0, r1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:343
    beq block_copy_exit          /* ; Exit early if source and destination the same */
2000029e:	d025      	beq.n	200002ec <block_copy_exit>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:344
    subs.w r2, r2, r1            /* ; Calculate number of bytes to move */
200002a0:	ebb2 0201 	subs.w	r2, r2, r1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:345
    bpl  block_copy_address_ok   /* ; check (end target address) > (target address) => continue */
200002a4:	d500      	bpl.n	200002a8 <block_copy_address_ok>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:346
    b .                          /* ; halt as critical error-  memory map not OK- make it easy to catch in debugger */
200002a6:	e7fe      	b.n	200002a6 <block_copy+0xe>

200002a8 <block_copy_address_ok>:
block_copy_address_ok():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:349
block_copy_address_ok:
    /* ; detect if source or target memory addresses unaligned. If so use byte copy routine */
    orr.w r3, r0, r1
200002a8:	ea40 0301 	orr.w	r3, r0, r1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:350
    ands.w r3, r3, #3
200002ac:	f013 0303 	ands.w	r3, r3, #3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:351
    beq  block_copy_continue
200002b0:	d002      	beq.n	200002b8 <block_copy_continue>

200002b2 <block_copy_byte_copy>:
block_copy_byte_copy():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:353
block_copy_byte_copy:
    bl block_copy_byte
200002b2:	f000 f81d 	bl	200002f0 <block_copy_byte>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:354
    b  block_copy_exit
200002b6:	e019      	b.n	200002ec <block_copy_exit>

200002b8 <block_copy_continue>:
block_copy_continue():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:356
block_copy_continue:
    mov  r3, #0
200002b8:	f04f 0300 	mov.w	r3, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:357
    mov  r8,r2                   /* ; Save copy of byte count */
200002bc:	4690      	mov	r8, r2
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:358
    asrs r2,r2, #4               /* ; Div by 16 to get number of chunks to move */
200002be:	1112      	asrs	r2, r2, #4
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:359
    beq block_copy_byte_copy     /* ; need to use byte copy if less than 16 bytes */
200002c0:	d0f7      	beq.n	200002b2 <block_copy_byte_copy>

200002c2 <block_copy_loop>:
block_copy_loop():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:361
block_copy_loop:
    cmp r2, r3
200002c2:	429a      	cmp	r2, r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:362
    itt ne
200002c4:	bf1c      	itt	ne
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:363
    ldmne r0!, {r4, r5, r6, r7}
200002c6:	c8f0      	ldmiane	r0!, {r4, r5, r6, r7}
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:364
    stmne r1!, {r4, r5, r6, r7}
200002c8:	c1f0      	stmiane	r1!, {r4, r5, r6, r7}
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:365
    add.w r3, r3, #1            /* ; use Thumb2- make sure condition code reg. not updated */
200002ca:	f103 0301 	add.w	r3, r3, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:366
    bne block_copy_loop
200002ce:	d1f8      	bne.n	200002c2 <block_copy_loop>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:368
    /* ; copy spare bytes at the end if any */
    and r8, #15                 /* ; get spare bytes  --check can you do an ands?   */
200002d0:	f008 080f 	and.w	r8, r8, #15
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:369
    cmp r8, #0                  /* ; no spare bytes at end- end now     */
200002d4:	f1b8 0f00 	cmp.w	r8, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:370
    beq block_copy_exit
200002d8:	d008      	beq.n	200002ec <block_copy_exit>

200002da <copy_spare_bytes>:
copy_spare_bytes():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:372
copy_spare_bytes:               /* ; From above, R0 contains source address, R1 contains destination address */
    ldrb r4, [r0]
200002da:	7804      	ldrb	r4, [r0, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:373
    strb r4, [r1]
200002dc:	700c      	strb	r4, [r1, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:374
    add  r0, #1
200002de:	f100 0001 	add.w	r0, r0, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:375
    add  r1, #1
200002e2:	f101 0101 	add.w	r1, r1, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:376
    subs r8, r8, #1
200002e6:	f1b8 0801 	subs.w	r8, r8, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:377
    bne copy_spare_bytes
200002ea:	d1f6      	bne.n	200002da <copy_spare_bytes>

200002ec <block_copy_exit>:
block_copy_exit():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:379
block_copy_exit:
    pop {r3, r4, r5, r6, r7, r8, pc}
200002ec:	e8bd 81f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, pc}

200002f0 <block_copy_byte>:
block_copy_byte():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:388
 * r0: source address
 * r1: target address
 * r2: number of bytes
*/
block_copy_byte:
    push {r3, lr}
200002f0:	b508      	push	{r3, lr}
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:389
    mov  r3, #0
200002f2:	f04f 0300 	mov.w	r3, #0

200002f6 <block_copy_byte_loop>:
block_copy_byte_loop():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:391
block_copy_byte_loop:            /* ; From above, R0 contains source address, R1 contains destination address */
    ldrb r3, [r0]
200002f6:	7803      	ldrb	r3, [r0, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:392
    strb r3, [r1]
200002f8:	700b      	strb	r3, [r1, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:393
    add  r0, #1
200002fa:	f100 0001 	add.w	r0, r0, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:394
    add  r1, #1
200002fe:	f101 0101 	add.w	r1, r1, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:395
    subs r2, r2, #1
20000302:	3a01      	subs	r2, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:396
    bne block_copy_byte_loop
20000304:	d1f7      	bne.n	200002f6 <block_copy_byte_loop>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:397
    pop {r3, pc}
20000306:	bd08      	pop	{r3, pc}

20000308 <fill_memory>:
fill_memory():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:419
; * @return none - Used Registers are not preserved
; */

fill_memory:
    /* ;push {r4, r5, r6, r7, r8, r9, lr}    We will not use stack as may be not available */
    cmp r0, r1
20000308:	4288      	cmp	r0, r1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:420
    beq fill_memory_exit        /* ; Exit early if source and destination the same */
2000030a:	d037      	beq.n	2000037c <fill_memory_exit>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:422
/* ; copy non-aligned bytes at the start */
    and.w  r6, r0, #3           /* ; see if non-alaigned bytes at the start     */
2000030c:	f000 0603 	and.w	r6, r0, #3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:423
    cmp r6, #0
20000310:	2e00      	cmp	r6, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:424
    beq fill_memory_end_start   /* ; no spare bytes at start, continue  */
20000312:	d014      	beq.n	2000033e <fill_memory_end_start>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:425
    mov    r5, #4
20000314:	f04f 0504 	mov.w	r5, #4
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:426
    sub.w  r4, r5, r6           /* ; now have number of non-aligned bytes in r4 */
20000318:	eba5 0406 	sub.w	r4, r5, r6
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:427
    mov  r7, #8
2000031c:	f04f 0708 	mov.w	r7, #8
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:428
    mul  r8, r7, r6             /* ; calculate number of shifts required to initalise pattern for non-aligned bytes */
20000320:	fb07 f806 	mul.w	r8, r7, r6
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:429
    mov  r9, r2                 /* ; copy pattern */
20000324:	4691      	mov	r9, r2
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:430
    ror  r9, r9, r8             /* ; Rotate right to keep pattern consistent */
20000326:	fa69 f908 	ror.w	r9, r9, r8

2000032a <fill_memory_spare_bytes_start>:
fill_memory_spare_bytes_start():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:432
fill_memory_spare_bytes_start:  /* ; From above, R0 contains source address, R1 contains destination address */
    cmp r4, #0                  /* ; no spare bytes at end- end now     */
2000032a:	2c00      	cmp	r4, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:433
    beq fill_memory_end_start
2000032c:	d007      	beq.n	2000033e <fill_memory_end_start>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:434
    strb r9, [r0]               /* ; fill byte */
2000032e:	f880 9000 	strb.w	r9, [r0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:435
    ror.w  r9, r9, r7           /* ; Rotate right by one byte for the next time, to keep pattern consistent */
20000332:	fa69 f907 	ror.w	r9, r9, r7
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:436
    add r0, r0, #1              /* ; add one to address */
20000336:	f100 0001 	add.w	r0, r0, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:437
    subs r4, r4, #1             /* ; subtract one from byte count 1 */
2000033a:	3c01      	subs	r4, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:438
    b fill_memory_spare_bytes_start
2000033c:	e7f5      	b.n	2000032a <fill_memory_spare_bytes_start>

2000033e <fill_memory_end_start>:
fill_memory_end_start():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:440
fill_memory_end_start:
    mov  r6, #0
2000033e:	f04f 0600 	mov.w	r6, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:441
    mov  r7, r1                  /* ; save end address */
20000342:	460f      	mov	r7, r1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:442
    subs r1, r1, r0              /* ; Calculate number of bytes to fill */
20000344:	1a09      	subs	r1, r1, r0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:443
    mov  r8,r1                   /* ; Save copy of byte count */
20000346:	4688      	mov	r8, r1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:444
    asrs r1,r1, #4               /* ; Div by 16 to get number of chunks to move */
20000348:	1109      	asrs	r1, r1, #4
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:445
    mov  r9, r2                  /* ; copy pattern */
2000034a:	4691      	mov	r9, r2
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:446
    mov  r4, r2                  /* ; copy pattern */
2000034c:	4614      	mov	r4, r2
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:447
    mov  r5, r2                  /* ; copy pattern */
2000034e:	4615      	mov	r5, r2
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:448
    cmp r1, r6                   /* ; compare to see if all chunks copied */
20000350:	42b1      	cmp	r1, r6
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:449
    beq fill_memory_spare_bytes_end
20000352:	d006      	beq.n	20000362 <fill_memory_spare_bytes_end>

20000354 <fill_memory_loop>:
fill_memory_loop():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:451
fill_memory_loop:
    it ne
20000354:	bf18      	it	ne
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:452
    stmne r0!, {r2, r4, r5, r9}  /* ; copy pattern- note: stmne instruction must me word aligned (address in r0) */
20000356:	e8a0 0234 	stmiane.w	r0!, {r2, r4, r5, r9}
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:453
    add.w r6, r6, #1             /* ; use Thumb2- make sure condition code reg. not updated */
2000035a:	f106 0601 	add.w	r6, r6, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:454
    cmp r1, r6                   /* ; compare to see if all chunks copied */
2000035e:	42b1      	cmp	r1, r6
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:455
    bne fill_memory_loop
20000360:	d1f8      	bne.n	20000354 <fill_memory_loop>

20000362 <fill_memory_spare_bytes_end>:
fill_memory_spare_bytes_end():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:457
fill_memory_spare_bytes_end:     /* ; copy spare bytes at the end if any */
    and.w r8, r8, #15            /* ; get spare bytes  --check can you do an ands?  */
20000362:	f008 080f 	and.w	r8, r8, #15

20000366 <fill_memory_spare_end_loop>:
fill_memory_spare_end_loop():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:459
fill_memory_spare_end_loop:      /* ; From above, R0 contains source address, R1 contains destination address */
    cmp r8, #0                   /* ; no spare bytes at end- end now    */
20000366:	f1b8 0f00 	cmp.w	r8, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:460
    beq fill_memory_exit
2000036a:	d007      	beq.n	2000037c <fill_memory_exit>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:461
    strb r2, [r0]
2000036c:	7002      	strb	r2, [r0, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:462
    ror.w  r2, r2, #8            /* ; Rotate right by one byte for the next time, to keep pattern consistent */
2000036e:	ea4f 2232 	mov.w	r2, r2, ror #8
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:463
    add r0, r0, #1               /* ; add one to address */
20000372:	f100 0001 	add.w	r0, r0, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:464
    subs r8, r8, #1              /* ; subtract one from byte count 1    */
20000376:	f1b8 0801 	subs.w	r8, r8, #1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:465
    b fill_memory_spare_end_loop
2000037a:	e7f4      	b.n	20000366 <fill_memory_spare_end_loop>

2000037c <fill_memory_exit>:
fill_memory_exit():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:467
fill_memory_exit:
    bx lr               /*; We will not use pop as stack may be not available */
2000037c:	4770      	bx	lr

2000037e <NMI_Handler>:
NMI_Handler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:554
 * NMI_Handler
 */
    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B .
2000037e:	e7fe      	b.n	2000037e <NMI_Handler>

20000380 <HardFault_Handler>:
HardFault_Handler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:562
 * HardFault_Handler
 */
    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B .
20000380:	e7fe      	b.n	20000380 <HardFault_Handler>

20000382 <MemManage_Handler>:
MemManage_Handler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:570
 * MemManage_Handler
 */
    .weak   MemManage_Handler
    .type   MemManage_Handler, %function
MemManage_Handler:
    B .
20000382:	e7fe      	b.n	20000382 <MemManage_Handler>

20000384 <BusFault_Handler>:
BusFault_Handler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:578
 * BusFault_Handler
 */
    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B .
20000384:	e7fe      	b.n	20000384 <BusFault_Handler>

20000386 <UsageFault_Handler>:
UsageFault_Handler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:586
 * UsageFault_Handler
 */
    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B .
20000386:	e7fe      	b.n	20000386 <UsageFault_Handler>

20000388 <SVC_Handler>:
SVC_Handler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:594
 * SVC_Handler
 */
    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B .
20000388:	e7fe      	b.n	20000388 <SVC_Handler>

2000038a <DebugMon_Handler>:
DebugMon_Handler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:602
 * DebugMon_Handler
 */
    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B .
2000038a:	e7fe      	b.n	2000038a <DebugMon_Handler>

2000038c <PendSV_Handler>:
PendSV_Handler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:610
 * PendSV_Handler
 */
    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B .
2000038c:	e7fe      	b.n	2000038c <PendSV_Handler>

2000038e <SysTick_Handler>:
SysTick_Handler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:618
 * SysTick_Handler
 */
    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B .
2000038e:	e7fe      	b.n	2000038e <SysTick_Handler>

20000390 <WdogWakeup_IRQHandler>:
WdogWakeup_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:626
 * WdogWakeup_IRQHandler
 */
    .weak   WdogWakeup_IRQHandler
    .type   WdogWakeup_IRQHandler, %function
WdogWakeup_IRQHandler:
    B .
20000390:	e7fe      	b.n	20000390 <WdogWakeup_IRQHandler>

20000392 <RTC_Wakeup_IRQHandler>:
RTC_Wakeup_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:634
 * RTC_Wakeup_IRQHandler
 */
    .weak   RTC_Wakeup_IRQHandler
    .type   RTC_Wakeup_IRQHandler, %function
RTC_Wakeup_IRQHandler:
    B .
20000392:	e7fe      	b.n	20000392 <RTC_Wakeup_IRQHandler>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:642
 * SPI0_IRQHandler
 */
    .weak   SPI0_IRQHandler
    .type   SPI0_IRQHandler, %function
SPI0_IRQHandler:
    B .
20000394:	e7fe      	b.n	20000394 <RTC_Wakeup_IRQHandler+0x2>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:650
 * SPI1_IRQHandler
 */
    .weak   SPI1_IRQHandler
    .type   SPI1_IRQHandler, %function
SPI1_IRQHandler:
    B .
20000396:	e7fe      	b.n	20000396 <RTC_Wakeup_IRQHandler+0x4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:658
 * I2C0_IRQHandler
 */
    .weak   I2C0_IRQHandler
    .type   I2C0_IRQHandler, %function
I2C0_IRQHandler:
    B .
20000398:	e7fe      	b.n	20000398 <RTC_Wakeup_IRQHandler+0x6>

2000039a <I2C0_SMBAlert_IRQHandler>:
I2C0_SMBAlert_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:666
 * I2C0_SMBAlert_IRQHandler
 */
    .weak   I2C0_SMBAlert_IRQHandler
    .type   I2C0_SMBAlert_IRQHandler, %function
I2C0_SMBAlert_IRQHandler:
    B .
2000039a:	e7fe      	b.n	2000039a <I2C0_SMBAlert_IRQHandler>

2000039c <I2C0_SMBus_IRQHandler>:
I2C0_SMBus_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:674
 * I2C0_SMBus_IRQHandler
 */
    .weak   I2C0_SMBus_IRQHandler
    .type   I2C0_SMBus_IRQHandler, %function
I2C0_SMBus_IRQHandler:
    B .
2000039c:	e7fe      	b.n	2000039c <I2C0_SMBus_IRQHandler>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:682
 * I2C1_IRQHandler
 */
    .weak   I2C1_IRQHandler
    .type   I2C1_IRQHandler, %function
I2C1_IRQHandler:
    B .
2000039e:	e7fe      	b.n	2000039e <I2C0_SMBus_IRQHandler+0x2>

200003a0 <I2C1_SMBAlert_IRQHandler>:
I2C1_SMBAlert_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:690
 * I2C1_SMBAlert_IRQHandler
 */
    .weak   I2C1_SMBAlert_IRQHandler
    .type   I2C1_SMBAlert_IRQHandler, %function
I2C1_SMBAlert_IRQHandler:
    B .
200003a0:	e7fe      	b.n	200003a0 <I2C1_SMBAlert_IRQHandler>

200003a2 <I2C1_SMBus_IRQHandler>:
I2C1_SMBus_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:698
 * I2C1_SMBus_IRQHandler
 */
    .weak   I2C1_SMBus_IRQHandler
    .type   I2C1_SMBus_IRQHandler, %function
I2C1_SMBus_IRQHandler:
    B .
200003a2:	e7fe      	b.n	200003a2 <I2C1_SMBus_IRQHandler>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:706
 * UART0_IRQHandler
 */
    .weak   UART0_IRQHandler
    .type   UART0_IRQHandler, %function
UART0_IRQHandler:
    B .
200003a4:	e7fe      	b.n	200003a4 <I2C1_SMBus_IRQHandler+0x2>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:714
 * UART1_IRQHandler
 */
    .weak   UART1_IRQHandler
    .type   UART1_IRQHandler, %function
UART1_IRQHandler:
    B .
200003a6:	e7fe      	b.n	200003a6 <I2C1_SMBus_IRQHandler+0x4>

200003a8 <EthernetMAC_IRQHandler>:
EthernetMAC_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:722
 * EthernetMAC_IRQHandler
 */
    .weak   EthernetMAC_IRQHandler
    .type   EthernetMAC_IRQHandler, %function
EthernetMAC_IRQHandler:
    B .
200003a8:	e7fe      	b.n	200003a8 <EthernetMAC_IRQHandler>

200003aa <DMA_IRQHandler>:
DMA_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:730
 * DMA_IRQHandler
 */
    .weak   DMA_IRQHandler
    .type   DMA_IRQHandler, %function
DMA_IRQHandler:
    B .
200003aa:	e7fe      	b.n	200003aa <DMA_IRQHandler>

200003ac <Timer1_IRQHandler>:
Timer1_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:738
 * Timer1_IRQHandler
 */
    .weak   Timer1_IRQHandler
    .type   Timer1_IRQHandler, %function
Timer1_IRQHandler:
    B .
200003ac:	e7fe      	b.n	200003ac <Timer1_IRQHandler>

200003ae <Timer2_IRQHandler>:
Timer2_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:746
 * Timer2_IRQHandler
 */
    .weak   Timer2_IRQHandler
    .type   Timer2_IRQHandler, %function
Timer2_IRQHandler:
    B .
200003ae:	e7fe      	b.n	200003ae <Timer2_IRQHandler>

200003b0 <CAN_IRQHandler>:
CAN_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:754
 * CAN_IRQHandler
 */
    .weak   CAN_IRQHandler
    .type   CAN_IRQHandler, %function
CAN_IRQHandler:
    B .
200003b0:	e7fe      	b.n	200003b0 <CAN_IRQHandler>

200003b2 <ENVM0_IRQHandler>:
ENVM0_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:762
 * ENVM0_IRQHandler
 */
    .weak   ENVM0_IRQHandler
    .type   ENVM0_IRQHandler, %function
ENVM0_IRQHandler:
    B .
200003b2:	e7fe      	b.n	200003b2 <ENVM0_IRQHandler>

200003b4 <ENVM1_IRQHandler>:
ENVM1_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:770
 * ENVM1_IRQHandler
 */
    .weak   ENVM1_IRQHandler
    .type   ENVM1_IRQHandler, %function
ENVM1_IRQHandler:
    B .
200003b4:	e7fe      	b.n	200003b4 <ENVM1_IRQHandler>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:778
 * ComBlk_IRQHandler
 */
    .weak   ComBlk_IRQHandler
    .type   ComBlk_IRQHandler, %function
ComBlk_IRQHandler:
    B .
200003b6:	e7fe      	b.n	200003b6 <ENVM1_IRQHandler+0x2>

200003b8 <USB_IRQHandler>:
USB_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:786
 * USB_IRQHandler
 */
    .weak   USB_IRQHandler
    .type   USB_IRQHandler, %function
USB_IRQHandler:
    B .
200003b8:	e7fe      	b.n	200003b8 <USB_IRQHandler>

200003ba <USB_DMA_IRQHandler>:
USB_DMA_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:794
 * USB_DMA_IRQHandler
 */
    .weak   USB_DMA_IRQHandler
    .type   USB_DMA_IRQHandler, %function
USB_DMA_IRQHandler:
    B .
200003ba:	e7fe      	b.n	200003ba <USB_DMA_IRQHandler>

200003bc <PLL_Lock_IRQHandler>:
PLL_Lock_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:802
 * PLL_Lock_IRQHandler
 */
    .weak   PLL_Lock_IRQHandler
    .type   PLL_Lock_IRQHandler, %function
PLL_Lock_IRQHandler:
    B .
200003bc:	e7fe      	b.n	200003bc <PLL_Lock_IRQHandler>

200003be <PLL_LockLost_IRQHandler>:
PLL_LockLost_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:810
 * PLL_LockLost_IRQHandler
 */
    .weak   PLL_LockLost_IRQHandler
    .type   PLL_LockLost_IRQHandler, %function
PLL_LockLost_IRQHandler:
    B .
200003be:	e7fe      	b.n	200003be <PLL_LockLost_IRQHandler>

200003c0 <CommSwitchError_IRQHandler>:
CommSwitchError_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:818
 * CommSwitchError_IRQHandler
 */
    .weak   CommSwitchError_IRQHandler
    .type   CommSwitchError_IRQHandler, %function
CommSwitchError_IRQHandler:
    B .
200003c0:	e7fe      	b.n	200003c0 <CommSwitchError_IRQHandler>

200003c2 <CacheError_IRQHandler>:
CacheError_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:826
 * CacheError_IRQHandler
 */
    .weak   CacheError_IRQHandler
    .type   CacheError_IRQHandler, %function
CacheError_IRQHandler:
    B .
200003c2:	e7fe      	b.n	200003c2 <CacheError_IRQHandler>

200003c4 <DDR_IRQHandler>:
DDR_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:834
 * DDR_IRQHandler
 */
    .weak   DDR_IRQHandler
    .type   DDR_IRQHandler, %function
DDR_IRQHandler:
    B .
200003c4:	e7fe      	b.n	200003c4 <DDR_IRQHandler>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:842
 * HPDMA_Complete_IRQHandler
 */
    .weak   HPDMA_Complete_IRQHandler
    .type   HPDMA_Complete_IRQHandler, %function
HPDMA_Complete_IRQHandler:
    B .
200003c6:	e7fe      	b.n	200003c6 <DDR_IRQHandler+0x2>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:850
 * HPDMA_Error_IRQHandler
 */
    .weak   HPDMA_Error_IRQHandler
    .type   HPDMA_Error_IRQHandler, %function
HPDMA_Error_IRQHandler:
    B .
200003c8:	e7fe      	b.n	200003c8 <DDR_IRQHandler+0x4>

200003ca <ECC_Error_IRQHandler>:
ECC_Error_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:858
 * ECC_Error_IRQHandler
 */
    .weak   ECC_Error_IRQHandler
    .type   ECC_Error_IRQHandler, %function
ECC_Error_IRQHandler:
    B .
200003ca:	e7fe      	b.n	200003ca <ECC_Error_IRQHandler>

200003cc <MDDR_IOCalib_IRQHandler>:
MDDR_IOCalib_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:866
 * MDDR_IOCalib_IRQHandler
 */
    .weak   MDDR_IOCalib_IRQHandler
    .type   MDDR_IOCalib_IRQHandler, %function
MDDR_IOCalib_IRQHandler:
    B .
200003cc:	e7fe      	b.n	200003cc <MDDR_IOCalib_IRQHandler>

200003ce <FAB_PLL_Lock_IRQHandler>:
FAB_PLL_Lock_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:874
 * FAB_PLL_Lock_IRQHandler
 */
    .weak   FAB_PLL_Lock_IRQHandler
    .type   FAB_PLL_Lock_IRQHandler, %function    
FAB_PLL_Lock_IRQHandler:
    B .
200003ce:	e7fe      	b.n	200003ce <FAB_PLL_Lock_IRQHandler>

200003d0 <FAB_PLL_LockLost_IRQHandler>:
FAB_PLL_LockLost_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:882
 * FAB_PLL_LockLost_IRQHandler
 */
    .weak   FAB_PLL_LockLost_IRQHandler
    .type   FAB_PLL_LockLost_IRQHandler, %function        
FAB_PLL_LockLost_IRQHandler:
    B .
200003d0:	e7fe      	b.n	200003d0 <FAB_PLL_LockLost_IRQHandler>

200003d2 <FIC64_IRQHandler>:
FIC64_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:890
 * FIC64_IRQHandler
 */
    .weak   FIC64_IRQHandler
    .type   FIC64_IRQHandler, %function            
FIC64_IRQHandler:
    B .
200003d2:	e7fe      	b.n	200003d2 <FIC64_IRQHandler>

200003d4 <FabricIrq0_IRQHandler>:
FabricIrq0_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:898
 * FabricIrq0_IRQHandler
 */
    .weak   FabricIrq0_IRQHandler
    .type   FabricIrq0_IRQHandler, %function
FabricIrq0_IRQHandler:
    B .
200003d4:	e7fe      	b.n	200003d4 <FabricIrq0_IRQHandler>

200003d6 <FabricIrq1_IRQHandler>:
FabricIrq1_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:906
 * FabricIrq1_IRQHandler
 */
    .weak   FabricIrq1_IRQHandler
    .type   FabricIrq1_IRQHandler, %function
FabricIrq1_IRQHandler:
    B .
200003d6:	e7fe      	b.n	200003d6 <FabricIrq1_IRQHandler>

200003d8 <FabricIrq2_IRQHandler>:
FabricIrq2_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:914
 * FabricIrq2_IRQHandler
 */
    .weak   FabricIrq2_IRQHandler
    .type   FabricIrq2_IRQHandler, %function
FabricIrq2_IRQHandler:
    B .
200003d8:	e7fe      	b.n	200003d8 <FabricIrq2_IRQHandler>

200003da <FabricIrq3_IRQHandler>:
FabricIrq3_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:922
 * FabricIrq3_IRQHandler
 */
    .weak   FabricIrq3_IRQHandler
    .type   FabricIrq3_IRQHandler, %function
FabricIrq3_IRQHandler:
    B .
200003da:	e7fe      	b.n	200003da <FabricIrq3_IRQHandler>

200003dc <FabricIrq4_IRQHandler>:
FabricIrq4_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:930
 * FabricIrq4_IRQHandler
 */
    .weak   FabricIrq4_IRQHandler
    .type   FabricIrq4_IRQHandler, %function
FabricIrq4_IRQHandler:
    B .
200003dc:	e7fe      	b.n	200003dc <FabricIrq4_IRQHandler>

200003de <FabricIrq5_IRQHandler>:
FabricIrq5_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:938
 * FabricIrq5_IRQHandler
 */
    .weak   FabricIrq5_IRQHandler
    .type   FabricIrq5_IRQHandler, %function
FabricIrq5_IRQHandler:
    B .
200003de:	e7fe      	b.n	200003de <FabricIrq5_IRQHandler>

200003e0 <FabricIrq6_IRQHandler>:
FabricIrq6_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:946
 * FabricIrq6_IRQHandler
 */
    .weak   FabricIrq6_IRQHandler
    .type   FabricIrq6_IRQHandler, %function
FabricIrq6_IRQHandler:
    B .
200003e0:	e7fe      	b.n	200003e0 <FabricIrq6_IRQHandler>

200003e2 <FabricIrq7_IRQHandler>:
FabricIrq7_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:954
 * FabricIrq7_IRQHandler
 */
    .weak   FabricIrq7_IRQHandler
    .type   FabricIrq7_IRQHandler, %function
FabricIrq7_IRQHandler:
    B .
200003e2:	e7fe      	b.n	200003e2 <FabricIrq7_IRQHandler>

200003e4 <FabricIrq8_IRQHandler>:
FabricIrq8_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:962
 * FabricIrq8_IRQHandler
 */
    .weak   FabricIrq8_IRQHandler
    .type   FabricIrq8_IRQHandler, %function
FabricIrq8_IRQHandler:
    B .
200003e4:	e7fe      	b.n	200003e4 <FabricIrq8_IRQHandler>

200003e6 <FabricIrq9_IRQHandler>:
FabricIrq9_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:970
 * FabricIrq9_IRQHandler
 */
    .weak   FabricIrq9_IRQHandler
    .type   FabricIrq9_IRQHandler, %function
FabricIrq9_IRQHandler:
    B .
200003e6:	e7fe      	b.n	200003e6 <FabricIrq9_IRQHandler>

200003e8 <FabricIrq10_IRQHandler>:
FabricIrq10_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:978
 * FabricIrq10_IRQHandler
 */
    .weak   FabricIrq10_IRQHandler
    .type   FabricIrq10_IRQHandler, %function
FabricIrq10_IRQHandler:
    B .
200003e8:	e7fe      	b.n	200003e8 <FabricIrq10_IRQHandler>

200003ea <FabricIrq11_IRQHandler>:
FabricIrq11_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:986
 * FabricIrq11_IRQHandler
 */
    .weak   FabricIrq11_IRQHandler
    .type   FabricIrq11_IRQHandler, %function
FabricIrq11_IRQHandler:
    B .
200003ea:	e7fe      	b.n	200003ea <FabricIrq11_IRQHandler>

200003ec <FabricIrq12_IRQHandler>:
FabricIrq12_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:994
 * FabricIrq12_IRQHandler
 */
    .weak   FabricIrq12_IRQHandler
    .type   FabricIrq12_IRQHandler, %function
FabricIrq12_IRQHandler:
    B .
200003ec:	e7fe      	b.n	200003ec <FabricIrq12_IRQHandler>

200003ee <FabricIrq13_IRQHandler>:
FabricIrq13_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1002
 * FabricIrq13_IRQHandler
 */
    .weak   FabricIrq13_IRQHandler
    .type   FabricIrq13_IRQHandler, %function
FabricIrq13_IRQHandler:
    B .
200003ee:	e7fe      	b.n	200003ee <FabricIrq13_IRQHandler>

200003f0 <FabricIrq14_IRQHandler>:
FabricIrq14_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1010
 * FabricIrq14_IRQHandler
 */
    .weak   FabricIrq14_IRQHandler
    .type   FabricIrq14_IRQHandler, %function
FabricIrq14_IRQHandler:
    B .
200003f0:	e7fe      	b.n	200003f0 <FabricIrq14_IRQHandler>

200003f2 <FabricIrq15_IRQHandler>:
FabricIrq15_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1018
 * FabricIrq15_IRQHandler
 */
    .weak   FabricIrq15_IRQHandler
    .type   FabricIrq15_IRQHandler, %function
FabricIrq15_IRQHandler:
    B .    
200003f2:	e7fe      	b.n	200003f2 <FabricIrq15_IRQHandler>

200003f4 <GPIO0_IRQHandler>:
GPIO0_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1026
 * GPIO0_IRQHandler
 */
    .weak   GPIO0_IRQHandler
    .type   GPIO0_IRQHandler, %function
GPIO0_IRQHandler:
    B .
200003f4:	e7fe      	b.n	200003f4 <GPIO0_IRQHandler>

200003f6 <GPIO1_IRQHandler>:
GPIO1_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1034
 * GPIO1_IRQHandler
 */
    .weak   GPIO1_IRQHandler
    .type   GPIO1_IRQHandler, %function
GPIO1_IRQHandler:
    B .
200003f6:	e7fe      	b.n	200003f6 <GPIO1_IRQHandler>

200003f8 <GPIO2_IRQHandler>:
GPIO2_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1042
 * GPIO2_IRQHandler
 */
    .weak   GPIO2_IRQHandler
    .type   GPIO2_IRQHandler, %function
GPIO2_IRQHandler:
    B .
200003f8:	e7fe      	b.n	200003f8 <GPIO2_IRQHandler>

200003fa <GPIO3_IRQHandler>:
GPIO3_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1050
 * GPIO3_IRQHandler
 */
    .weak   GPIO3_IRQHandler
    .type   GPIO3_IRQHandler, %function
GPIO3_IRQHandler:
    B .
200003fa:	e7fe      	b.n	200003fa <GPIO3_IRQHandler>

200003fc <GPIO4_IRQHandler>:
GPIO4_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1058
 * GPIO4_IRQHandler
 */
    .weak   GPIO4_IRQHandler
    .type   GPIO4_IRQHandler, %function
GPIO4_IRQHandler:
    B .
200003fc:	e7fe      	b.n	200003fc <GPIO4_IRQHandler>

200003fe <GPIO5_IRQHandler>:
GPIO5_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1066
 * GPIO5_IRQHandler
 */
    .weak   GPIO5_IRQHandler
    .type   GPIO5_IRQHandler, %function
GPIO5_IRQHandler:
    B .
200003fe:	e7fe      	b.n	200003fe <GPIO5_IRQHandler>

20000400 <GPIO6_IRQHandler>:
GPIO6_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1074
 * GPIO6_IRQHandler
 */
    .weak   GPIO6_IRQHandler
    .type   GPIO6_IRQHandler, %function
GPIO6_IRQHandler:
    B .
20000400:	e7fe      	b.n	20000400 <GPIO6_IRQHandler>

20000402 <GPIO7_IRQHandler>:
GPIO7_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1082
 * GPIO7_IRQHandler
 */
    .weak   GPIO7_IRQHandler
    .type   GPIO7_IRQHandler, %function
GPIO7_IRQHandler:
    B .
20000402:	e7fe      	b.n	20000402 <GPIO7_IRQHandler>

20000404 <GPIO8_IRQHandler>:
GPIO8_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1090
 * GPIO8_IRQHandler
 */
    .weak   GPIO8_IRQHandler
    .type   GPIO8_IRQHandler, %function
GPIO8_IRQHandler:
    B .
20000404:	e7fe      	b.n	20000404 <GPIO8_IRQHandler>

20000406 <GPIO9_IRQHandler>:
GPIO9_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1098
 * GPIO9_IRQHandler
 */
    .weak   GPIO9_IRQHandler
    .type   GPIO9_IRQHandler, %function
GPIO9_IRQHandler:
    B .
20000406:	e7fe      	b.n	20000406 <GPIO9_IRQHandler>

20000408 <GPIO10_IRQHandler>:
GPIO10_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1106
 * GPIO10_IRQHandler
 */
    .weak   GPIO10_IRQHandler
    .type   GPIO10_IRQHandler, %function
GPIO10_IRQHandler:
    B .
20000408:	e7fe      	b.n	20000408 <GPIO10_IRQHandler>

2000040a <GPIO11_IRQHandler>:
GPIO11_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1114
 * GPIO11_IRQHandler
 */
    .weak   GPIO11_IRQHandler
    .type   GPIO11_IRQHandler, %function
GPIO11_IRQHandler:
    B .
2000040a:	e7fe      	b.n	2000040a <GPIO11_IRQHandler>

2000040c <GPIO12_IRQHandler>:
GPIO12_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1122
 * GPIO12_IRQHandler
 */
    .weak   GPIO12_IRQHandler
    .type   GPIO12_IRQHandler, %function
GPIO12_IRQHandler:
    B .
2000040c:	e7fe      	b.n	2000040c <GPIO12_IRQHandler>

2000040e <GPIO13_IRQHandler>:
GPIO13_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1130
 * GPIO13_IRQHandler
 */
    .weak   GPIO13_IRQHandler
    .type   GPIO13_IRQHandler, %function
GPIO13_IRQHandler:
    B .
2000040e:	e7fe      	b.n	2000040e <GPIO13_IRQHandler>

20000410 <GPIO14_IRQHandler>:
GPIO14_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1138
 * GPIO14_IRQHandler
 */
    .weak   GPIO14_IRQHandler
    .type   GPIO14_IRQHandler, %function
GPIO14_IRQHandler:
    B .
20000410:	e7fe      	b.n	20000410 <GPIO14_IRQHandler>

20000412 <GPIO15_IRQHandler>:
GPIO15_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1146
 * GPIO15_IRQHandler
 */
    .weak   GPIO15_IRQHandler
    .type   GPIO15_IRQHandler, %function
GPIO15_IRQHandler:
    B .
20000412:	e7fe      	b.n	20000412 <GPIO15_IRQHandler>

20000414 <GPIO16_IRQHandler>:
GPIO16_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1154
 * GPIO16_IRQHandler
 */
    .weak   GPIO16_IRQHandler
    .type   GPIO16_IRQHandler, %function
GPIO16_IRQHandler:
    B .
20000414:	e7fe      	b.n	20000414 <GPIO16_IRQHandler>

20000416 <GPIO17_IRQHandler>:
GPIO17_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1162
 * GPIO17_IRQHandler
 */
    .weak   GPIO17_IRQHandler
    .type   GPIO17_IRQHandler, %function
GPIO17_IRQHandler:
    B .
20000416:	e7fe      	b.n	20000416 <GPIO17_IRQHandler>

20000418 <GPIO18_IRQHandler>:
GPIO18_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1170
 * GPIO18_IRQHandler
 */
    .weak   GPIO18_IRQHandler
    .type   GPIO18_IRQHandler, %function
GPIO18_IRQHandler:
    B .
20000418:	e7fe      	b.n	20000418 <GPIO18_IRQHandler>

2000041a <GPIO19_IRQHandler>:
GPIO19_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1178
 * GPIO19_IRQHandler
 */
    .weak   GPIO19_IRQHandler
    .type   GPIO19_IRQHandler, %function
GPIO19_IRQHandler:
    B .
2000041a:	e7fe      	b.n	2000041a <GPIO19_IRQHandler>

2000041c <GPIO20_IRQHandler>:
GPIO20_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1186
 * GPIO20_IRQHandler
 */
    .weak   GPIO20_IRQHandler
    .type   GPIO20_IRQHandler, %function
GPIO20_IRQHandler:
    B .
2000041c:	e7fe      	b.n	2000041c <GPIO20_IRQHandler>

2000041e <GPIO21_IRQHandler>:
GPIO21_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1194
 * GPIO21_IRQHandler
 */
    .weak   GPIO21_IRQHandler
    .type   GPIO21_IRQHandler, %function
GPIO21_IRQHandler:
    B .
2000041e:	e7fe      	b.n	2000041e <GPIO21_IRQHandler>

20000420 <GPIO22_IRQHandler>:
GPIO22_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1202
 * GPIO22_IRQHandler
 */
    .weak   GPIO22_IRQHandler
    .type   GPIO22_IRQHandler, %function
GPIO22_IRQHandler:
    B .
20000420:	e7fe      	b.n	20000420 <GPIO22_IRQHandler>

20000422 <GPIO23_IRQHandler>:
GPIO23_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1210
 * GPIO23_IRQHandler
 */
    .weak   GPIO23_IRQHandler
    .type   GPIO23_IRQHandler, %function
GPIO23_IRQHandler:
    B .
20000422:	e7fe      	b.n	20000422 <GPIO23_IRQHandler>

20000424 <GPIO24_IRQHandler>:
GPIO24_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1218
 * GPIO24_IRQHandler
 */
    .weak   GPIO24_IRQHandler
    .type   GPIO24_IRQHandler, %function
GPIO24_IRQHandler:
    B .
20000424:	e7fe      	b.n	20000424 <GPIO24_IRQHandler>

20000426 <GPIO25_IRQHandler>:
GPIO25_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1226
 * GPIO25_IRQHandler
 */
    .weak   GPIO25_IRQHandler
    .type   GPIO25_IRQHandler, %function
GPIO25_IRQHandler:
    B .
20000426:	e7fe      	b.n	20000426 <GPIO25_IRQHandler>

20000428 <GPIO26_IRQHandler>:
GPIO26_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1234
 * GPIO26_IRQHandler
 */
    .weak   GPIO26_IRQHandler
    .type   GPIO26_IRQHandler, %function
GPIO26_IRQHandler:
    B .
20000428:	e7fe      	b.n	20000428 <GPIO26_IRQHandler>

2000042a <GPIO27_IRQHandler>:
GPIO27_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1242
 * GPIO27_IRQHandler
 */
    .weak   GPIO27_IRQHandler
    .type   GPIO27_IRQHandler, %function
GPIO27_IRQHandler:
    B .
2000042a:	e7fe      	b.n	2000042a <GPIO27_IRQHandler>

2000042c <GPIO28_IRQHandler>:
GPIO28_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1250
 * GPIO28_IRQHandler
 */
    .weak   GPIO28_IRQHandler
    .type   GPIO28_IRQHandler, %function
GPIO28_IRQHandler:
    B .
2000042c:	e7fe      	b.n	2000042c <GPIO28_IRQHandler>

2000042e <GPIO29_IRQHandler>:
GPIO29_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1258
 * GPIO29_IRQHandler
 */
    .weak   GPIO29_IRQHandler
    .type   GPIO29_IRQHandler, %function
GPIO29_IRQHandler:
    B .
2000042e:	e7fe      	b.n	2000042e <GPIO29_IRQHandler>

20000430 <GPIO30_IRQHandler>:
GPIO30_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1266
 * GPIO30_IRQHandler
 */
    .weak   GPIO30_IRQHandler
    .type   GPIO30_IRQHandler, %function
GPIO30_IRQHandler:
    B .
20000430:	e7fe      	b.n	20000430 <GPIO30_IRQHandler>

20000432 <GPIO31_IRQHandler>:
GPIO31_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1274
 * GPIO31_IRQHandler
 */
    .weak   GPIO31_IRQHandler
    .type   GPIO31_IRQHandler, %function
GPIO31_IRQHandler:
    B .
20000432:	e7fe      	b.n	20000432 <GPIO31_IRQHandler>

20000434 <mscc_post_hw_cfg_init>:
mscc_post_hw_cfg_init():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1282
 * mscc_post_hw_cfg_init
 */
    .weak   mscc_post_hw_cfg_init
    .type   mscc_post_hw_cfg_init, %function
mscc_post_hw_cfg_init:
    BX LR
20000434:	4770      	bx	lr

20000436 <RAM_INIT_PATTERN>:
RAM_INIT_PATTERN():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1282
20000436:	0000      	.short	0x0000
	...

2000043a <HEAP_INIT_PATTERN>:
HEAP_INIT_PATTERN():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1282
2000043a:	a2a2      	.short	0xa2a2
2000043c:	a2a2      	.short	0xa2a2

2000043e <SF2_ESRAM_CR>:
SF2_ESRAM_CR():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1282
2000043e:	8000      	.short	0x8000
20000440:	4003      	.short	0x4003

20000442 <SF2_DDR_CR>:
SF2_DDR_CR():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1282
20000442:	8008      	.short	0x8008
20000444:	4003      	.short	0x4003

20000446 <SF2_ENVM_REMAP_CR>:
SF2_ENVM_REMAP_CR():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1282
20000446:	8010      	.short	0x8010
20000448:	4003      	.short	0x4003

2000044a <SF2_DDRB_NB_SIZE>:
SF2_DDRB_NB_SIZE():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1282
2000044a:	8030      	.short	0x8030
2000044c:	4003      	.short	0x4003

2000044e <SF2_DDRB_CR>:
SF2_DDRB_CR():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1282
2000044e:	8034      	.short	0x8034
20000450:	4003      	.short	0x4003

20000452 <SF2_EDAC_CR>:
SF2_EDAC_CR():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1282
20000452:	8038      	.short	0x8038
20000454:	4003      	.short	0x4003

20000456 <SF2_MDDR_MODE_CR>:
SF2_MDDR_MODE_CR():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:1282
20000456:	0818      	.short	0x0818
20000458:	00004002 	.word	0x00004002
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:168
    ldr r0, = __stack_start__
2000045c:	2000f000 	.word	0x2000f000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:169
    ldr r1, =_estack
20000460:	20010000 	.word	0x20010000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:177
    ldr r0, =SystemInit
20000464:	20002ba9 	.word	0x20002ba9
	...
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:243
    ldr r0, =__vector_table_load
20000470:	20000000 	.word	0x20000000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:244
    ldr r1, =__vector_table_start
20000474:	20000000 	.word	0x20000000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:245
    ldr r2, =_evector_table
20000478:	20000190 	.word	0x20000190
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:252
    ldr r0, =__text_load
2000047c:	200004b0 	.word	0x200004b0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:253
    ldr r1, =__text_start
20000480:	200004b0 	.word	0x200004b0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:254
    ldr r2, =_etext
20000484:	20003ba0 	.word	0x20003ba0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:262
    ldr r0, =__data_load
20000488:	20003ba0 	.word	0x20003ba0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:263
    ldr r1, =__data_start
2000048c:	20003ba0 	.word	0x20003ba0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:264
    ldr r2, =_edata
20000490:	20003c20 	.word	0x20003c20
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:271
    ldr r0, =__bss_start__
20000494:	20003c20 	.word	0x20003c20
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:272
    ldr r1, =__bss_end__
20000498:	20003f10 	.word	0x20003f10
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:289
    ldr r0, =__heap_start__
2000049c:	20003f10 	.word	0x20003f10
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:290
    ldr r1, =_eheap
200004a0:	2000f000 	.word	0x2000f000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:313
    ldr.w r0, =__libc_init_array
200004a4:	200034c9 	.word	0x200034c9
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/startup_gcc/startup_m2sxxx.S:323
    ldr pc, =main
200004a8:	20002df5 	.word	0x20002df5
200004ac:	00000000 	.word	0x00000000

Disassembly of section .text:

200004b0 <deregister_tm_clones>:
__text_start():
200004b0:	4803      	ldr	r0, [pc, #12]	; (200004c0 <__text_load+0x10>)
200004b2:	4b04      	ldr	r3, [pc, #16]	; (200004c4 <__text_load+0x14>)
200004b4:	4283      	cmp	r3, r0
200004b6:	d002      	beq.n	200004be <deregister_tm_clones+0xe>
200004b8:	4b03      	ldr	r3, [pc, #12]	; (200004c8 <__text_load+0x18>)
200004ba:	b103      	cbz	r3, 200004be <deregister_tm_clones+0xe>
200004bc:	4718      	bx	r3
200004be:	4770      	bx	lr
200004c0:	20003c20 	.word	0x20003c20
200004c4:	20003c20 	.word	0x20003c20
200004c8:	00000000 	.word	0x00000000

200004cc <register_tm_clones>:
register_tm_clones():
200004cc:	4805      	ldr	r0, [pc, #20]	; (200004e4 <register_tm_clones+0x18>)
200004ce:	4906      	ldr	r1, [pc, #24]	; (200004e8 <register_tm_clones+0x1c>)
200004d0:	1a09      	subs	r1, r1, r0
200004d2:	1089      	asrs	r1, r1, #2
200004d4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
200004d8:	1049      	asrs	r1, r1, #1
200004da:	d002      	beq.n	200004e2 <register_tm_clones+0x16>
200004dc:	4b03      	ldr	r3, [pc, #12]	; (200004ec <register_tm_clones+0x20>)
200004de:	b103      	cbz	r3, 200004e2 <register_tm_clones+0x16>
200004e0:	4718      	bx	r3
200004e2:	4770      	bx	lr
200004e4:	20003c20 	.word	0x20003c20
200004e8:	20003c20 	.word	0x20003c20
200004ec:	00000000 	.word	0x00000000

200004f0 <__do_global_dtors_aux>:
__do_global_dtors_aux():
200004f0:	b510      	push	{r4, lr}
200004f2:	4c06      	ldr	r4, [pc, #24]	; (2000050c <__do_global_dtors_aux+0x1c>)
200004f4:	7823      	ldrb	r3, [r4, #0]
200004f6:	b943      	cbnz	r3, 2000050a <__do_global_dtors_aux+0x1a>
200004f8:	f7ff ffda 	bl	200004b0 <deregister_tm_clones>
200004fc:	4b04      	ldr	r3, [pc, #16]	; (20000510 <__do_global_dtors_aux+0x20>)
200004fe:	b113      	cbz	r3, 20000506 <__do_global_dtors_aux+0x16>
20000500:	4804      	ldr	r0, [pc, #16]	; (20000514 <__do_global_dtors_aux+0x24>)
20000502:	f3af 8000 	nop.w
20000506:	2301      	movs	r3, #1
20000508:	7023      	strb	r3, [r4, #0]
2000050a:	bd10      	pop	{r4, pc}
2000050c:	20003c20 	.word	0x20003c20
20000510:	00000000 	.word	0x00000000
20000514:	20003b78 	.word	0x20003b78

20000518 <frame_dummy>:
frame_dummy():
20000518:	b508      	push	{r3, lr}
2000051a:	4b05      	ldr	r3, [pc, #20]	; (20000530 <frame_dummy+0x18>)
2000051c:	b11b      	cbz	r3, 20000526 <frame_dummy+0xe>
2000051e:	4905      	ldr	r1, [pc, #20]	; (20000534 <frame_dummy+0x1c>)
20000520:	4805      	ldr	r0, [pc, #20]	; (20000538 <frame_dummy+0x20>)
20000522:	f3af 8000 	nop.w
20000526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2000052a:	f7ff bfcf 	b.w	200004cc <register_tm_clones>
2000052e:	bf00      	nop
20000530:	00000000 	.word	0x00000000
20000534:	20003c24 	.word	0x20003c24
20000538:	20003b78 	.word	0x20003b78

2000053c <NVIC_ClearPendingIRQ>:
NVIC_ClearPendingIRQ():
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1499
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2000053c:	b480      	push	{r7}
2000053e:	b083      	sub	sp, #12
20000540:	af00      	add	r7, sp, #0
20000542:	4603      	mov	r3, r0
20000544:	71fb      	strb	r3, [r7, #7]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1500
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
20000546:	79fb      	ldrb	r3, [r7, #7]
20000548:	f003 021f 	and.w	r2, r3, #31
2000054c:	4907      	ldr	r1, [pc, #28]	; (2000056c <NVIC_ClearPendingIRQ+0x30>)
2000054e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000552:	095b      	lsrs	r3, r3, #5
20000554:	2001      	movs	r0, #1
20000556:	fa00 f202 	lsl.w	r2, r0, r2
2000055a:	3360      	adds	r3, #96	; 0x60
2000055c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1501
}
20000560:	bf00      	nop
20000562:	370c      	adds	r7, #12
20000564:	46bd      	mov	sp, r7
20000566:	bc80      	pop	{r7}
20000568:	4770      	bx	lr
2000056a:	bf00      	nop
2000056c:	e000e100 	.word	0xe000e100

20000570 <set_bit_reg8>:
set_bit_reg8():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/../../CMSIS/hw_reg_io.h:79
static __INLINE void set_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20000570:	b480      	push	{r7}
20000572:	b083      	sub	sp, #12
20000574:	af00      	add	r7, sp, #0
20000576:	6078      	str	r0, [r7, #4]
20000578:	460b      	mov	r3, r1
2000057a:	70fb      	strb	r3, [r7, #3]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/../../CMSIS/hw_reg_io.h:80
    HW_REG_BIT(reg,bit) = 0x1;
2000057c:	687b      	ldr	r3, [r7, #4]
2000057e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20000582:	687b      	ldr	r3, [r7, #4]
20000584:	015b      	lsls	r3, r3, #5
20000586:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
2000058a:	f023 031f 	bic.w	r3, r3, #31
2000058e:	4313      	orrs	r3, r2
20000590:	78fa      	ldrb	r2, [r7, #3]
20000592:	0092      	lsls	r2, r2, #2
20000594:	4413      	add	r3, r2
20000596:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000059a:	461a      	mov	r2, r3
2000059c:	2301      	movs	r3, #1
2000059e:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/../../CMSIS/hw_reg_io.h:81
}
200005a0:	bf00      	nop
200005a2:	370c      	adds	r7, #12
200005a4:	46bd      	mov	sp, r7
200005a6:	bc80      	pop	{r7}
200005a8:	4770      	bx	lr

200005aa <clear_bit_reg8>:
clear_bit_reg8():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/../../CMSIS/hw_reg_io.h:94
static __INLINE void clear_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
200005aa:	b480      	push	{r7}
200005ac:	b083      	sub	sp, #12
200005ae:	af00      	add	r7, sp, #0
200005b0:	6078      	str	r0, [r7, #4]
200005b2:	460b      	mov	r3, r1
200005b4:	70fb      	strb	r3, [r7, #3]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/../../CMSIS/hw_reg_io.h:95
    HW_REG_BIT(reg,bit) = 0x0;
200005b6:	687b      	ldr	r3, [r7, #4]
200005b8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
200005bc:	687b      	ldr	r3, [r7, #4]
200005be:	015b      	lsls	r3, r3, #5
200005c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
200005c4:	f023 031f 	bic.w	r3, r3, #31
200005c8:	4313      	orrs	r3, r2
200005ca:	78fa      	ldrb	r2, [r7, #3]
200005cc:	0092      	lsls	r2, r2, #2
200005ce:	4413      	add	r3, r2
200005d0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
200005d4:	461a      	mov	r2, r3
200005d6:	2300      	movs	r3, #0
200005d8:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/../../CMSIS/hw_reg_io.h:96
}
200005da:	bf00      	nop
200005dc:	370c      	adds	r7, #12
200005de:	46bd      	mov	sp, r7
200005e0:	bc80      	pop	{r7}
200005e2:	4770      	bx	lr

200005e4 <read_bit_reg8>:
read_bit_reg8():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/../../CMSIS/hw_reg_io.h:109
static __INLINE uint8_t read_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    return (HW_REG_BIT(reg,bit));
}
static __INLINE uint8_t read_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
200005e4:	b480      	push	{r7}
200005e6:	b083      	sub	sp, #12
200005e8:	af00      	add	r7, sp, #0
200005ea:	6078      	str	r0, [r7, #4]
200005ec:	460b      	mov	r3, r1
200005ee:	70fb      	strb	r3, [r7, #3]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/../../CMSIS/hw_reg_io.h:110
    return (HW_REG_BIT(reg,bit));
200005f0:	687b      	ldr	r3, [r7, #4]
200005f2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
200005f6:	687b      	ldr	r3, [r7, #4]
200005f8:	015b      	lsls	r3, r3, #5
200005fa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
200005fe:	f023 031f 	bic.w	r3, r3, #31
20000602:	4313      	orrs	r3, r2
20000604:	78fa      	ldrb	r2, [r7, #3]
20000606:	0092      	lsls	r2, r2, #2
20000608:	4413      	add	r3, r2
2000060a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000060e:	681b      	ldr	r3, [r3, #0]
20000610:	b2db      	uxtb	r3, r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/../../CMSIS/hw_reg_io.h:111
}
20000612:	4618      	mov	r0, r3
20000614:	370c      	adds	r7, #12
20000616:	46bd      	mov	sp, r7
20000618:	bc80      	pop	{r7}
2000061a:	4770      	bx	lr

2000061c <MSS_UART_init>:
MSS_UART_init():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:105
(
    mss_uart_instance_t* this_uart, 
    uint32_t baud_rate,
    uint8_t line_config
)
{
2000061c:	b580      	push	{r7, lr}
2000061e:	b084      	sub	sp, #16
20000620:	af00      	add	r7, sp, #0
20000622:	60f8      	str	r0, [r7, #12]
20000624:	60b9      	str	r1, [r7, #8]
20000626:	4613      	mov	r3, r2
20000628:	71fb      	strb	r3, [r7, #7]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:108
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
2000062a:	68fb      	ldr	r3, [r7, #12]
2000062c:	4a14      	ldr	r2, [pc, #80]	; (20000680 <MSS_UART_init+0x64>)
2000062e:	4293      	cmp	r3, r2
20000630:	d004      	beq.n	2000063c <MSS_UART_init+0x20>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:108 (discriminator 1)
20000632:	68fb      	ldr	r3, [r7, #12]
20000634:	4a13      	ldr	r2, [pc, #76]	; (20000684 <MSS_UART_init+0x68>)
20000636:	4293      	cmp	r3, r2
20000638:	d000      	beq.n	2000063c <MSS_UART_init+0x20>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:108 (discriminator 2)
2000063a:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:111

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);
2000063c:	79fb      	ldrb	r3, [r7, #7]
2000063e:	461a      	mov	r2, r3
20000640:	68b9      	ldr	r1, [r7, #8]
20000642:	68f8      	ldr	r0, [r7, #12]
20000644:	f000 f946 	bl	200008d4 <global_init>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:114

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
20000648:	68fb      	ldr	r3, [r7, #12]
2000064a:	681b      	ldr	r3, [r3, #0]
2000064c:	3330      	adds	r3, #48	; 0x30
2000064e:	2103      	movs	r1, #3
20000650:	4618      	mov	r0, r3
20000652:	f7ff ffaa 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:117

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
20000656:	68fb      	ldr	r3, [r7, #12]
20000658:	681b      	ldr	r3, [r3, #0]
2000065a:	3334      	adds	r3, #52	; 0x34
2000065c:	2102      	movs	r1, #2
2000065e:	4618      	mov	r0, r3
20000660:	f7ff ffa3 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:120

    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
20000664:	68fb      	ldr	r3, [r7, #12]
20000666:	681b      	ldr	r3, [r3, #0]
20000668:	3338      	adds	r3, #56	; 0x38
2000066a:	2100      	movs	r1, #0
2000066c:	4618      	mov	r0, r3
2000066e:	f7ff ff9c 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:123

    /* set default tx handler for automated TX using interrupt in USART mode */
    this_uart->tx_handler = default_tx_handler;
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	4a04      	ldr	r2, [pc, #16]	; (20000688 <MSS_UART_init+0x6c>)
20000676:	625a      	str	r2, [r3, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:124
}
20000678:	bf00      	nop
2000067a:	3710      	adds	r7, #16
2000067c:	46bd      	mov	sp, r7
2000067e:	bd80      	pop	{r7, pc}
20000680:	20003cdc 	.word	0x20003cdc
20000684:	20003c9c 	.word	0x20003c9c
20000688:	20000cb5 	.word	0x20000cb5

2000068c <MSS_UART_polled_tx_string>:
MSS_UART_polled_tx_string():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:290
MSS_UART_polled_tx_string
(
    mss_uart_instance_t * this_uart,
    const uint8_t * p_sz_string
)
{
2000068c:	b480      	push	{r7}
2000068e:	b087      	sub	sp, #28
20000690:	af00      	add	r7, sp, #0
20000692:	6078      	str	r0, [r7, #4]
20000694:	6039      	str	r1, [r7, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:291
    uint32_t char_idx = 0u;
20000696:	2300      	movs	r3, #0
20000698:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:296
    uint32_t fill_size;
    uint8_t data_byte;
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
2000069a:	687b      	ldr	r3, [r7, #4]
2000069c:	4a26      	ldr	r2, [pc, #152]	; (20000738 <MSS_UART_polled_tx_string+0xac>)
2000069e:	4293      	cmp	r3, r2
200006a0:	d004      	beq.n	200006ac <MSS_UART_polled_tx_string+0x20>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:296 (discriminator 1)
200006a2:	687b      	ldr	r3, [r7, #4]
200006a4:	4a25      	ldr	r2, [pc, #148]	; (2000073c <MSS_UART_polled_tx_string+0xb0>)
200006a6:	4293      	cmp	r3, r2
200006a8:	d000      	beq.n	200006ac <MSS_UART_polled_tx_string+0x20>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:296 (discriminator 2)
200006aa:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:297
    ASSERT(p_sz_string != ((uint8_t *)0));
200006ac:	683b      	ldr	r3, [r7, #0]
200006ae:	2b00      	cmp	r3, #0
200006b0:	d100      	bne.n	200006b4 <MSS_UART_polled_tx_string+0x28>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:297 (discriminator 1)
200006b2:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:299

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
200006b4:	687b      	ldr	r3, [r7, #4]
200006b6:	4a20      	ldr	r2, [pc, #128]	; (20000738 <MSS_UART_polled_tx_string+0xac>)
200006b8:	4293      	cmp	r3, r2
200006ba:	d003      	beq.n	200006c4 <MSS_UART_polled_tx_string+0x38>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:299 (discriminator 2)
200006bc:	687b      	ldr	r3, [r7, #4]
200006be:	4a1f      	ldr	r2, [pc, #124]	; (2000073c <MSS_UART_polled_tx_string+0xb0>)
200006c0:	4293      	cmp	r3, r2
200006c2:	d133      	bne.n	2000072c <MSS_UART_polled_tx_string+0xa0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:299 (discriminator 3)
200006c4:	683b      	ldr	r3, [r7, #0]
200006c6:	2b00      	cmp	r3, #0
200006c8:	d030      	beq.n	2000072c <MSS_UART_polled_tx_string+0xa0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:303
       (p_sz_string != ((uint8_t *)0)))
    {
        /* Get the first data byte from the input buffer */
        data_byte = p_sz_string[char_idx];
200006ca:	683a      	ldr	r2, [r7, #0]
200006cc:	697b      	ldr	r3, [r7, #20]
200006ce:	4413      	add	r3, r2
200006d0:	781b      	ldrb	r3, [r3, #0]
200006d2:	73fb      	strb	r3, [r7, #15]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:309

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while(0u != data_byte)
200006d4:	e027      	b.n	20000726 <MSS_UART_polled_tx_string+0x9a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:313 (discriminator 1)
        {
            /* Wait until TX FIFO is empty. */
            do {
                status = this_uart->hw_reg->LSR;
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	681b      	ldr	r3, [r3, #0]
200006da:	7d1b      	ldrb	r3, [r3, #20]
200006dc:	73bb      	strb	r3, [r7, #14]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:314 (discriminator 1)
                this_uart->status |= status;
200006de:	687b      	ldr	r3, [r7, #4]
200006e0:	7b5a      	ldrb	r2, [r3, #13]
200006e2:	7bbb      	ldrb	r3, [r7, #14]
200006e4:	4313      	orrs	r3, r2
200006e6:	b2da      	uxtb	r2, r3
200006e8:	687b      	ldr	r3, [r7, #4]
200006ea:	735a      	strb	r2, [r3, #13]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:315 (discriminator 1)
            } while (0u == (status & MSS_UART_THRE));
200006ec:	7bbb      	ldrb	r3, [r7, #14]
200006ee:	f003 0320 	and.w	r3, r3, #32
200006f2:	2b00      	cmp	r3, #0
200006f4:	d0ef      	beq.n	200006d6 <MSS_UART_polled_tx_string+0x4a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:320

            /* Send bytes from the input buffer until the TX FIFO is full
             * or we reach the NULL terminator byte.
             */
            fill_size = 0u;
200006f6:	2300      	movs	r3, #0
200006f8:	613b      	str	r3, [r7, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:321
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
200006fa:	e00e      	b.n	2000071a <MSS_UART_polled_tx_string+0x8e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:324
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
200006fc:	687b      	ldr	r3, [r7, #4]
200006fe:	681b      	ldr	r3, [r3, #0]
20000700:	7bfa      	ldrb	r2, [r7, #15]
20000702:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:325
                ++fill_size;
20000704:	693b      	ldr	r3, [r7, #16]
20000706:	3301      	adds	r3, #1
20000708:	613b      	str	r3, [r7, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:326
                char_idx++;
2000070a:	697b      	ldr	r3, [r7, #20]
2000070c:	3301      	adds	r3, #1
2000070e:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:328
                /* Get the next data byte from the input buffer */
                data_byte = p_sz_string[char_idx];
20000710:	683a      	ldr	r2, [r7, #0]
20000712:	697b      	ldr	r3, [r7, #20]
20000714:	4413      	add	r3, r2
20000716:	781b      	ldrb	r3, [r3, #0]
20000718:	73fb      	strb	r3, [r7, #15]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:321
            while((0u != data_byte) && (fill_size < TX_FIFO_SIZE))
2000071a:	7bfb      	ldrb	r3, [r7, #15]
2000071c:	2b00      	cmp	r3, #0
2000071e:	d002      	beq.n	20000726 <MSS_UART_polled_tx_string+0x9a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:321 (discriminator 1)
20000720:	693b      	ldr	r3, [r7, #16]
20000722:	2b0f      	cmp	r3, #15
20000724:	d9ea      	bls.n	200006fc <MSS_UART_polled_tx_string+0x70>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:309
        while(0u != data_byte)
20000726:	7bfb      	ldrb	r3, [r7, #15]
20000728:	2b00      	cmp	r3, #0
2000072a:	d1d4      	bne.n	200006d6 <MSS_UART_polled_tx_string+0x4a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:332
            }
        }
    }
}
2000072c:	bf00      	nop
2000072e:	371c      	adds	r7, #28
20000730:	46bd      	mov	sp, r7
20000732:	bc80      	pop	{r7}
20000734:	4770      	bx	lr
20000736:	bf00      	nop
20000738:	20003cdc 	.word	0x20003cdc
2000073c:	20003c9c 	.word	0x20003c9c

20000740 <UART0_IRQHandler>:
UART0_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:619
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler(void)
#else
void UART0_IRQHandler(void)
#endif
{
20000740:	4668      	mov	r0, sp
20000742:	f020 0107 	bic.w	r1, r0, #7
20000746:	468d      	mov	sp, r1
20000748:	b589      	push	{r0, r3, r7, lr}
2000074a:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:620
    MSS_UART_isr(&g_mss_uart0);
2000074c:	4804      	ldr	r0, [pc, #16]	; (20000760 <UART0_IRQHandler+0x20>)
2000074e:	f000 f9ad 	bl	20000aac <MSS_UART_isr>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:621
}
20000752:	bf00      	nop
20000754:	46bd      	mov	sp, r7
20000756:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000075a:	4685      	mov	sp, r0
2000075c:	4770      	bx	lr
2000075e:	bf00      	nop
20000760:	20003cdc 	.word	0x20003cdc

20000764 <UART1_IRQHandler>:
UART1_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:633
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler(void)
#else
void UART1_IRQHandler(void)
#endif
{
20000764:	4668      	mov	r0, sp
20000766:	f020 0107 	bic.w	r1, r0, #7
2000076a:	468d      	mov	sp, r1
2000076c:	b589      	push	{r0, r3, r7, lr}
2000076e:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:634
    MSS_UART_isr(&g_mss_uart1);
20000770:	4804      	ldr	r0, [pc, #16]	; (20000784 <UART1_IRQHandler+0x20>)
20000772:	f000 f99b 	bl	20000aac <MSS_UART_isr>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:635
}
20000776:	bf00      	nop
20000778:	46bd      	mov	sp, r7
2000077a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000077e:	4685      	mov	sp, r0
20000780:	4770      	bx	lr
20000782:	bf00      	nop
20000784:	20003c9c 	.word	0x20003c9c

20000788 <config_baud_divisors>:
config_baud_divisors():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1346
config_baud_divisors
(
    mss_uart_instance_t * this_uart,
    uint32_t baudrate    
)
{
20000788:	b580      	push	{r7, lr}
2000078a:	b088      	sub	sp, #32
2000078c:	af00      	add	r7, sp, #0
2000078e:	6078      	str	r0, [r7, #4]
20000790:	6039      	str	r1, [r7, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1347
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20000792:	687b      	ldr	r3, [r7, #4]
20000794:	4a4b      	ldr	r2, [pc, #300]	; (200008c4 <config_baud_divisors+0x13c>)
20000796:	4293      	cmp	r3, r2
20000798:	d004      	beq.n	200007a4 <config_baud_divisors+0x1c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1347 (discriminator 1)
2000079a:	687b      	ldr	r3, [r7, #4]
2000079c:	4a4a      	ldr	r2, [pc, #296]	; (200008c8 <config_baud_divisors+0x140>)
2000079e:	4293      	cmp	r3, r2
200007a0:	d000      	beq.n	200007a4 <config_baud_divisors+0x1c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1347 (discriminator 2)
200007a2:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1349
    
    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
200007a4:	687b      	ldr	r3, [r7, #4]
200007a6:	4a47      	ldr	r2, [pc, #284]	; (200008c4 <config_baud_divisors+0x13c>)
200007a8:	4293      	cmp	r3, r2
200007aa:	d004      	beq.n	200007b6 <config_baud_divisors+0x2e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1349 (discriminator 1)
200007ac:	687b      	ldr	r3, [r7, #4]
200007ae:	4a46      	ldr	r2, [pc, #280]	; (200008c8 <config_baud_divisors+0x140>)
200007b0:	4293      	cmp	r3, r2
200007b2:	f040 8082 	bne.w	200008ba <config_baud_divisors+0x132>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1357
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
200007b6:	687b      	ldr	r3, [r7, #4]
200007b8:	683a      	ldr	r2, [r7, #0]
200007ba:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1361

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
200007bc:	f002 fa04 	bl	20002bc8 <SystemCoreClockUpdate>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1362
        if(this_uart == &g_mss_uart0)
200007c0:	687b      	ldr	r3, [r7, #4]
200007c2:	4a40      	ldr	r2, [pc, #256]	; (200008c4 <config_baud_divisors+0x13c>)
200007c4:	4293      	cmp	r3, r2
200007c6:	d103      	bne.n	200007d0 <config_baud_divisors+0x48>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1364
        {
            pclk_freq = g_FrequencyPCLK0;
200007c8:	4b40      	ldr	r3, [pc, #256]	; (200008cc <config_baud_divisors+0x144>)
200007ca:	681b      	ldr	r3, [r3, #0]
200007cc:	61fb      	str	r3, [r7, #28]
200007ce:	e002      	b.n	200007d6 <config_baud_divisors+0x4e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1368
        }
        else
        {
            pclk_freq = g_FrequencyPCLK1;
200007d0:	4b3f      	ldr	r3, [pc, #252]	; (200008d0 <config_baud_divisors+0x148>)
200007d2:	681b      	ldr	r3, [r3, #0]
200007d4:	61fb      	str	r3, [r7, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1376
        /*
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
200007d6:	69fb      	ldr	r3, [r7, #28]
200007d8:	00da      	lsls	r2, r3, #3
200007da:	683b      	ldr	r3, [r7, #0]
200007dc:	fbb2 f3f3 	udiv	r3, r2, r3
200007e0:	61bb      	str	r3, [r7, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1377
        baud_value_by_64 = baud_value_by_128 / 2u;
200007e2:	69bb      	ldr	r3, [r7, #24]
200007e4:	085b      	lsrs	r3, r3, #1
200007e6:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1378
        baud_value = baud_value_by_64 / 64u;
200007e8:	697b      	ldr	r3, [r7, #20]
200007ea:	099b      	lsrs	r3, r3, #6
200007ec:	613b      	str	r3, [r7, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1379
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
200007ee:	693b      	ldr	r3, [r7, #16]
200007f0:	019b      	lsls	r3, r3, #6
200007f2:	697a      	ldr	r2, [r7, #20]
200007f4:	1ad3      	subs	r3, r2, r3
200007f6:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1380
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
200007f8:	693b      	ldr	r3, [r7, #16]
200007fa:	01db      	lsls	r3, r3, #7
200007fc:	69ba      	ldr	r2, [r7, #24]
200007fe:	1ad2      	subs	r2, r2, r3
20000800:	68fb      	ldr	r3, [r7, #12]
20000802:	005b      	lsls	r3, r3, #1
20000804:	1ad3      	subs	r3, r2, r3
20000806:	68fa      	ldr	r2, [r7, #12]
20000808:	4413      	add	r3, r2
2000080a:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1383
        
        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
2000080c:	693b      	ldr	r3, [r7, #16]
2000080e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20000812:	d300      	bcc.n	20000816 <config_baud_divisors+0x8e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1383 (discriminator 1)
20000814:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1385
    
        if(baud_value <= (uint32_t)UINT16_MAX)
20000816:	693b      	ldr	r3, [r7, #16]
20000818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000081c:	d24d      	bcs.n	200008ba <config_baud_divisors+0x132>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1387
        {
            if(baud_value > 1u)
2000081e:	693b      	ldr	r3, [r7, #16]
20000820:	2b01      	cmp	r3, #1
20000822:	d92a      	bls.n	2000087a <config_baud_divisors+0xf2>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1393
            {
                /* 
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20000824:	687b      	ldr	r3, [r7, #4]
20000826:	681b      	ldr	r3, [r3, #0]
20000828:	330c      	adds	r3, #12
2000082a:	2107      	movs	r1, #7
2000082c:	4618      	mov	r0, r3
2000082e:	f7ff fe9f 	bl	20000570 <set_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1396
            
                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20000832:	693b      	ldr	r3, [r7, #16]
20000834:	0a1a      	lsrs	r2, r3, #8
20000836:	687b      	ldr	r3, [r7, #4]
20000838:	681b      	ldr	r3, [r3, #0]
2000083a:	b2d2      	uxtb	r2, r2
2000083c:	711a      	strb	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1398
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
2000083e:	687b      	ldr	r3, [r7, #4]
20000840:	681b      	ldr	r3, [r3, #0]
20000842:	693a      	ldr	r2, [r7, #16]
20000844:	b2d2      	uxtb	r2, r2
20000846:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1401
            
                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20000848:	687b      	ldr	r3, [r7, #4]
2000084a:	681b      	ldr	r3, [r3, #0]
2000084c:	330c      	adds	r3, #12
2000084e:	2107      	movs	r1, #7
20000850:	4618      	mov	r0, r3
20000852:	f7ff feaa 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1404
        
                /* Enable Fractional baud rate */
                set_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20000856:	687b      	ldr	r3, [r7, #4]
20000858:	681b      	ldr	r3, [r3, #0]
2000085a:	3330      	adds	r3, #48	; 0x30
2000085c:	2107      	movs	r1, #7
2000085e:	4618      	mov	r0, r3
20000860:	f7ff fe86 	bl	20000570 <set_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1407
        
                /* Load the fractional baud rate register */
                ASSERT(fractional_baud_value <= (uint32_t)UINT8_MAX);
20000864:	68fb      	ldr	r3, [r7, #12]
20000866:	2bff      	cmp	r3, #255	; 0xff
20000868:	d900      	bls.n	2000086c <config_baud_divisors+0xe4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1407 (discriminator 1)
2000086a:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1408
                this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
2000086c:	687b      	ldr	r3, [r7, #4]
2000086e:	681b      	ldr	r3, [r3, #0]
20000870:	68fa      	ldr	r2, [r7, #12]
20000872:	b2d2      	uxtb	r2, r2
20000874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1431
                /* Disable Fractional baud rate */
                clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
            }
        }
    }
}
20000878:	e01f      	b.n	200008ba <config_baud_divisors+0x132>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1416
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
2000087a:	687b      	ldr	r3, [r7, #4]
2000087c:	681b      	ldr	r3, [r3, #0]
2000087e:	330c      	adds	r3, #12
20000880:	2107      	movs	r1, #7
20000882:	4618      	mov	r0, r3
20000884:	f7ff fe74 	bl	20000570 <set_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1419
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
20000888:	693b      	ldr	r3, [r7, #16]
2000088a:	0a1a      	lsrs	r2, r3, #8
2000088c:	687b      	ldr	r3, [r7, #4]
2000088e:	681b      	ldr	r3, [r3, #0]
20000890:	b2d2      	uxtb	r2, r2
20000892:	711a      	strb	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1421
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20000894:	687b      	ldr	r3, [r7, #4]
20000896:	681b      	ldr	r3, [r3, #0]
20000898:	693a      	ldr	r2, [r7, #16]
2000089a:	b2d2      	uxtb	r2, r2
2000089c:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1424
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	681b      	ldr	r3, [r3, #0]
200008a2:	330c      	adds	r3, #12
200008a4:	2107      	movs	r1, #7
200008a6:	4618      	mov	r0, r3
200008a8:	f7ff fe7f 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1427
                clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
200008ac:	687b      	ldr	r3, [r7, #4]
200008ae:	681b      	ldr	r3, [r3, #0]
200008b0:	3330      	adds	r3, #48	; 0x30
200008b2:	2107      	movs	r1, #7
200008b4:	4618      	mov	r0, r3
200008b6:	f7ff fe78 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1431
}
200008ba:	bf00      	nop
200008bc:	3720      	adds	r7, #32
200008be:	46bd      	mov	sp, r7
200008c0:	bd80      	pop	{r7, pc}
200008c2:	bf00      	nop
200008c4:	20003cdc 	.word	0x20003cdc
200008c8:	20003c9c 	.word	0x20003c9c
200008cc:	20003ba4 	.word	0x20003ba4
200008d0:	20003ba8 	.word	0x20003ba8

200008d4 <global_init>:
global_init():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1468
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
200008d4:	b580      	push	{r7, lr}
200008d6:	b084      	sub	sp, #16
200008d8:	af00      	add	r7, sp, #0
200008da:	60f8      	str	r0, [r7, #12]
200008dc:	60b9      	str	r1, [r7, #8]
200008de:	4613      	mov	r3, r2
200008e0:	71fb      	strb	r3, [r7, #7]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1471
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
200008e2:	68fb      	ldr	r3, [r7, #12]
200008e4:	4a6d      	ldr	r2, [pc, #436]	; (20000a9c <global_init+0x1c8>)
200008e6:	4293      	cmp	r3, r2
200008e8:	d004      	beq.n	200008f4 <global_init+0x20>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1471 (discriminator 1)
200008ea:	68fb      	ldr	r3, [r7, #12]
200008ec:	4a6c      	ldr	r2, [pc, #432]	; (20000aa0 <global_init+0x1cc>)
200008ee:	4293      	cmp	r3, r2
200008f0:	d000      	beq.n	200008f4 <global_init+0x20>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1471 (discriminator 2)
200008f2:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1473

    if(this_uart == &g_mss_uart0)
200008f4:	68fb      	ldr	r3, [r7, #12]
200008f6:	4a69      	ldr	r2, [pc, #420]	; (20000a9c <global_init+0x1c8>)
200008f8:	4293      	cmp	r3, r2
200008fa:	d116      	bne.n	2000092a <global_init+0x56>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1475
    {
        this_uart->hw_reg = UART0;
200008fc:	68fb      	ldr	r3, [r7, #12]
200008fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20000902:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1476
        this_uart->irqn = UART0_IRQn;
20000904:	68fb      	ldr	r3, [r7, #12]
20000906:	220a      	movs	r2, #10
20000908:	711a      	strb	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1478
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
2000090a:	4b66      	ldr	r3, [pc, #408]	; (20000aa4 <global_init+0x1d0>)
2000090c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000090e:	4a65      	ldr	r2, [pc, #404]	; (20000aa4 <global_init+0x1d0>)
20000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20000914:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1480
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
20000916:	200a      	movs	r0, #10
20000918:	f7ff fe10 	bl	2000053c <NVIC_ClearPendingIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1482
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
2000091c:	4b61      	ldr	r3, [pc, #388]	; (20000aa4 <global_init+0x1d0>)
2000091e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20000920:	4a60      	ldr	r2, [pc, #384]	; (20000aa4 <global_init+0x1d0>)
20000922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
20000926:	6493      	str	r3, [r2, #72]	; 0x48
20000928:	e014      	b.n	20000954 <global_init+0x80>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1486
    }
    else
    {
        this_uart->hw_reg = UART1;
2000092a:	68fb      	ldr	r3, [r7, #12]
2000092c:	4a5e      	ldr	r2, [pc, #376]	; (20000aa8 <global_init+0x1d4>)
2000092e:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1487
        this_uart->irqn = UART1_IRQn;
20000930:	68fb      	ldr	r3, [r7, #12]
20000932:	220b      	movs	r2, #11
20000934:	711a      	strb	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1489
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
20000936:	4b5b      	ldr	r3, [pc, #364]	; (20000aa4 <global_init+0x1d0>)
20000938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000093a:	4a5a      	ldr	r2, [pc, #360]	; (20000aa4 <global_init+0x1d0>)
2000093c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20000940:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1491
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
20000942:	200b      	movs	r0, #11
20000944:	f7ff fdfa 	bl	2000053c <NVIC_ClearPendingIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1493
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
20000948:	4b56      	ldr	r3, [pc, #344]	; (20000aa4 <global_init+0x1d0>)
2000094a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000094c:	4a55      	ldr	r2, [pc, #340]	; (20000aa4 <global_init+0x1d0>)
2000094e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
20000952:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1497
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
20000954:	68fb      	ldr	r3, [r7, #12]
20000956:	681b      	ldr	r3, [r3, #0]
20000958:	2200      	movs	r2, #0
2000095a:	711a      	strb	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1500

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
2000095c:	68fb      	ldr	r3, [r7, #12]
2000095e:	681b      	ldr	r3, [r3, #0]
20000960:	2200      	movs	r2, #0
20000962:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1502
    /* clear receiver FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_RX_FIFO);
20000964:	68fb      	ldr	r3, [r7, #12]
20000966:	681b      	ldr	r3, [r3, #0]
20000968:	3308      	adds	r3, #8
2000096a:	2101      	movs	r1, #1
2000096c:	4618      	mov	r0, r3
2000096e:	f7ff fdff 	bl	20000570 <set_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1504
    /* clear transmitter FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_TX_FIFO);
20000972:	68fb      	ldr	r3, [r7, #12]
20000974:	681b      	ldr	r3, [r3, #0]
20000976:	3308      	adds	r3, #8
20000978:	2102      	movs	r1, #2
2000097a:	4618      	mov	r0, r3
2000097c:	f7ff fdf8 	bl	20000570 <set_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1509

    /* set default READY mode : Mode 0*/
    /* enable RXRDYN and TXRDYN pins. The earlier FCR write to set the TX FIFO
     * trigger level inadvertently disabled the FCR_RXRDY_TXRDYN_EN bit. */
    set_bit_reg8(&this_uart->hw_reg->FCR,RXRDY_TXRDYN_EN);
20000980:	68fb      	ldr	r3, [r7, #12]
20000982:	681b      	ldr	r3, [r3, #0]
20000984:	3308      	adds	r3, #8
20000986:	2100      	movs	r1, #0
20000988:	4618      	mov	r0, r3
2000098a:	f7ff fdf1 	bl	20000570 <set_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1512

    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
2000098e:	68fb      	ldr	r3, [r7, #12]
20000990:	681b      	ldr	r3, [r3, #0]
20000992:	3310      	adds	r3, #16
20000994:	2104      	movs	r1, #4
20000996:	4618      	mov	r0, r3
20000998:	f7ff fe07 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1513
    clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);
2000099c:	68fb      	ldr	r3, [r7, #12]
2000099e:	681b      	ldr	r3, [r3, #0]
200009a0:	3310      	adds	r3, #16
200009a2:	2105      	movs	r1, #5
200009a4:	4618      	mov	r0, r3
200009a6:	f7ff fe00 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1516

    /* set default TX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
200009aa:	68fb      	ldr	r3, [r7, #12]
200009ac:	681b      	ldr	r3, [r3, #0]
200009ae:	3334      	adds	r3, #52	; 0x34
200009b0:	2101      	movs	r1, #1
200009b2:	4618      	mov	r0, r3
200009b4:	f7ff fdf9 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1518
    /* set default RX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX);
200009b8:	68fb      	ldr	r3, [r7, #12]
200009ba:	681b      	ldr	r3, [r3, #0]
200009bc:	3334      	adds	r3, #52	; 0x34
200009be:	2100      	movs	r1, #0
200009c0:	4618      	mov	r0, r3
200009c2:	f7ff fdf2 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1521

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
200009c6:	68fb      	ldr	r3, [r7, #12]
200009c8:	681b      	ldr	r3, [r3, #0]
200009ca:	3338      	adds	r3, #56	; 0x38
200009cc:	2101      	movs	r1, #1
200009ce:	4618      	mov	r0, r3
200009d0:	f7ff fdeb 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1524

    /* disable TX time gaurd */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG); 
200009d4:	68fb      	ldr	r3, [r7, #12]
200009d6:	681b      	ldr	r3, [r3, #0]
200009d8:	3330      	adds	r3, #48	; 0x30
200009da:	2105      	movs	r1, #5
200009dc:	4618      	mov	r0, r3
200009de:	f7ff fde4 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1527

    /* set default RX timeout */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ERTO); 
200009e2:	68fb      	ldr	r3, [r7, #12]
200009e4:	681b      	ldr	r3, [r3, #0]
200009e6:	3330      	adds	r3, #48	; 0x30
200009e8:	2106      	movs	r1, #6
200009ea:	4618      	mov	r0, r3
200009ec:	f7ff fddd 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1530

    /* disable fractional baud-rate */
    clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR); 
200009f0:	68fb      	ldr	r3, [r7, #12]
200009f2:	681b      	ldr	r3, [r3, #0]
200009f4:	3330      	adds	r3, #48	; 0x30
200009f6:	2107      	movs	r1, #7
200009f8:	4618      	mov	r0, r3
200009fa:	f7ff fdd6 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1533

    /* disable single wire mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
200009fe:	68fb      	ldr	r3, [r7, #12]
20000a00:	681b      	ldr	r3, [r3, #0]
20000a02:	3338      	adds	r3, #56	; 0x38
20000a04:	2103      	movs	r1, #3
20000a06:	4618      	mov	r0, r3
20000a08:	f7ff fdcf 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1536

    /* set filter to minimum value */
    this_uart->hw_reg->GFR = 0u;
20000a0c:	68fb      	ldr	r3, [r7, #12]
20000a0e:	681b      	ldr	r3, [r3, #0]
20000a10:	2200      	movs	r2, #0
20000a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1538
    /* set default TX time gaurd */
    this_uart->hw_reg->TTG = 0u;
20000a16:	68fb      	ldr	r3, [r7, #12]
20000a18:	681b      	ldr	r3, [r3, #0]
20000a1a:	2200      	movs	r2, #0
20000a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1540
    /* set default RX timeout */
    this_uart->hw_reg->RTO = 0u;
20000a20:	68fb      	ldr	r3, [r7, #12]
20000a22:	681b      	ldr	r3, [r3, #0]
20000a24:	2200      	movs	r2, #0
20000a26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1546
    
    /* 
     * Configure baud rate divisors. This uses the frational baud rate divisor
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);
20000a2a:	68b9      	ldr	r1, [r7, #8]
20000a2c:	68f8      	ldr	r0, [r7, #12]
20000a2e:	f7ff feab 	bl	20000788 <config_baud_divisors>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1549

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20000a32:	68fb      	ldr	r3, [r7, #12]
20000a34:	681b      	ldr	r3, [r3, #0]
20000a36:	79fa      	ldrb	r2, [r7, #7]
20000a38:	731a      	strb	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1552

    /* Instance setup */
    this_uart->baudrate = baud_rate;
20000a3a:	68fb      	ldr	r3, [r7, #12]
20000a3c:	68ba      	ldr	r2, [r7, #8]
20000a3e:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1553
    this_uart->lineconfig = line_config;
20000a40:	68fb      	ldr	r3, [r7, #12]
20000a42:	79fa      	ldrb	r2, [r7, #7]
20000a44:	731a      	strb	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1554
    this_uart->tx_buff_size = TX_COMPLETE;
20000a46:	68fb      	ldr	r3, [r7, #12]
20000a48:	2200      	movs	r2, #0
20000a4a:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1555
    this_uart->tx_buffer = (const uint8_t *)0;
20000a4c:	68fb      	ldr	r3, [r7, #12]
20000a4e:	2200      	movs	r2, #0
20000a50:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1556
    this_uart->tx_idx = 0u;
20000a52:	68fb      	ldr	r3, [r7, #12]
20000a54:	2200      	movs	r2, #0
20000a56:	619a      	str	r2, [r3, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1559

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
20000a58:	68fb      	ldr	r3, [r7, #12]
20000a5a:	2200      	movs	r2, #0
20000a5c:	621a      	str	r2, [r3, #32]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1560
    this_uart->tx_handler       = NULL_HANDLER;
20000a5e:	68fb      	ldr	r3, [r7, #12]
20000a60:	2200      	movs	r2, #0
20000a62:	625a      	str	r2, [r3, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1561
    this_uart->linests_handler  = NULL_HANDLER;
20000a64:	68fb      	ldr	r3, [r7, #12]
20000a66:	2200      	movs	r2, #0
20000a68:	61da      	str	r2, [r3, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1562
    this_uart->modemsts_handler = NULL_HANDLER;
20000a6a:	68fb      	ldr	r3, [r7, #12]
20000a6c:	2200      	movs	r2, #0
20000a6e:	629a      	str	r2, [r3, #40]	; 0x28
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1563
    this_uart->rto_handler      = NULL_HANDLER;    
20000a70:	68fb      	ldr	r3, [r7, #12]
20000a72:	2200      	movs	r2, #0
20000a74:	62da      	str	r2, [r3, #44]	; 0x2c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1564
    this_uart->nack_handler     = NULL_HANDLER;   
20000a76:	68fb      	ldr	r3, [r7, #12]
20000a78:	2200      	movs	r2, #0
20000a7a:	631a      	str	r2, [r3, #48]	; 0x30
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1565
    this_uart->pid_pei_handler  = NULL_HANDLER;
20000a7c:	68fb      	ldr	r3, [r7, #12]
20000a7e:	2200      	movs	r2, #0
20000a80:	635a      	str	r2, [r3, #52]	; 0x34
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1566
    this_uart->break_handler    = NULL_HANDLER;    
20000a82:	68fb      	ldr	r3, [r7, #12]
20000a84:	2200      	movs	r2, #0
20000a86:	639a      	str	r2, [r3, #56]	; 0x38
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1567
    this_uart->sync_handler     = NULL_HANDLER;   
20000a88:	68fb      	ldr	r3, [r7, #12]
20000a8a:	2200      	movs	r2, #0
20000a8c:	63da      	str	r2, [r3, #60]	; 0x3c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1570

    /* Initialize the sticky status */
    this_uart->status = 0u;
20000a8e:	68fb      	ldr	r3, [r7, #12]
20000a90:	2200      	movs	r2, #0
20000a92:	735a      	strb	r2, [r3, #13]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1571
}
20000a94:	bf00      	nop
20000a96:	3710      	adds	r7, #16
20000a98:	46bd      	mov	sp, r7
20000a9a:	bd80      	pop	{r7, pc}
20000a9c:	20003cdc 	.word	0x20003cdc
20000aa0:	20003c9c 	.word	0x20003c9c
20000aa4:	40038000 	.word	0x40038000
20000aa8:	40010000 	.word	0x40010000

20000aac <MSS_UART_isr>:
MSS_UART_isr():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1586
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20000aac:	b580      	push	{r7, lr}
20000aae:	b084      	sub	sp, #16
20000ab0:	af00      	add	r7, sp, #0
20000ab2:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1589
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20000ab4:	687b      	ldr	r3, [r7, #4]
20000ab6:	4a7d      	ldr	r2, [pc, #500]	; (20000cac <MSS_UART_isr+0x200>)
20000ab8:	4293      	cmp	r3, r2
20000aba:	d004      	beq.n	20000ac6 <MSS_UART_isr+0x1a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1589 (discriminator 1)
20000abc:	687b      	ldr	r3, [r7, #4]
20000abe:	4a7c      	ldr	r2, [pc, #496]	; (20000cb0 <MSS_UART_isr+0x204>)
20000ac0:	4293      	cmp	r3, r2
20000ac2:	d000      	beq.n	20000ac6 <MSS_UART_isr+0x1a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1589 (discriminator 2)
20000ac4:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1591

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20000ac6:	687b      	ldr	r3, [r7, #4]
20000ac8:	4a78      	ldr	r2, [pc, #480]	; (20000cac <MSS_UART_isr+0x200>)
20000aca:	4293      	cmp	r3, r2
20000acc:	d004      	beq.n	20000ad8 <MSS_UART_isr+0x2c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1591 (discriminator 1)
20000ace:	687b      	ldr	r3, [r7, #4]
20000ad0:	4a77      	ldr	r2, [pc, #476]	; (20000cb0 <MSS_UART_isr+0x204>)
20000ad2:	4293      	cmp	r3, r2
20000ad4:	f040 80da 	bne.w	20000c8c <MSS_UART_isr+0x1e0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1593
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20000ad8:	687b      	ldr	r3, [r7, #4]
20000ada:	681b      	ldr	r3, [r3, #0]
20000adc:	7a1b      	ldrb	r3, [r3, #8]
20000ade:	b2db      	uxtb	r3, r3
20000ae0:	f003 030f 	and.w	r3, r3, #15
20000ae4:	73fb      	strb	r3, [r7, #15]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1595

        switch (iirf)
20000ae6:	7bfb      	ldrb	r3, [r7, #15]
20000ae8:	2b0c      	cmp	r3, #12
20000aea:	f200 80cd 	bhi.w	20000c88 <MSS_UART_isr+0x1dc>
20000aee:	a201      	add	r2, pc, #4	; (adr r2, 20000af4 <MSS_UART_isr+0x48>)
20000af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000af4:	20000b29 	.word	0x20000b29
20000af8:	20000c89 	.word	0x20000c89
20000afc:	20000b47 	.word	0x20000b47
20000b00:	20000ba1 	.word	0x20000ba1
20000b04:	20000b65 	.word	0x20000b65
20000b08:	20000c89 	.word	0x20000c89
20000b0c:	20000b83 	.word	0x20000b83
20000b10:	20000c89 	.word	0x20000c89
20000b14:	20000c89 	.word	0x20000c89
20000b18:	20000c89 	.word	0x20000c89
20000b1c:	20000c89 	.word	0x20000c89
20000b20:	20000c89 	.word	0x20000c89
20000b24:	20000b65 	.word	0x20000b65
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1599
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->modemsts_handler);
20000b28:	687b      	ldr	r3, [r7, #4]
20000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000b2c:	2b00      	cmp	r3, #0
20000b2e:	d100      	bne.n	20000b32 <MSS_UART_isr+0x86>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1599 (discriminator 1)
20000b30:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1600
                if(NULL_HANDLER != this_uart->modemsts_handler)
20000b32:	687b      	ldr	r3, [r7, #4]
20000b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000b36:	2b00      	cmp	r3, #0
20000b38:	f000 80aa 	beq.w	20000c90 <MSS_UART_isr+0x1e4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1602
                {
                   (*(this_uart->modemsts_handler))(this_uart);
20000b3c:	687b      	ldr	r3, [r7, #4]
20000b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000b40:	6878      	ldr	r0, [r7, #4]
20000b42:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1605
                }
            }
            break;
20000b44:	e0a4      	b.n	20000c90 <MSS_UART_isr+0x1e4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1609

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT(NULL_HANDLER != this_uart->tx_handler);
20000b46:	687b      	ldr	r3, [r7, #4]
20000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000b4a:	2b00      	cmp	r3, #0
20000b4c:	d100      	bne.n	20000b50 <MSS_UART_isr+0xa4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1609 (discriminator 1)
20000b4e:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1610
                if(NULL_HANDLER != this_uart->tx_handler)
20000b50:	687b      	ldr	r3, [r7, #4]
20000b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000b54:	2b00      	cmp	r3, #0
20000b56:	f000 809d 	beq.w	20000c94 <MSS_UART_isr+0x1e8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1612
                {
                    (*(this_uart->tx_handler))(this_uart);
20000b5a:	687b      	ldr	r3, [r7, #4]
20000b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000b5e:	6878      	ldr	r0, [r7, #4]
20000b60:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1615
                }
            }
            break;
20000b62:	e097      	b.n	20000c94 <MSS_UART_isr+0x1e8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1620

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT(NULL_HANDLER != this_uart->rx_handler);
20000b64:	687b      	ldr	r3, [r7, #4]
20000b66:	6a1b      	ldr	r3, [r3, #32]
20000b68:	2b00      	cmp	r3, #0
20000b6a:	d100      	bne.n	20000b6e <MSS_UART_isr+0xc2>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1620 (discriminator 1)
20000b6c:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1621
                if(NULL_HANDLER != this_uart->rx_handler)
20000b6e:	687b      	ldr	r3, [r7, #4]
20000b70:	6a1b      	ldr	r3, [r3, #32]
20000b72:	2b00      	cmp	r3, #0
20000b74:	f000 8090 	beq.w	20000c98 <MSS_UART_isr+0x1ec>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1623
                {
                    (*(this_uart->rx_handler))(this_uart);
20000b78:	687b      	ldr	r3, [r7, #4]
20000b7a:	6a1b      	ldr	r3, [r3, #32]
20000b7c:	6878      	ldr	r0, [r7, #4]
20000b7e:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1626
                }
            }
            break;
20000b80:	e08a      	b.n	20000c98 <MSS_UART_isr+0x1ec>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1630

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->linests_handler);
20000b82:	687b      	ldr	r3, [r7, #4]
20000b84:	69db      	ldr	r3, [r3, #28]
20000b86:	2b00      	cmp	r3, #0
20000b88:	d100      	bne.n	20000b8c <MSS_UART_isr+0xe0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1630 (discriminator 1)
20000b8a:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1631
                if(NULL_HANDLER != this_uart->linests_handler)
20000b8c:	687b      	ldr	r3, [r7, #4]
20000b8e:	69db      	ldr	r3, [r3, #28]
20000b90:	2b00      	cmp	r3, #0
20000b92:	f000 8083 	beq.w	20000c9c <MSS_UART_isr+0x1f0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1633
                {
                   (*(this_uart->linests_handler))(this_uart);
20000b96:	687b      	ldr	r3, [r7, #4]
20000b98:	69db      	ldr	r3, [r3, #28]
20000b9a:	6878      	ldr	r0, [r7, #4]
20000b9c:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1636
                }
            }
            break;
20000b9e:	e07d      	b.n	20000c9c <MSS_UART_isr+0x1f0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1643
            case IIRF_MMI:
            {
                /* Identify multimode interrupts and handle */

                /* Receiver time-out interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ERTOI))
20000ba0:	687b      	ldr	r3, [r7, #4]
20000ba2:	681b      	ldr	r3, [r3, #0]
20000ba4:	3328      	adds	r3, #40	; 0x28
20000ba6:	2100      	movs	r1, #0
20000ba8:	4618      	mov	r0, r3
20000baa:	f7ff fd1b 	bl	200005e4 <read_bit_reg8>
20000bae:	4603      	mov	r3, r0
20000bb0:	2b00      	cmp	r3, #0
20000bb2:	d00c      	beq.n	20000bce <MSS_UART_isr+0x122>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1645
                {
                    ASSERT(NULL_HANDLER != this_uart->rto_handler);
20000bb4:	687b      	ldr	r3, [r7, #4]
20000bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20000bb8:	2b00      	cmp	r3, #0
20000bba:	d100      	bne.n	20000bbe <MSS_UART_isr+0x112>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1645 (discriminator 1)
20000bbc:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1646
                    if(NULL_HANDLER != this_uart->rto_handler)
20000bbe:	687b      	ldr	r3, [r7, #4]
20000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20000bc2:	2b00      	cmp	r3, #0
20000bc4:	d003      	beq.n	20000bce <MSS_UART_isr+0x122>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1648
                    {
                        (*(this_uart->rto_handler))(this_uart);
20000bc6:	687b      	ldr	r3, [r7, #4]
20000bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20000bca:	6878      	ldr	r0, [r7, #4]
20000bcc:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1652
                    }
                }
                /* NACK interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ENACKI))
20000bce:	687b      	ldr	r3, [r7, #4]
20000bd0:	681b      	ldr	r3, [r3, #0]
20000bd2:	3328      	adds	r3, #40	; 0x28
20000bd4:	2101      	movs	r1, #1
20000bd6:	4618      	mov	r0, r3
20000bd8:	f7ff fd04 	bl	200005e4 <read_bit_reg8>
20000bdc:	4603      	mov	r3, r0
20000bde:	2b00      	cmp	r3, #0
20000be0:	d00c      	beq.n	20000bfc <MSS_UART_isr+0x150>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1654
                {
                    ASSERT(NULL_HANDLER != this_uart->nack_handler);
20000be2:	687b      	ldr	r3, [r7, #4]
20000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000be6:	2b00      	cmp	r3, #0
20000be8:	d100      	bne.n	20000bec <MSS_UART_isr+0x140>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1654 (discriminator 1)
20000bea:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1655
                    if(NULL_HANDLER != this_uart->nack_handler)
20000bec:	687b      	ldr	r3, [r7, #4]
20000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000bf0:	2b00      	cmp	r3, #0
20000bf2:	d003      	beq.n	20000bfc <MSS_UART_isr+0x150>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1657
                    {
                        (*(this_uart->nack_handler))(this_uart);
20000bf4:	687b      	ldr	r3, [r7, #4]
20000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000bf8:	6878      	ldr	r0, [r7, #4]
20000bfa:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1662
                    }
                }

                /* PID parity error interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,EPID_PEI))
20000bfc:	687b      	ldr	r3, [r7, #4]
20000bfe:	681b      	ldr	r3, [r3, #0]
20000c00:	3328      	adds	r3, #40	; 0x28
20000c02:	2102      	movs	r1, #2
20000c04:	4618      	mov	r0, r3
20000c06:	f7ff fced 	bl	200005e4 <read_bit_reg8>
20000c0a:	4603      	mov	r3, r0
20000c0c:	2b00      	cmp	r3, #0
20000c0e:	d00c      	beq.n	20000c2a <MSS_UART_isr+0x17e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1664
                {
                    ASSERT(NULL_HANDLER != this_uart->pid_pei_handler);
20000c10:	687b      	ldr	r3, [r7, #4]
20000c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20000c14:	2b00      	cmp	r3, #0
20000c16:	d100      	bne.n	20000c1a <MSS_UART_isr+0x16e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1664 (discriminator 1)
20000c18:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1665
                    if(NULL_HANDLER != this_uart->pid_pei_handler)
20000c1a:	687b      	ldr	r3, [r7, #4]
20000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20000c1e:	2b00      	cmp	r3, #0
20000c20:	d003      	beq.n	20000c2a <MSS_UART_isr+0x17e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1667
                    {
                        (*(this_uart->pid_pei_handler))(this_uart);
20000c22:	687b      	ldr	r3, [r7, #4]
20000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20000c26:	6878      	ldr	r0, [r7, #4]
20000c28:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1672
                    }
                }

                /* LIN break detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINBI))
20000c2a:	687b      	ldr	r3, [r7, #4]
20000c2c:	681b      	ldr	r3, [r3, #0]
20000c2e:	3328      	adds	r3, #40	; 0x28
20000c30:	2103      	movs	r1, #3
20000c32:	4618      	mov	r0, r3
20000c34:	f7ff fcd6 	bl	200005e4 <read_bit_reg8>
20000c38:	4603      	mov	r3, r0
20000c3a:	2b00      	cmp	r3, #0
20000c3c:	d00c      	beq.n	20000c58 <MSS_UART_isr+0x1ac>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1674
                {
                    ASSERT(NULL_HANDLER != this_uart->break_handler);
20000c3e:	687b      	ldr	r3, [r7, #4]
20000c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20000c42:	2b00      	cmp	r3, #0
20000c44:	d100      	bne.n	20000c48 <MSS_UART_isr+0x19c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1674 (discriminator 1)
20000c46:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1675
                    if(NULL_HANDLER != this_uart->break_handler)
20000c48:	687b      	ldr	r3, [r7, #4]
20000c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20000c4c:	2b00      	cmp	r3, #0
20000c4e:	d003      	beq.n	20000c58 <MSS_UART_isr+0x1ac>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1677
                    {
                        (*(this_uart->break_handler))(this_uart);
20000c50:	687b      	ldr	r3, [r7, #4]
20000c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20000c54:	6878      	ldr	r0, [r7, #4]
20000c56:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1682
                    }
                }

                /* LIN Sync detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINSI))
20000c58:	687b      	ldr	r3, [r7, #4]
20000c5a:	681b      	ldr	r3, [r3, #0]
20000c5c:	3328      	adds	r3, #40	; 0x28
20000c5e:	2104      	movs	r1, #4
20000c60:	4618      	mov	r0, r3
20000c62:	f7ff fcbf 	bl	200005e4 <read_bit_reg8>
20000c66:	4603      	mov	r3, r0
20000c68:	2b00      	cmp	r3, #0
20000c6a:	d019      	beq.n	20000ca0 <MSS_UART_isr+0x1f4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1684
                {
                    ASSERT(NULL_HANDLER != this_uart->sync_handler);
20000c6c:	687b      	ldr	r3, [r7, #4]
20000c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20000c70:	2b00      	cmp	r3, #0
20000c72:	d100      	bne.n	20000c76 <MSS_UART_isr+0x1ca>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1684 (discriminator 1)
20000c74:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1685
                    if(NULL_HANDLER != this_uart->sync_handler)
20000c76:	687b      	ldr	r3, [r7, #4]
20000c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20000c7a:	2b00      	cmp	r3, #0
20000c7c:	d010      	beq.n	20000ca0 <MSS_UART_isr+0x1f4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1687
                    {
                        (*(this_uart->sync_handler))(this_uart);
20000c7e:	687b      	ldr	r3, [r7, #4]
20000c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20000c82:	6878      	ldr	r0, [r7, #4]
20000c84:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1690
                    }
                }
                break;
20000c86:	e00b      	b.n	20000ca0 <MSS_UART_isr+0x1f4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1695 (discriminator 1)
            }

            default:
            {
                ASSERT(INVALID_INTERRUPT);
20000c88:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1697 (discriminator 1)
            }
            break;
20000c8a:	e00a      	b.n	20000ca2 <MSS_UART_isr+0x1f6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1699
        }
    }
20000c8c:	bf00      	nop
20000c8e:	e008      	b.n	20000ca2 <MSS_UART_isr+0x1f6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1605
            break;
20000c90:	bf00      	nop
20000c92:	e006      	b.n	20000ca2 <MSS_UART_isr+0x1f6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1615
            break;
20000c94:	bf00      	nop
20000c96:	e004      	b.n	20000ca2 <MSS_UART_isr+0x1f6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1626
            break;
20000c98:	bf00      	nop
20000c9a:	e002      	b.n	20000ca2 <MSS_UART_isr+0x1f6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1636
            break;
20000c9c:	bf00      	nop
20000c9e:	e000      	b.n	20000ca2 <MSS_UART_isr+0x1f6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1690
                break;
20000ca0:	bf00      	nop
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1700
}
20000ca2:	bf00      	nop
20000ca4:	3710      	adds	r7, #16
20000ca6:	46bd      	mov	sp, r7
20000ca8:	bd80      	pop	{r7, pc}
20000caa:	bf00      	nop
20000cac:	20003cdc 	.word	0x20003cdc
20000cb0:	20003c9c 	.word	0x20003c9c

20000cb4 <default_tx_handler>:
default_tx_handler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1710
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
20000cb4:	b580      	push	{r7, lr}
20000cb6:	b086      	sub	sp, #24
20000cb8:	af00      	add	r7, sp, #0
20000cba:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1713
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20000cbc:	687b      	ldr	r3, [r7, #4]
20000cbe:	4a35      	ldr	r2, [pc, #212]	; (20000d94 <default_tx_handler+0xe0>)
20000cc0:	4293      	cmp	r3, r2
20000cc2:	d004      	beq.n	20000cce <default_tx_handler+0x1a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1713 (discriminator 1)
20000cc4:	687b      	ldr	r3, [r7, #4]
20000cc6:	4a34      	ldr	r2, [pc, #208]	; (20000d98 <default_tx_handler+0xe4>)
20000cc8:	4293      	cmp	r3, r2
20000cca:	d000      	beq.n	20000cce <default_tx_handler+0x1a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1713 (discriminator 2)
20000ccc:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1714
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
20000cce:	687b      	ldr	r3, [r7, #4]
20000cd0:	691b      	ldr	r3, [r3, #16]
20000cd2:	2b00      	cmp	r3, #0
20000cd4:	d100      	bne.n	20000cd8 <default_tx_handler+0x24>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1714 (discriminator 1)
20000cd6:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1715
    ASSERT(0u < this_uart->tx_buff_size);
20000cd8:	687b      	ldr	r3, [r7, #4]
20000cda:	695b      	ldr	r3, [r3, #20]
20000cdc:	2b00      	cmp	r3, #0
20000cde:	d100      	bne.n	20000ce2 <default_tx_handler+0x2e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1715 (discriminator 1)
20000ce0:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1717

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20000ce2:	687b      	ldr	r3, [r7, #4]
20000ce4:	4a2b      	ldr	r2, [pc, #172]	; (20000d94 <default_tx_handler+0xe0>)
20000ce6:	4293      	cmp	r3, r2
20000ce8:	d003      	beq.n	20000cf2 <default_tx_handler+0x3e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1717 (discriminator 2)
20000cea:	687b      	ldr	r3, [r7, #4]
20000cec:	4a2a      	ldr	r2, [pc, #168]	; (20000d98 <default_tx_handler+0xe4>)
20000cee:	4293      	cmp	r3, r2
20000cf0:	d14c      	bne.n	20000d8c <default_tx_handler+0xd8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1718 (discriminator 3)
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
20000cf2:	687b      	ldr	r3, [r7, #4]
20000cf4:	691b      	ldr	r3, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1717 (discriminator 3)
    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20000cf6:	2b00      	cmp	r3, #0
20000cf8:	d048      	beq.n	20000d8c <default_tx_handler+0xd8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1719
       (0u < this_uart->tx_buff_size))
20000cfa:	687b      	ldr	r3, [r7, #4]
20000cfc:	695b      	ldr	r3, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1718
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
20000cfe:	2b00      	cmp	r3, #0
20000d00:	d044      	beq.n	20000d8c <default_tx_handler+0xd8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1722
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20000d02:	687b      	ldr	r3, [r7, #4]
20000d04:	681b      	ldr	r3, [r3, #0]
20000d06:	7d1b      	ldrb	r3, [r3, #20]
20000d08:	73fb      	strb	r3, [r7, #15]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1723
        this_uart->status |= status;
20000d0a:	687b      	ldr	r3, [r7, #4]
20000d0c:	7b5a      	ldrb	r2, [r3, #13]
20000d0e:	7bfb      	ldrb	r3, [r7, #15]
20000d10:	4313      	orrs	r3, r2
20000d12:	b2da      	uxtb	r2, r3
20000d14:	687b      	ldr	r3, [r7, #4]
20000d16:	735a      	strb	r2, [r3, #13]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1729

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
20000d18:	7bfb      	ldrb	r3, [r7, #15]
20000d1a:	f003 0320 	and.w	r3, r3, #32
20000d1e:	2b00      	cmp	r3, #0
20000d20:	d024      	beq.n	20000d6c <default_tx_handler+0xb8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1732
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
20000d22:	2310      	movs	r3, #16
20000d24:	613b      	str	r3, [r7, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1733
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
20000d26:	687b      	ldr	r3, [r7, #4]
20000d28:	695a      	ldr	r2, [r3, #20]
20000d2a:	687b      	ldr	r3, [r7, #4]
20000d2c:	699b      	ldr	r3, [r3, #24]
20000d2e:	1ad3      	subs	r3, r2, r3
20000d30:	60bb      	str	r3, [r7, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1736

            /* Calculate the number of bytes to transmit. */
            if(tx_remain < TX_FIFO_SIZE)
20000d32:	68bb      	ldr	r3, [r7, #8]
20000d34:	2b0f      	cmp	r3, #15
20000d36:	d801      	bhi.n	20000d3c <default_tx_handler+0x88>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1738
            {
                fill_size = tx_remain;
20000d38:	68bb      	ldr	r3, [r7, #8]
20000d3a:	613b      	str	r3, [r7, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1742
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
20000d3c:	2300      	movs	r3, #0
20000d3e:	617b      	str	r3, [r7, #20]
20000d40:	e010      	b.n	20000d64 <default_tx_handler+0xb0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1745 (discriminator 3)
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
20000d42:	687b      	ldr	r3, [r7, #4]
20000d44:	691a      	ldr	r2, [r3, #16]
20000d46:	687b      	ldr	r3, [r7, #4]
20000d48:	699b      	ldr	r3, [r3, #24]
20000d4a:	441a      	add	r2, r3
20000d4c:	687b      	ldr	r3, [r7, #4]
20000d4e:	681b      	ldr	r3, [r3, #0]
20000d50:	7812      	ldrb	r2, [r2, #0]
20000d52:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1746 (discriminator 3)
                ++this_uart->tx_idx;
20000d54:	687b      	ldr	r3, [r7, #4]
20000d56:	699b      	ldr	r3, [r3, #24]
20000d58:	1c5a      	adds	r2, r3, #1
20000d5a:	687b      	ldr	r3, [r7, #4]
20000d5c:	619a      	str	r2, [r3, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1742 (discriminator 3)
            for(i = 0u; i < fill_size; ++i)
20000d5e:	697b      	ldr	r3, [r7, #20]
20000d60:	3301      	adds	r3, #1
20000d62:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1742 (discriminator 1)
20000d64:	697a      	ldr	r2, [r7, #20]
20000d66:	693b      	ldr	r3, [r7, #16]
20000d68:	429a      	cmp	r2, r3
20000d6a:	d3ea      	bcc.n	20000d42 <default_tx_handler+0x8e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1751
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
20000d6c:	687b      	ldr	r3, [r7, #4]
20000d6e:	699a      	ldr	r2, [r3, #24]
20000d70:	687b      	ldr	r3, [r7, #4]
20000d72:	695b      	ldr	r3, [r3, #20]
20000d74:	429a      	cmp	r2, r3
20000d76:	d109      	bne.n	20000d8c <default_tx_handler+0xd8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1753
        {
            this_uart->tx_buff_size = TX_COMPLETE;
20000d78:	687b      	ldr	r3, [r7, #4]
20000d7a:	2200      	movs	r2, #0
20000d7c:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1755
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
20000d7e:	687b      	ldr	r3, [r7, #4]
20000d80:	681b      	ldr	r3, [r3, #0]
20000d82:	3304      	adds	r3, #4
20000d84:	2101      	movs	r1, #1
20000d86:	4618      	mov	r0, r3
20000d88:	f7ff fc0f 	bl	200005aa <clear_bit_reg8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_uart/mss_uart.c:1758
        }
    }
}
20000d8c:	bf00      	nop
20000d8e:	3718      	adds	r7, #24
20000d90:	46bd      	mov	sp, r7
20000d92:	bd80      	pop	{r7, pc}
20000d94:	20003cdc 	.word	0x20003cdc
20000d98:	20003c9c 	.word	0x20003c9c

20000d9c <ComBlk_IRQHandler>:
ComBlk_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:360

/*==============================================================================
 * COMBLK interrupt handler.
 */
void ComBlk_IRQHandler(void)
{
20000d9c:	b580      	push	{r7, lr}
20000d9e:	b082      	sub	sp, #8
20000da0:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:365
    uint8_t status;
    uint8_t tx_okay;
    uint8_t rcv_okay;
    
    status = (uint8_t)COMBLK->STATUS;
20000da2:	4b0f      	ldr	r3, [pc, #60]	; (20000de0 <ComBlk_IRQHandler+0x44>)
20000da4:	685b      	ldr	r3, [r3, #4]
20000da6:	71fb      	strb	r3, [r7, #7]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:368
    
    /* Mask off interrupt that are not enabled.*/
    status &= COMBLK->INT_ENABLE;
20000da8:	4b0d      	ldr	r3, [pc, #52]	; (20000de0 <ComBlk_IRQHandler+0x44>)
20000daa:	689b      	ldr	r3, [r3, #8]
20000dac:	b2da      	uxtb	r2, r3
20000dae:	79fb      	ldrb	r3, [r7, #7]
20000db0:	4013      	ands	r3, r2
20000db2:	71fb      	strb	r3, [r7, #7]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:370
    
    rcv_okay = status & RCVOKAY_MASK;
20000db4:	79fb      	ldrb	r3, [r7, #7]
20000db6:	f003 0302 	and.w	r3, r3, #2
20000dba:	71bb      	strb	r3, [r7, #6]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:372
    
    if(rcv_okay)
20000dbc:	79bb      	ldrb	r3, [r7, #6]
20000dbe:	2b00      	cmp	r3, #0
20000dc0:	d001      	beq.n	20000dc6 <ComBlk_IRQHandler+0x2a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:374
    {
        handle_rx_okay_irq();
20000dc2:	f000 f8e5 	bl	20000f90 <handle_rx_okay_irq>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:377
    }
        
    tx_okay = status & TXTOKAY_MASK;
20000dc6:	79fb      	ldrb	r3, [r7, #7]
20000dc8:	f003 0301 	and.w	r3, r3, #1
20000dcc:	717b      	strb	r3, [r7, #5]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:378
    if(tx_okay)
20000dce:	797b      	ldrb	r3, [r7, #5]
20000dd0:	2b00      	cmp	r3, #0
20000dd2:	d001      	beq.n	20000dd8 <ComBlk_IRQHandler+0x3c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:380
    {
        handle_tx_okay_irq();
20000dd4:	f000 f806 	bl	20000de4 <handle_tx_okay_irq>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:382
    }
}
20000dd8:	bf00      	nop
20000dda:	3708      	adds	r7, #8
20000ddc:	46bd      	mov	sp, r7
20000dde:	bd80      	pop	{r7, pc}
20000de0:	40016000 	.word	0x40016000

20000de4 <handle_tx_okay_irq>:
handle_tx_okay_irq():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:388

/*==============================================================================
 *
 */
static void handle_tx_okay_irq(void)
{
20000de4:	b580      	push	{r7, lr}
20000de6:	b084      	sub	sp, #16
20000de8:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:389
    switch(g_comblk_state)
20000dea:	4b62      	ldr	r3, [pc, #392]	; (20000f74 <handle_tx_okay_irq+0x190>)
20000dec:	781b      	ldrb	r3, [r3, #0]
20000dee:	2b02      	cmp	r3, #2
20000df0:	d03d      	beq.n	20000e6e <handle_tx_okay_irq+0x8a>
20000df2:	2b05      	cmp	r3, #5
20000df4:	d068      	beq.n	20000ec8 <handle_tx_okay_irq+0xe4>
20000df6:	2b01      	cmp	r3, #1
20000df8:	f040 80aa 	bne.w	20000f50 <handle_tx_okay_irq+0x16c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:396
        /*----------------------------------------------------------------------
         * The TX_OKAY interrupt should only be enabled for states COMBLK_TX_CMD
         * and COMBLK_TX_DATA.
         */
        case COMBLK_TX_CMD:
            if(g_comblk_cmd_size > 0u)
20000dfc:	4b5e      	ldr	r3, [pc, #376]	; (20000f78 <handle_tx_okay_irq+0x194>)
20000dfe:	881b      	ldrh	r3, [r3, #0]
20000e00:	b29b      	uxth	r3, r3
20000e02:	2b00      	cmp	r3, #0
20000e04:	d02f      	beq.n	20000e66 <handle_tx_okay_irq+0x82>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:399
            {
                uint32_t size_sent;
                size_sent = fill_tx_fifo(g_comblk_p_cmd, g_comblk_cmd_size);
20000e06:	4b5d      	ldr	r3, [pc, #372]	; (20000f7c <handle_tx_okay_irq+0x198>)
20000e08:	681a      	ldr	r2, [r3, #0]
20000e0a:	4b5b      	ldr	r3, [pc, #364]	; (20000f78 <handle_tx_okay_irq+0x194>)
20000e0c:	881b      	ldrh	r3, [r3, #0]
20000e0e:	b29b      	uxth	r3, r3
20000e10:	4619      	mov	r1, r3
20000e12:	4610      	mov	r0, r2
20000e14:	f000 fa0a 	bl	2000122c <fill_tx_fifo>
20000e18:	60f8      	str	r0, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:400
                if(size_sent < g_comblk_cmd_size)
20000e1a:	4b57      	ldr	r3, [pc, #348]	; (20000f78 <handle_tx_okay_irq+0x194>)
20000e1c:	881b      	ldrh	r3, [r3, #0]
20000e1e:	b29b      	uxth	r3, r3
20000e20:	461a      	mov	r2, r3
20000e22:	68fb      	ldr	r3, [r7, #12]
20000e24:	4293      	cmp	r3, r2
20000e26:	d20f      	bcs.n	20000e48 <handle_tx_okay_irq+0x64>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:402
                {
                    g_comblk_cmd_size = g_comblk_cmd_size - (uint16_t)size_sent;
20000e28:	4b53      	ldr	r3, [pc, #332]	; (20000f78 <handle_tx_okay_irq+0x194>)
20000e2a:	881b      	ldrh	r3, [r3, #0]
20000e2c:	b29a      	uxth	r2, r3
20000e2e:	68fb      	ldr	r3, [r7, #12]
20000e30:	b29b      	uxth	r3, r3
20000e32:	1ad3      	subs	r3, r2, r3
20000e34:	b29a      	uxth	r2, r3
20000e36:	4b50      	ldr	r3, [pc, #320]	; (20000f78 <handle_tx_okay_irq+0x194>)
20000e38:	801a      	strh	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:403
                    g_comblk_p_cmd = &g_comblk_p_cmd[size_sent];
20000e3a:	4b50      	ldr	r3, [pc, #320]	; (20000f7c <handle_tx_okay_irq+0x198>)
20000e3c:	681a      	ldr	r2, [r3, #0]
20000e3e:	68fb      	ldr	r3, [r7, #12]
20000e40:	4413      	add	r3, r2
20000e42:	4a4e      	ldr	r2, [pc, #312]	; (20000f7c <handle_tx_okay_irq+0x198>)
20000e44:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:427
                 * or corrupted memory.
                 */
                ASSERT(0);
                abort_current_cmd();
            }
        break;
20000e46:	e090      	b.n	20000f6a <handle_tx_okay_irq+0x186>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:407
                    g_comblk_cmd_size = 0u;
20000e48:	4b4b      	ldr	r3, [pc, #300]	; (20000f78 <handle_tx_okay_irq+0x194>)
20000e4a:	2200      	movs	r2, #0
20000e4c:	801a      	strh	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:408
                    if(g_comblk_data_size > 0u)
20000e4e:	4b4c      	ldr	r3, [pc, #304]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000e50:	681b      	ldr	r3, [r3, #0]
20000e52:	2b00      	cmp	r3, #0
20000e54:	d003      	beq.n	20000e5e <handle_tx_okay_irq+0x7a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:410
                        g_comblk_state = COMBLK_TX_DATA;
20000e56:	4b47      	ldr	r3, [pc, #284]	; (20000f74 <handle_tx_okay_irq+0x190>)
20000e58:	2202      	movs	r2, #2
20000e5a:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:427
        break;
20000e5c:	e085      	b.n	20000f6a <handle_tx_okay_irq+0x186>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:414
                        g_comblk_state = COMBLK_WAIT_RESPONSE;
20000e5e:	4b45      	ldr	r3, [pc, #276]	; (20000f74 <handle_tx_okay_irq+0x190>)
20000e60:	2203      	movs	r2, #3
20000e62:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:427
        break;
20000e64:	e081      	b.n	20000f6a <handle_tx_okay_irq+0x186>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:424 (discriminator 1)
                ASSERT(0);
20000e66:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:425 (discriminator 1)
                abort_current_cmd();
20000e68:	f000 f9ba 	bl	200011e0 <abort_current_cmd>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:427 (discriminator 1)
        break;
20000e6c:	e07d      	b.n	20000f6a <handle_tx_okay_irq+0x186>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:430
            
        case COMBLK_TX_DATA:
            if(g_comblk_data_size > 0u)
20000e6e:	4b44      	ldr	r3, [pc, #272]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000e70:	681b      	ldr	r3, [r3, #0]
20000e72:	2b00      	cmp	r3, #0
20000e74:	d024      	beq.n	20000ec0 <handle_tx_okay_irq+0xdc>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:433
            {
                uint32_t size_sent;
                size_sent = fill_tx_fifo(g_comblk_p_data, g_comblk_data_size);
20000e76:	4b43      	ldr	r3, [pc, #268]	; (20000f84 <handle_tx_okay_irq+0x1a0>)
20000e78:	681a      	ldr	r2, [r3, #0]
20000e7a:	4b41      	ldr	r3, [pc, #260]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000e7c:	681b      	ldr	r3, [r3, #0]
20000e7e:	4619      	mov	r1, r3
20000e80:	4610      	mov	r0, r2
20000e82:	f000 f9d3 	bl	2000122c <fill_tx_fifo>
20000e86:	60b8      	str	r0, [r7, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:434
                if(size_sent < g_comblk_data_size)
20000e88:	4b3d      	ldr	r3, [pc, #244]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000e8a:	681b      	ldr	r3, [r3, #0]
20000e8c:	68ba      	ldr	r2, [r7, #8]
20000e8e:	429a      	cmp	r2, r3
20000e90:	d20c      	bcs.n	20000eac <handle_tx_okay_irq+0xc8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:436
                {
                    g_comblk_data_size = g_comblk_data_size - size_sent;
20000e92:	4b3b      	ldr	r3, [pc, #236]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000e94:	681a      	ldr	r2, [r3, #0]
20000e96:	68bb      	ldr	r3, [r7, #8]
20000e98:	1ad3      	subs	r3, r2, r3
20000e9a:	4a39      	ldr	r2, [pc, #228]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000e9c:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:437
                    g_comblk_p_data = &g_comblk_p_data[size_sent];
20000e9e:	4b39      	ldr	r3, [pc, #228]	; (20000f84 <handle_tx_okay_irq+0x1a0>)
20000ea0:	681a      	ldr	r2, [r3, #0]
20000ea2:	68bb      	ldr	r3, [r7, #8]
20000ea4:	4413      	add	r3, r2
20000ea6:	4a37      	ldr	r2, [pc, #220]	; (20000f84 <handle_tx_okay_irq+0x1a0>)
20000ea8:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:454
                 * or corrupted memory.
                 */
                ASSERT(0);
                abort_current_cmd();
            }
        break;
20000eaa:	e05e      	b.n	20000f6a <handle_tx_okay_irq+0x186>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:441
                    COMBLK->INT_ENABLE &= ~TXTOKAY_MASK;
20000eac:	4b36      	ldr	r3, [pc, #216]	; (20000f88 <handle_tx_okay_irq+0x1a4>)
20000eae:	689b      	ldr	r3, [r3, #8]
20000eb0:	4a35      	ldr	r2, [pc, #212]	; (20000f88 <handle_tx_okay_irq+0x1a4>)
20000eb2:	f023 0301 	bic.w	r3, r3, #1
20000eb6:	6093      	str	r3, [r2, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:442
                    g_comblk_state = COMBLK_WAIT_RESPONSE;
20000eb8:	4b2e      	ldr	r3, [pc, #184]	; (20000f74 <handle_tx_okay_irq+0x190>)
20000eba:	2203      	movs	r2, #3
20000ebc:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:454
        break;
20000ebe:	e054      	b.n	20000f6a <handle_tx_okay_irq+0x186>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:451 (discriminator 1)
                ASSERT(0);
20000ec0:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:452 (discriminator 1)
                abort_current_cmd();
20000ec2:	f000 f98d 	bl	200011e0 <abort_current_cmd>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:454 (discriminator 1)
        break;
20000ec6:	e050      	b.n	20000f6a <handle_tx_okay_irq+0x186>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:460
           
        case COMBLK_TX_PAGED_DATA:
            /*
             * Read a page of data if required.
             */
            if(0u == g_comblk_data_size)
20000ec8:	4b2d      	ldr	r3, [pc, #180]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000eca:	681b      	ldr	r3, [r3, #0]
20000ecc:	2b00      	cmp	r3, #0
20000ece:	d11b      	bne.n	20000f08 <handle_tx_okay_irq+0x124>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:462
            {
                if(g_comblk_page_handler != 0)
20000ed0:	4b2e      	ldr	r3, [pc, #184]	; (20000f8c <handle_tx_okay_irq+0x1a8>)
20000ed2:	681b      	ldr	r3, [r3, #0]
20000ed4:	2b00      	cmp	r3, #0
20000ed6:	d014      	beq.n	20000f02 <handle_tx_okay_irq+0x11e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:464
                {
                    g_comblk_data_size = g_comblk_page_handler(&g_comblk_p_data);
20000ed8:	4b2c      	ldr	r3, [pc, #176]	; (20000f8c <handle_tx_okay_irq+0x1a8>)
20000eda:	681b      	ldr	r3, [r3, #0]
20000edc:	4829      	ldr	r0, [pc, #164]	; (20000f84 <handle_tx_okay_irq+0x1a0>)
20000ede:	4798      	blx	r3
20000ee0:	4602      	mov	r2, r0
20000ee2:	4b27      	ldr	r3, [pc, #156]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000ee4:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:465
                    if(0u == g_comblk_data_size)
20000ee6:	4b26      	ldr	r3, [pc, #152]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000ee8:	681b      	ldr	r3, [r3, #0]
20000eea:	2b00      	cmp	r3, #0
20000eec:	d10c      	bne.n	20000f08 <handle_tx_okay_irq+0x124>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:467
                    {
                        COMBLK->INT_ENABLE &= ~TXTOKAY_MASK;
20000eee:	4b26      	ldr	r3, [pc, #152]	; (20000f88 <handle_tx_okay_irq+0x1a4>)
20000ef0:	689b      	ldr	r3, [r3, #8]
20000ef2:	4a25      	ldr	r2, [pc, #148]	; (20000f88 <handle_tx_okay_irq+0x1a4>)
20000ef4:	f023 0301 	bic.w	r3, r3, #1
20000ef8:	6093      	str	r3, [r2, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:468
                        g_comblk_state = COMBLK_WAIT_RESPONSE;
20000efa:	4b1e      	ldr	r3, [pc, #120]	; (20000f74 <handle_tx_okay_irq+0x190>)
20000efc:	2203      	movs	r2, #3
20000efe:	701a      	strb	r2, [r3, #0]
20000f00:	e002      	b.n	20000f08 <handle_tx_okay_irq+0x124>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:473 (discriminator 1)
                    }
                }
                else
                {
                    ASSERT(0);
20000f02:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:474 (discriminator 1)
                    abort_current_cmd();
20000f04:	f000 f96c 	bl	200011e0 <abort_current_cmd>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:483
            /*
             * Transmit the page data or move to COMBLK_WAIT_RESPONSE state if
             * no further page data could be obtained by the call to the page
             * handler above.
             */
            if(0u == g_comblk_data_size)
20000f08:	4b1d      	ldr	r3, [pc, #116]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000f0a:	681b      	ldr	r3, [r3, #0]
20000f0c:	2b00      	cmp	r3, #0
20000f0e:	d109      	bne.n	20000f24 <handle_tx_okay_irq+0x140>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:485
            {
                COMBLK->INT_ENABLE &= ~TXTOKAY_MASK;
20000f10:	4b1d      	ldr	r3, [pc, #116]	; (20000f88 <handle_tx_okay_irq+0x1a4>)
20000f12:	689b      	ldr	r3, [r3, #8]
20000f14:	4a1c      	ldr	r2, [pc, #112]	; (20000f88 <handle_tx_okay_irq+0x1a4>)
20000f16:	f023 0301 	bic.w	r3, r3, #1
20000f1a:	6093      	str	r3, [r2, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:486
                g_comblk_state = COMBLK_WAIT_RESPONSE;
20000f1c:	4b15      	ldr	r3, [pc, #84]	; (20000f74 <handle_tx_okay_irq+0x190>)
20000f1e:	2203      	movs	r2, #3
20000f20:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:495
                uint32_t size_sent;
                size_sent = fill_tx_fifo(g_comblk_p_data, g_comblk_data_size);
                g_comblk_data_size = g_comblk_data_size - size_sent;
                g_comblk_p_data = &g_comblk_p_data[size_sent];
            }
        break;
20000f22:	e022      	b.n	20000f6a <handle_tx_okay_irq+0x186>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:491
                size_sent = fill_tx_fifo(g_comblk_p_data, g_comblk_data_size);
20000f24:	4b17      	ldr	r3, [pc, #92]	; (20000f84 <handle_tx_okay_irq+0x1a0>)
20000f26:	681a      	ldr	r2, [r3, #0]
20000f28:	4b15      	ldr	r3, [pc, #84]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000f2a:	681b      	ldr	r3, [r3, #0]
20000f2c:	4619      	mov	r1, r3
20000f2e:	4610      	mov	r0, r2
20000f30:	f000 f97c 	bl	2000122c <fill_tx_fifo>
20000f34:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:492
                g_comblk_data_size = g_comblk_data_size - size_sent;
20000f36:	4b12      	ldr	r3, [pc, #72]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000f38:	681a      	ldr	r2, [r3, #0]
20000f3a:	687b      	ldr	r3, [r7, #4]
20000f3c:	1ad3      	subs	r3, r2, r3
20000f3e:	4a10      	ldr	r2, [pc, #64]	; (20000f80 <handle_tx_okay_irq+0x19c>)
20000f40:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:493
                g_comblk_p_data = &g_comblk_p_data[size_sent];
20000f42:	4b10      	ldr	r3, [pc, #64]	; (20000f84 <handle_tx_okay_irq+0x1a0>)
20000f44:	681a      	ldr	r2, [r3, #0]
20000f46:	687b      	ldr	r3, [r7, #4]
20000f48:	4413      	add	r3, r2
20000f4a:	4a0e      	ldr	r2, [pc, #56]	; (20000f84 <handle_tx_okay_irq+0x1a0>)
20000f4c:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:495
        break;
20000f4e:	e00c      	b.n	20000f6a <handle_tx_okay_irq+0x186>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:508
        case COMBLK_WAIT_RESPONSE:
            /* Fall through */
        case COMBLK_RX_RESPONSE:
            /* Fall through */
        default:
            COMBLK->INT_ENABLE &= ~TXTOKAY_MASK;
20000f50:	4b0d      	ldr	r3, [pc, #52]	; (20000f88 <handle_tx_okay_irq+0x1a4>)
20000f52:	689b      	ldr	r3, [r3, #8]
20000f54:	4a0c      	ldr	r2, [pc, #48]	; (20000f88 <handle_tx_okay_irq+0x1a4>)
20000f56:	f023 0301 	bic.w	r3, r3, #1
20000f5a:	6093      	str	r3, [r2, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:509
            complete_request(0u);
20000f5c:	2000      	movs	r0, #0
20000f5e:	f000 f91f 	bl	200011a0 <complete_request>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:510
            g_comblk_state = COMBLK_IDLE;
20000f62:	4b04      	ldr	r3, [pc, #16]	; (20000f74 <handle_tx_okay_irq+0x190>)
20000f64:	2200      	movs	r2, #0
20000f66:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:511
        break;
20000f68:	bf00      	nop
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:513
    }
}
20000f6a:	bf00      	nop
20000f6c:	3710      	adds	r7, #16
20000f6e:	46bd      	mov	sp, r7
20000f70:	bd80      	pop	{r7, pc}
20000f72:	bf00      	nop
20000f74:	20003c61 	.word	0x20003c61
20000f78:	20003c44 	.word	0x20003c44
20000f7c:	20003c40 	.word	0x20003c40
20000f80:	20003c4c 	.word	0x20003c4c
20000f84:	20003c48 	.word	0x20003c48
20000f88:	40016000 	.word	0x40016000
20000f8c:	20003c5c 	.word	0x20003c5c

20000f90 <handle_rx_okay_irq>:
handle_rx_okay_irq():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:519

/*==============================================================================
 *
 */
static void handle_rx_okay_irq(void)
{
20000f90:	b580      	push	{r7, lr}
20000f92:	b084      	sub	sp, #16
20000f94:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:524
    uint16_t data16;
    uint16_t is_command;
    uint8_t data8;
    
    data16 = (uint16_t)COMBLK->DATA8;
20000f96:	4b7c      	ldr	r3, [pc, #496]	; (20001188 <handle_rx_okay_irq+0x1f8>)
20000f98:	691b      	ldr	r3, [r3, #16]
20000f9a:	81fb      	strh	r3, [r7, #14]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:525
    is_command = data16 & DATA8_COMMAND_MASK;
20000f9c:	89fb      	ldrh	r3, [r7, #14]
20000f9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
20000fa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
20000fa6:	81bb      	strh	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:526
    data8 = (uint8_t)data16;
20000fa8:	89fb      	ldrh	r3, [r7, #14]
20000faa:	72fb      	strb	r3, [r7, #11]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:528
            
    switch(g_comblk_state)
20000fac:	4b77      	ldr	r3, [pc, #476]	; (2000118c <handle_rx_okay_irq+0x1fc>)
20000fae:	781b      	ldrb	r3, [r3, #0]
20000fb0:	2b05      	cmp	r3, #5
20000fb2:	f200 80d6 	bhi.w	20001162 <handle_rx_okay_irq+0x1d2>
20000fb6:	a201      	add	r2, pc, #4	; (adr r2, 20000fbc <handle_rx_okay_irq+0x2c>)
20000fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000fbc:	20000fd5 	.word	0x20000fd5
20000fc0:	2000114f 	.word	0x2000114f
20000fc4:	2000114f 	.word	0x2000114f
20000fc8:	2000102d 	.word	0x2000102d
20000fcc:	2000107b 	.word	0x2000107b
20000fd0:	20001123 	.word	0x20001123
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:536
        * MSS_COMBLK_init() enables the RCV_OKAY interrupt for the COMBLK_IDLE
        * state to receive the asynchronous power-on-reset from the system
        * controller.
        */
        case COMBLK_IDLE:
            if(is_command)
20000fd4:	89bb      	ldrh	r3, [r7, #12]
20000fd6:	2b00      	cmp	r3, #0
20000fd8:	f000 80ca 	beq.w	20001170 <handle_rx_okay_irq+0x1e0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:538
            {
                if(data8 != POR_DIGEST_ERROR_OPCODE)
20000fdc:	7afb      	ldrb	r3, [r7, #11]
20000fde:	2bf1      	cmp	r3, #241	; 0xf1
20000fe0:	d006      	beq.n	20000ff0 <handle_rx_okay_irq+0x60>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:541
                {
                    uint8_t rxed_opcode;
                    rxed_opcode = data8;
20000fe2:	7afb      	ldrb	r3, [r7, #11]
20000fe4:	72bb      	strb	r3, [r7, #10]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:542
                    process_sys_ctrl_command(rxed_opcode);
20000fe6:	7abb      	ldrb	r3, [r7, #10]
20000fe8:	4618      	mov	r0, r3
20000fea:	f000 f94f 	bl	2000128c <process_sys_ctrl_command>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:553
                    g_comblk_response_idx++;
                    g_comblk_p_response[g_comblk_response_idx] = 0x00u;                
                    g_comblk_state = COMBLK_RX_RESPONSE;
                }
            }
        break;
20000fee:	e0bf      	b.n	20001170 <handle_rx_okay_irq+0x1e0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:546
                    g_comblk_response_idx = 0;
20000ff0:	4b67      	ldr	r3, [pc, #412]	; (20001190 <handle_rx_okay_irq+0x200>)
20000ff2:	2200      	movs	r2, #0
20000ff4:	801a      	strh	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:547
                    g_comblk_p_response[g_comblk_response_idx] = data8;
20000ff6:	4b67      	ldr	r3, [pc, #412]	; (20001194 <handle_rx_okay_irq+0x204>)
20000ff8:	681b      	ldr	r3, [r3, #0]
20000ffa:	4a65      	ldr	r2, [pc, #404]	; (20001190 <handle_rx_okay_irq+0x200>)
20000ffc:	8812      	ldrh	r2, [r2, #0]
20000ffe:	b292      	uxth	r2, r2
20001000:	4413      	add	r3, r2
20001002:	7afa      	ldrb	r2, [r7, #11]
20001004:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:548
                    g_comblk_response_idx++;
20001006:	4b62      	ldr	r3, [pc, #392]	; (20001190 <handle_rx_okay_irq+0x200>)
20001008:	881b      	ldrh	r3, [r3, #0]
2000100a:	b29b      	uxth	r3, r3
2000100c:	3301      	adds	r3, #1
2000100e:	b29a      	uxth	r2, r3
20001010:	4b5f      	ldr	r3, [pc, #380]	; (20001190 <handle_rx_okay_irq+0x200>)
20001012:	801a      	strh	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:549
                    g_comblk_p_response[g_comblk_response_idx] = 0x00u;                
20001014:	4b5f      	ldr	r3, [pc, #380]	; (20001194 <handle_rx_okay_irq+0x204>)
20001016:	681b      	ldr	r3, [r3, #0]
20001018:	4a5d      	ldr	r2, [pc, #372]	; (20001190 <handle_rx_okay_irq+0x200>)
2000101a:	8812      	ldrh	r2, [r2, #0]
2000101c:	b292      	uxth	r2, r2
2000101e:	4413      	add	r3, r2
20001020:	2200      	movs	r2, #0
20001022:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:550
                    g_comblk_state = COMBLK_RX_RESPONSE;
20001024:	4b59      	ldr	r3, [pc, #356]	; (2000118c <handle_rx_okay_irq+0x1fc>)
20001026:	2204      	movs	r2, #4
20001028:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:553
        break;
2000102a:	e0a1      	b.n	20001170 <handle_rx_okay_irq+0x1e0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:560
        /*----------------------------------------------------------------------
         * The RCV_OKAY interrupt should only be enabled for states
         * COMBLK_WAIT_RESPONSE and COMBLK_RX_RESPONSE. 
         */
        case COMBLK_WAIT_RESPONSE:
            if(is_command)
2000102c:	89bb      	ldrh	r3, [r7, #12]
2000102e:	2b00      	cmp	r3, #0
20001030:	f000 80a0 	beq.w	20001174 <handle_rx_okay_irq+0x1e4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:563
            {
                uint8_t rxed_opcode;
                rxed_opcode = data8;
20001034:	7afb      	ldrb	r3, [r7, #11]
20001036:	727b      	strb	r3, [r7, #9]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:564
                if(rxed_opcode == g_comblk_cmd_opcode)
20001038:	4b57      	ldr	r3, [pc, #348]	; (20001198 <handle_rx_okay_irq+0x208>)
2000103a:	781b      	ldrb	r3, [r3, #0]
2000103c:	b2db      	uxtb	r3, r3
2000103e:	7a7a      	ldrb	r2, [r7, #9]
20001040:	429a      	cmp	r2, r3
20001042:	d115      	bne.n	20001070 <handle_rx_okay_irq+0xe0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:566
                {
                    g_comblk_response_idx = 0u;
20001044:	4b52      	ldr	r3, [pc, #328]	; (20001190 <handle_rx_okay_irq+0x200>)
20001046:	2200      	movs	r2, #0
20001048:	801a      	strh	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:567
                    g_comblk_p_response[g_comblk_response_idx] = rxed_opcode;
2000104a:	4b52      	ldr	r3, [pc, #328]	; (20001194 <handle_rx_okay_irq+0x204>)
2000104c:	681b      	ldr	r3, [r3, #0]
2000104e:	4a50      	ldr	r2, [pc, #320]	; (20001190 <handle_rx_okay_irq+0x200>)
20001050:	8812      	ldrh	r2, [r2, #0]
20001052:	b292      	uxth	r2, r2
20001054:	4413      	add	r3, r2
20001056:	7a7a      	ldrb	r2, [r7, #9]
20001058:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:568
                    ++g_comblk_response_idx;
2000105a:	4b4d      	ldr	r3, [pc, #308]	; (20001190 <handle_rx_okay_irq+0x200>)
2000105c:	881b      	ldrh	r3, [r3, #0]
2000105e:	b29b      	uxth	r3, r3
20001060:	3301      	adds	r3, #1
20001062:	b29a      	uxth	r2, r3
20001064:	4b4a      	ldr	r3, [pc, #296]	; (20001190 <handle_rx_okay_irq+0x200>)
20001066:	801a      	strh	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:569
                    g_comblk_state = COMBLK_RX_RESPONSE;
20001068:	4b48      	ldr	r3, [pc, #288]	; (2000118c <handle_rx_okay_irq+0x1fc>)
2000106a:	2204      	movs	r2, #4
2000106c:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:576
                else
                {
                    process_sys_ctrl_command(rxed_opcode);
                }
            }
        break;
2000106e:	e081      	b.n	20001174 <handle_rx_okay_irq+0x1e4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:573
                    process_sys_ctrl_command(rxed_opcode);
20001070:	7a7b      	ldrb	r3, [r7, #9]
20001072:	4618      	mov	r0, r3
20001074:	f000 f90a 	bl	2000128c <process_sys_ctrl_command>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:576
        break;
20001078:	e07c      	b.n	20001174 <handle_rx_okay_irq+0x1e4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:579
            
        case COMBLK_RX_RESPONSE:
            if(is_command)
2000107a:	89bb      	ldrh	r3, [r7, #12]
2000107c:	2b00      	cmp	r3, #0
2000107e:	d006      	beq.n	2000108e <handle_rx_okay_irq+0xfe>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:582
            {
                uint8_t rxed_opcode;
                rxed_opcode = data8;
20001080:	7afb      	ldrb	r3, [r7, #11]
20001082:	723b      	strb	r3, [r7, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:583
                process_sys_ctrl_command(rxed_opcode);
20001084:	7a3b      	ldrb	r3, [r7, #8]
20001086:	4618      	mov	r0, r3
20001088:	f000 f900 	bl	2000128c <process_sys_ctrl_command>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:611
                        complete_request(g_comblk_response_idx);
                        g_comblk_state = COMBLK_IDLE;
                    }
                }
            }
        break;
2000108c:	e074      	b.n	20001178 <handle_rx_okay_irq+0x1e8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:587
                if( g_comblk_p_response[g_comblk_response_idx-1] == POR_DIGEST_ERROR_OPCODE)
2000108e:	4b41      	ldr	r3, [pc, #260]	; (20001194 <handle_rx_okay_irq+0x204>)
20001090:	681a      	ldr	r2, [r3, #0]
20001092:	4b3f      	ldr	r3, [pc, #252]	; (20001190 <handle_rx_okay_irq+0x200>)
20001094:	881b      	ldrh	r3, [r3, #0]
20001096:	b29b      	uxth	r3, r3
20001098:	3b01      	subs	r3, #1
2000109a:	4413      	add	r3, r2
2000109c:	781b      	ldrb	r3, [r3, #0]
2000109e:	2bf1      	cmp	r3, #241	; 0xf1
200010a0:	d116      	bne.n	200010d0 <handle_rx_okay_irq+0x140>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:589
                    g_comblk_p_response[g_comblk_response_idx] = data8;
200010a2:	4b3c      	ldr	r3, [pc, #240]	; (20001194 <handle_rx_okay_irq+0x204>)
200010a4:	681b      	ldr	r3, [r3, #0]
200010a6:	4a3a      	ldr	r2, [pc, #232]	; (20001190 <handle_rx_okay_irq+0x200>)
200010a8:	8812      	ldrh	r2, [r2, #0]
200010aa:	b292      	uxth	r2, r2
200010ac:	4413      	add	r3, r2
200010ae:	7afa      	ldrb	r2, [r7, #11]
200010b0:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:590
                    process_sys_ctrl_command(g_comblk_p_response[g_comblk_response_idx-1]);
200010b2:	4b38      	ldr	r3, [pc, #224]	; (20001194 <handle_rx_okay_irq+0x204>)
200010b4:	681a      	ldr	r2, [r3, #0]
200010b6:	4b36      	ldr	r3, [pc, #216]	; (20001190 <handle_rx_okay_irq+0x200>)
200010b8:	881b      	ldrh	r3, [r3, #0]
200010ba:	b29b      	uxth	r3, r3
200010bc:	3b01      	subs	r3, #1
200010be:	4413      	add	r3, r2
200010c0:	781b      	ldrb	r3, [r3, #0]
200010c2:	4618      	mov	r0, r3
200010c4:	f000 f8e2 	bl	2000128c <process_sys_ctrl_command>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:591
                    g_comblk_state = COMBLK_IDLE;
200010c8:	4b30      	ldr	r3, [pc, #192]	; (2000118c <handle_rx_okay_irq+0x1fc>)
200010ca:	2200      	movs	r2, #0
200010cc:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:611
        break;
200010ce:	e053      	b.n	20001178 <handle_rx_okay_irq+0x1e8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:595
                    if(g_comblk_response_idx < g_comblk_response_size)
200010d0:	4b2f      	ldr	r3, [pc, #188]	; (20001190 <handle_rx_okay_irq+0x200>)
200010d2:	881b      	ldrh	r3, [r3, #0]
200010d4:	b29a      	uxth	r2, r3
200010d6:	4b31      	ldr	r3, [pc, #196]	; (2000119c <handle_rx_okay_irq+0x20c>)
200010d8:	881b      	ldrh	r3, [r3, #0]
200010da:	429a      	cmp	r2, r3
200010dc:	d210      	bcs.n	20001100 <handle_rx_okay_irq+0x170>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:599
                        rxed_data = data8;
200010de:	7afb      	ldrb	r3, [r7, #11]
200010e0:	71fb      	strb	r3, [r7, #7]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:600
                        g_comblk_p_response[g_comblk_response_idx] = rxed_data;
200010e2:	4b2c      	ldr	r3, [pc, #176]	; (20001194 <handle_rx_okay_irq+0x204>)
200010e4:	681b      	ldr	r3, [r3, #0]
200010e6:	4a2a      	ldr	r2, [pc, #168]	; (20001190 <handle_rx_okay_irq+0x200>)
200010e8:	8812      	ldrh	r2, [r2, #0]
200010ea:	b292      	uxth	r2, r2
200010ec:	4413      	add	r3, r2
200010ee:	79fa      	ldrb	r2, [r7, #7]
200010f0:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:601
                        ++g_comblk_response_idx;
200010f2:	4b27      	ldr	r3, [pc, #156]	; (20001190 <handle_rx_okay_irq+0x200>)
200010f4:	881b      	ldrh	r3, [r3, #0]
200010f6:	b29b      	uxth	r3, r3
200010f8:	3301      	adds	r3, #1
200010fa:	b29a      	uxth	r2, r3
200010fc:	4b24      	ldr	r3, [pc, #144]	; (20001190 <handle_rx_okay_irq+0x200>)
200010fe:	801a      	strh	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:604
                    if(g_comblk_response_idx == g_comblk_response_size)
20001100:	4b23      	ldr	r3, [pc, #140]	; (20001190 <handle_rx_okay_irq+0x200>)
20001102:	881b      	ldrh	r3, [r3, #0]
20001104:	b29a      	uxth	r2, r3
20001106:	4b25      	ldr	r3, [pc, #148]	; (2000119c <handle_rx_okay_irq+0x20c>)
20001108:	881b      	ldrh	r3, [r3, #0]
2000110a:	429a      	cmp	r2, r3
2000110c:	d134      	bne.n	20001178 <handle_rx_okay_irq+0x1e8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:606
                        complete_request(g_comblk_response_idx);
2000110e:	4b20      	ldr	r3, [pc, #128]	; (20001190 <handle_rx_okay_irq+0x200>)
20001110:	881b      	ldrh	r3, [r3, #0]
20001112:	b29b      	uxth	r3, r3
20001114:	4618      	mov	r0, r3
20001116:	f000 f843 	bl	200011a0 <complete_request>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:607
                        g_comblk_state = COMBLK_IDLE;
2000111a:	4b1c      	ldr	r3, [pc, #112]	; (2000118c <handle_rx_okay_irq+0x1fc>)
2000111c:	2200      	movs	r2, #0
2000111e:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:611
        break;
20001120:	e02a      	b.n	20001178 <handle_rx_okay_irq+0x1e8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:619
         * The RCV_OKAY interrupt should NOT be enabled for states
         * COMBLK_IDLE, COMBLK_TX_CMD and COMBLK_TX_DATA.
         */
        case COMBLK_TX_PAGED_DATA:
            /* This is needed because when there is an error, we need to terminate loading the data */
            if(!is_command)
20001122:	89bb      	ldrh	r3, [r7, #12]
20001124:	2b00      	cmp	r3, #0
20001126:	d10b      	bne.n	20001140 <handle_rx_okay_irq+0x1b0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:621
            {
                g_comblk_p_response[1] = data8;
20001128:	4b1a      	ldr	r3, [pc, #104]	; (20001194 <handle_rx_okay_irq+0x204>)
2000112a:	681b      	ldr	r3, [r3, #0]
2000112c:	3301      	adds	r3, #1
2000112e:	7afa      	ldrb	r2, [r7, #11]
20001130:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:622
                complete_request(2u);
20001132:	2002      	movs	r0, #2
20001134:	f000 f834 	bl	200011a0 <complete_request>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:623
                g_comblk_state = COMBLK_IDLE;
20001138:	4b14      	ldr	r3, [pc, #80]	; (2000118c <handle_rx_okay_irq+0x1fc>)
2000113a:	2200      	movs	r2, #0
2000113c:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:631
            {
                uint8_t rxed_opcode;
                rxed_opcode = data8;
                process_sys_ctrl_command(rxed_opcode);
            }
        break;
2000113e:	e01e      	b.n	2000117e <handle_rx_okay_irq+0x1ee>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:628
                rxed_opcode = data8;
20001140:	7afb      	ldrb	r3, [r7, #11]
20001142:	71bb      	strb	r3, [r7, #6]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:629
                process_sys_ctrl_command(rxed_opcode);
20001144:	79bb      	ldrb	r3, [r7, #6]
20001146:	4618      	mov	r0, r3
20001148:	f000 f8a0 	bl	2000128c <process_sys_ctrl_command>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:631
        break;
2000114c:	e017      	b.n	2000117e <handle_rx_okay_irq+0x1ee>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:637
        
        case COMBLK_TX_CMD:
            /* Fall through */
        case COMBLK_TX_DATA:
            /* Fall through */
            if(is_command)
2000114e:	89bb      	ldrh	r3, [r7, #12]
20001150:	2b00      	cmp	r3, #0
20001152:	d013      	beq.n	2000117c <handle_rx_okay_irq+0x1ec>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:640
            {
                uint8_t rxed_opcode;
                rxed_opcode = data8;
20001154:	7afb      	ldrb	r3, [r7, #11]
20001156:	717b      	strb	r3, [r7, #5]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:641
                process_sys_ctrl_command(rxed_opcode);
20001158:	797b      	ldrb	r3, [r7, #5]
2000115a:	4618      	mov	r0, r3
2000115c:	f000 f896 	bl	2000128c <process_sys_ctrl_command>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:643
            }
        break;
20001160:	e00c      	b.n	2000117c <handle_rx_okay_irq+0x1ec>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:646
        
        default:
            complete_request(0u);
20001162:	2000      	movs	r0, #0
20001164:	f000 f81c 	bl	200011a0 <complete_request>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:647
            g_comblk_state = COMBLK_IDLE;
20001168:	4b08      	ldr	r3, [pc, #32]	; (2000118c <handle_rx_okay_irq+0x1fc>)
2000116a:	2200      	movs	r2, #0
2000116c:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:648
        break;
2000116e:	e006      	b.n	2000117e <handle_rx_okay_irq+0x1ee>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:553
        break;
20001170:	bf00      	nop
20001172:	e004      	b.n	2000117e <handle_rx_okay_irq+0x1ee>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:576
        break;
20001174:	bf00      	nop
20001176:	e002      	b.n	2000117e <handle_rx_okay_irq+0x1ee>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:611
        break;
20001178:	bf00      	nop
2000117a:	e000      	b.n	2000117e <handle_rx_okay_irq+0x1ee>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:643
        break;
2000117c:	bf00      	nop
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:650
    }
}
2000117e:	bf00      	nop
20001180:	3710      	adds	r7, #16
20001182:	46bd      	mov	sp, r7
20001184:	bd80      	pop	{r7, pc}
20001186:	bf00      	nop
20001188:	40016000 	.word	0x40016000
2000118c:	20003c61 	.word	0x20003c61
20001190:	20003c56 	.word	0x20003c56
20001194:	20003c50 	.word	0x20003c50
20001198:	20003c3c 	.word	0x20003c3c
2000119c:	20003c54 	.word	0x20003c54

200011a0 <complete_request>:
complete_request():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:659
 */
static void complete_request
(
    uint16_t response_length
)
{
200011a0:	b580      	push	{r7, lr}
200011a2:	b082      	sub	sp, #8
200011a4:	af00      	add	r7, sp, #0
200011a6:	4603      	mov	r3, r0
200011a8:	80fb      	strh	r3, [r7, #6]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:660
    if(g_comblk_completion_handler != 0)
200011aa:	4b0a      	ldr	r3, [pc, #40]	; (200011d4 <complete_request+0x34>)
200011ac:	681b      	ldr	r3, [r3, #0]
200011ae:	2b00      	cmp	r3, #0
200011b0:	d00c      	beq.n	200011cc <complete_request+0x2c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:662
    {
        g_comblk_completion_handler(g_comblk_p_response, response_length);
200011b2:	4b08      	ldr	r3, [pc, #32]	; (200011d4 <complete_request+0x34>)
200011b4:	681b      	ldr	r3, [r3, #0]
200011b6:	4a08      	ldr	r2, [pc, #32]	; (200011d8 <complete_request+0x38>)
200011b8:	6812      	ldr	r2, [r2, #0]
200011ba:	88f9      	ldrh	r1, [r7, #6]
200011bc:	4610      	mov	r0, r2
200011be:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:663
        g_comblk_completion_handler = 0;
200011c0:	4b04      	ldr	r3, [pc, #16]	; (200011d4 <complete_request+0x34>)
200011c2:	2200      	movs	r2, #0
200011c4:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:664
        g_request_in_progress = 0u;
200011c6:	4b05      	ldr	r3, [pc, #20]	; (200011dc <complete_request+0x3c>)
200011c8:	2200      	movs	r2, #0
200011ca:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:666
    }
}
200011cc:	bf00      	nop
200011ce:	3708      	adds	r7, #8
200011d0:	46bd      	mov	sp, r7
200011d2:	bd80      	pop	{r7, pc}
200011d4:	20003c58 	.word	0x20003c58
200011d8:	20003c50 	.word	0x20003c50
200011dc:	20003c60 	.word	0x20003c60

200011e0 <abort_current_cmd>:
abort_current_cmd():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:672

/*==============================================================================
 *
 */
static void abort_current_cmd(void)
{
200011e0:	b580      	push	{r7, lr}
200011e2:	b082      	sub	sp, #8
200011e4:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:673
    if(g_request_in_progress)
200011e6:	4b0e      	ldr	r3, [pc, #56]	; (20001220 <abort_current_cmd+0x40>)
200011e8:	781b      	ldrb	r3, [r3, #0]
200011ea:	b2db      	uxtb	r3, r3
200011ec:	2b00      	cmp	r3, #0
200011ee:	d013      	beq.n	20001218 <abort_current_cmd+0x38>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:681
        
        /*
         * Call completion handler just in case we are in a multi threaded system
         * to avoid a task lockup.
         */
        complete_request(g_comblk_response_idx);
200011f0:	4b0c      	ldr	r3, [pc, #48]	; (20001224 <abort_current_cmd+0x44>)
200011f2:	881b      	ldrh	r3, [r3, #0]
200011f4:	b29b      	uxth	r3, r3
200011f6:	4618      	mov	r0, r3
200011f8:	f7ff ffd2 	bl	200011a0 <complete_request>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:686
        
        /*
         * Flush the FIFOs
         */
        COMBLK->CONTROL |= CR_FLUSHOUT_MASK;
200011fc:	4b0a      	ldr	r3, [pc, #40]	; (20001228 <abort_current_cmd+0x48>)
200011fe:	681b      	ldr	r3, [r3, #0]
20001200:	4a09      	ldr	r2, [pc, #36]	; (20001228 <abort_current_cmd+0x48>)
20001202:	f043 0301 	orr.w	r3, r3, #1
20001206:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:688 (discriminator 1)
        do {
            flush_in_progress = COMBLK->CONTROL & CR_FLUSHOUT_MASK;
20001208:	4b07      	ldr	r3, [pc, #28]	; (20001228 <abort_current_cmd+0x48>)
2000120a:	681b      	ldr	r3, [r3, #0]
2000120c:	f003 0301 	and.w	r3, r3, #1
20001210:	607b      	str	r3, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:689 (discriminator 1)
        } while(flush_in_progress);
20001212:	687b      	ldr	r3, [r7, #4]
20001214:	2b00      	cmp	r3, #0
20001216:	d1f7      	bne.n	20001208 <abort_current_cmd+0x28>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:691
    }
}
20001218:	bf00      	nop
2000121a:	3708      	adds	r7, #8
2000121c:	46bd      	mov	sp, r7
2000121e:	bd80      	pop	{r7, pc}
20001220:	20003c60 	.word	0x20003c60
20001224:	20003c56 	.word	0x20003c56
20001228:	40016000 	.word	0x40016000

2000122c <fill_tx_fifo>:
fill_tx_fifo():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:723
static uint32_t fill_tx_fifo
(
    const uint8_t * p_cmd,
    uint32_t cmd_size
)
{
2000122c:	b480      	push	{r7}
2000122e:	b085      	sub	sp, #20
20001230:	af00      	add	r7, sp, #0
20001232:	6078      	str	r0, [r7, #4]
20001234:	6039      	str	r1, [r7, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:728
    volatile uint32_t tx_okay;
    uint32_t size_sent;

    /* Set transmit FIFO to transfer bytes. */
    COMBLK->CONTROL &= ~CR_SIZETX_MASK;
20001236:	4b14      	ldr	r3, [pc, #80]	; (20001288 <fill_tx_fifo+0x5c>)
20001238:	681b      	ldr	r3, [r3, #0]
2000123a:	4a13      	ldr	r2, [pc, #76]	; (20001288 <fill_tx_fifo+0x5c>)
2000123c:	f023 0304 	bic.w	r3, r3, #4
20001240:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:730
    
    size_sent = 0u;
20001242:	2300      	movs	r3, #0
20001244:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:731
    tx_okay = COMBLK->STATUS & TXTOKAY_MASK;
20001246:	4b10      	ldr	r3, [pc, #64]	; (20001288 <fill_tx_fifo+0x5c>)
20001248:	685b      	ldr	r3, [r3, #4]
2000124a:	f003 0301 	and.w	r3, r3, #1
2000124e:	60bb      	str	r3, [r7, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:732
    while((tx_okay != 0u) && (size_sent < cmd_size))
20001250:	e00d      	b.n	2000126e <fill_tx_fifo+0x42>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:734
    {
        COMBLK->DATA8 = p_cmd[size_sent];
20001252:	687a      	ldr	r2, [r7, #4]
20001254:	68fb      	ldr	r3, [r7, #12]
20001256:	4413      	add	r3, r2
20001258:	781a      	ldrb	r2, [r3, #0]
2000125a:	4b0b      	ldr	r3, [pc, #44]	; (20001288 <fill_tx_fifo+0x5c>)
2000125c:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:735
        ++size_sent;
2000125e:	68fb      	ldr	r3, [r7, #12]
20001260:	3301      	adds	r3, #1
20001262:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:736
        tx_okay = COMBLK->STATUS & TXTOKAY_MASK;
20001264:	4b08      	ldr	r3, [pc, #32]	; (20001288 <fill_tx_fifo+0x5c>)
20001266:	685b      	ldr	r3, [r3, #4]
20001268:	f003 0301 	and.w	r3, r3, #1
2000126c:	60bb      	str	r3, [r7, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:732
    while((tx_okay != 0u) && (size_sent < cmd_size))
2000126e:	68bb      	ldr	r3, [r7, #8]
20001270:	2b00      	cmp	r3, #0
20001272:	d003      	beq.n	2000127c <fill_tx_fifo+0x50>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:732 (discriminator 1)
20001274:	68fa      	ldr	r2, [r7, #12]
20001276:	683b      	ldr	r3, [r7, #0]
20001278:	429a      	cmp	r2, r3
2000127a:	d3ea      	bcc.n	20001252 <fill_tx_fifo+0x26>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:739
    }
    
    return size_sent;
2000127c:	68fb      	ldr	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:740
}
2000127e:	4618      	mov	r0, r3
20001280:	3714      	adds	r7, #20
20001282:	46bd      	mov	sp, r7
20001284:	bc80      	pop	{r7}
20001286:	4770      	bx	lr
20001288:	40016000 	.word	0x40016000

2000128c <process_sys_ctrl_command>:
process_sys_ctrl_command():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:746

/*==============================================================================
 *
 */
static void process_sys_ctrl_command(uint8_t cmd_opcode)
{
2000128c:	b580      	push	{r7, lr}
2000128e:	b082      	sub	sp, #8
20001290:	af00      	add	r7, sp, #0
20001292:	4603      	mov	r3, r0
20001294:	71fb      	strb	r3, [r7, #7]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:747
    if(g_async_event_handler != 0)
20001296:	4b06      	ldr	r3, [pc, #24]	; (200012b0 <process_sys_ctrl_command+0x24>)
20001298:	681b      	ldr	r3, [r3, #0]
2000129a:	2b00      	cmp	r3, #0
2000129c:	d004      	beq.n	200012a8 <process_sys_ctrl_command+0x1c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:749
    {
        g_async_event_handler(cmd_opcode);
2000129e:	4b04      	ldr	r3, [pc, #16]	; (200012b0 <process_sys_ctrl_command+0x24>)
200012a0:	681b      	ldr	r3, [r3, #0]
200012a2:	79fa      	ldrb	r2, [r7, #7]
200012a4:	4610      	mov	r0, r2
200012a6:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_sys_services/mss_comblk.c:751
    }
}
200012a8:	bf00      	nop
200012aa:	3708      	adds	r7, #8
200012ac:	46bd      	mov	sp, r7
200012ae:	bd80      	pop	{r7, pc}
200012b0:	20003c64 	.word	0x20003c64

200012b4 <NVIC_EnableIRQ>:
NVIC_EnableIRQ():
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1453
{
200012b4:	b480      	push	{r7}
200012b6:	b083      	sub	sp, #12
200012b8:	af00      	add	r7, sp, #0
200012ba:	4603      	mov	r3, r0
200012bc:	71fb      	strb	r3, [r7, #7]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1454
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
200012be:	79fb      	ldrb	r3, [r7, #7]
200012c0:	f003 021f 	and.w	r2, r3, #31
200012c4:	4906      	ldr	r1, [pc, #24]	; (200012e0 <NVIC_EnableIRQ+0x2c>)
200012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
200012ca:	095b      	lsrs	r3, r3, #5
200012cc:	2001      	movs	r0, #1
200012ce:	fa00 f202 	lsl.w	r2, r0, r2
200012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1455
}
200012d6:	bf00      	nop
200012d8:	370c      	adds	r7, #12
200012da:	46bd      	mov	sp, r7
200012dc:	bc80      	pop	{r7}
200012de:	4770      	bx	lr
200012e0:	e000e100 	.word	0xe000e100

200012e4 <NVIC_DisableIRQ>:
NVIC_DisableIRQ():
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1464
{
200012e4:	b480      	push	{r7}
200012e6:	b083      	sub	sp, #12
200012e8:	af00      	add	r7, sp, #0
200012ea:	4603      	mov	r3, r0
200012ec:	71fb      	strb	r3, [r7, #7]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1465
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
200012ee:	79fb      	ldrb	r3, [r7, #7]
200012f0:	f003 021f 	and.w	r2, r3, #31
200012f4:	4907      	ldr	r1, [pc, #28]	; (20001314 <NVIC_DisableIRQ+0x30>)
200012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
200012fa:	095b      	lsrs	r3, r3, #5
200012fc:	2001      	movs	r0, #1
200012fe:	fa00 f202 	lsl.w	r2, r0, r2
20001302:	3320      	adds	r3, #32
20001304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1466
}
20001308:	bf00      	nop
2000130a:	370c      	adds	r7, #12
2000130c:	46bd      	mov	sp, r7
2000130e:	bc80      	pop	{r7}
20001310:	4770      	bx	lr
20001312:	bf00      	nop
20001314:	e000e100 	.word	0xe000e100

20001318 <NVIC_ClearPendingIRQ>:
NVIC_ClearPendingIRQ():
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1499
{
20001318:	b480      	push	{r7}
2000131a:	b083      	sub	sp, #12
2000131c:	af00      	add	r7, sp, #0
2000131e:	4603      	mov	r3, r0
20001320:	71fb      	strb	r3, [r7, #7]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1500
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
20001322:	79fb      	ldrb	r3, [r7, #7]
20001324:	f003 021f 	and.w	r2, r3, #31
20001328:	4907      	ldr	r1, [pc, #28]	; (20001348 <NVIC_ClearPendingIRQ+0x30>)
2000132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000132e:	095b      	lsrs	r3, r3, #5
20001330:	2001      	movs	r0, #1
20001332:	fa00 f202 	lsl.w	r2, r0, r2
20001336:	3360      	adds	r3, #96	; 0x60
20001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1501
}
2000133c:	bf00      	nop
2000133e:	370c      	adds	r7, #12
20001340:	46bd      	mov	sp, r7
20001342:	bc80      	pop	{r7}
20001344:	4770      	bx	lr
20001346:	bf00      	nop
20001348:	e000e100 	.word	0xe000e100

2000134c <MSS_SPI_init>:
MSS_SPI_init():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:138
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
2000134c:	b580      	push	{r7, lr}
2000134e:	b084      	sub	sp, #16
20001350:	af00      	add	r7, sp, #0
20001352:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:141
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001354:	687b      	ldr	r3, [r7, #4]
20001356:	4a31      	ldr	r2, [pc, #196]	; (2000141c <MSS_SPI_init+0xd0>)
20001358:	4293      	cmp	r3, r2
2000135a:	d004      	beq.n	20001366 <MSS_SPI_init+0x1a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:141 (discriminator 1)
2000135c:	687b      	ldr	r3, [r7, #4]
2000135e:	4a30      	ldr	r2, [pc, #192]	; (20001420 <MSS_SPI_init+0xd4>)
20001360:	4293      	cmp	r3, r2
20001362:	d000      	beq.n	20001366 <MSS_SPI_init+0x1a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:141 (discriminator 2)
20001364:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:148
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20001366:	687b      	ldr	r3, [r7, #4]
20001368:	f993 3004 	ldrsb.w	r3, [r3, #4]
2000136c:	4618      	mov	r0, r3
2000136e:	f7ff ffb9 	bl	200012e4 <NVIC_DisableIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:150

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
20001372:	2284      	movs	r2, #132	; 0x84
20001374:	2100      	movs	r1, #0
20001376:	6878      	ldr	r0, [r7, #4]
20001378:	f002 f8e4 	bl	20003544 <memset>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:152
    
    this_spi->cmd_done = 1u;
2000137c:	687b      	ldr	r3, [r7, #4]
2000137e:	2201      	movs	r2, #1
20001380:	625a      	str	r2, [r3, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:154

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
20001382:	2300      	movs	r3, #0
20001384:	81fb      	strh	r3, [r7, #14]
20001386:	e00a      	b.n	2000139e <MSS_SPI_init+0x52>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:156 (discriminator 3)
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
20001388:	89fb      	ldrh	r3, [r7, #14]
2000138a:	687a      	ldr	r2, [r7, #4]
2000138c:	3306      	adds	r3, #6
2000138e:	00db      	lsls	r3, r3, #3
20001390:	4413      	add	r3, r2
20001392:	f04f 32ff 	mov.w	r2, #4294967295
20001396:	605a      	str	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:154 (discriminator 3)
    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
20001398:	89fb      	ldrh	r3, [r7, #14]
2000139a:	3301      	adds	r3, #1
2000139c:	81fb      	strh	r3, [r7, #14]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:154 (discriminator 1)
2000139e:	89fb      	ldrh	r3, [r7, #14]
200013a0:	2b07      	cmp	r3, #7
200013a2:	d9f1      	bls.n	20001388 <MSS_SPI_init+0x3c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:159
    }

    if(this_spi == &g_mss_spi0)
200013a4:	687b      	ldr	r3, [r7, #4]
200013a6:	4a1d      	ldr	r2, [pc, #116]	; (2000141c <MSS_SPI_init+0xd0>)
200013a8:	4293      	cmp	r3, r2
200013aa:	d115      	bne.n	200013d8 <MSS_SPI_init+0x8c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:161
    {
        this_spi->hw_reg = ((SPI_TypeDef *) SPI0_BASE);
200013ac:	687b      	ldr	r3, [r7, #4]
200013ae:	4a1d      	ldr	r2, [pc, #116]	; (20001424 <MSS_SPI_init+0xd8>)
200013b0:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:162
        this_spi->irqn = SPI0_IRQn;
200013b2:	687b      	ldr	r3, [r7, #4]
200013b4:	2202      	movs	r2, #2
200013b6:	711a      	strb	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:165

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
200013b8:	4b1b      	ldr	r3, [pc, #108]	; (20001428 <MSS_SPI_init+0xdc>)
200013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200013bc:	4a1a      	ldr	r2, [pc, #104]	; (20001428 <MSS_SPI_init+0xdc>)
200013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
200013c2:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:167
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
200013c4:	2002      	movs	r0, #2
200013c6:	f7ff ffa7 	bl	20001318 <NVIC_ClearPendingIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:169
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
200013ca:	4b17      	ldr	r3, [pc, #92]	; (20001428 <MSS_SPI_init+0xdc>)
200013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200013ce:	4a16      	ldr	r2, [pc, #88]	; (20001428 <MSS_SPI_init+0xdc>)
200013d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
200013d4:	6493      	str	r3, [r2, #72]	; 0x48
200013d6:	e014      	b.n	20001402 <MSS_SPI_init+0xb6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:173
    }
    else
    {
        this_spi->hw_reg = ((SPI_TypeDef *) SPI1_BASE);
200013d8:	687b      	ldr	r3, [r7, #4]
200013da:	4a14      	ldr	r2, [pc, #80]	; (2000142c <MSS_SPI_init+0xe0>)
200013dc:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:174
        this_spi->irqn = SPI1_IRQn;
200013de:	687b      	ldr	r3, [r7, #4]
200013e0:	2203      	movs	r2, #3
200013e2:	711a      	strb	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:177
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
200013e4:	4b10      	ldr	r3, [pc, #64]	; (20001428 <MSS_SPI_init+0xdc>)
200013e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200013e8:	4a0f      	ldr	r2, [pc, #60]	; (20001428 <MSS_SPI_init+0xdc>)
200013ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
200013ee:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:179
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
200013f0:	2003      	movs	r0, #3
200013f2:	f7ff ff91 	bl	20001318 <NVIC_ClearPendingIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:181
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
200013f6:	4b0c      	ldr	r3, [pc, #48]	; (20001428 <MSS_SPI_init+0xdc>)
200013f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200013fa:	4a0b      	ldr	r2, [pc, #44]	; (20001428 <MSS_SPI_init+0xdc>)
200013fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
20001400:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:185
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20001402:	687b      	ldr	r3, [r7, #4]
20001404:	681b      	ldr	r3, [r3, #0]
20001406:	681a      	ldr	r2, [r3, #0]
20001408:	687b      	ldr	r3, [r7, #4]
2000140a:	681b      	ldr	r3, [r3, #0]
2000140c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20001410:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:186
}
20001412:	bf00      	nop
20001414:	3710      	adds	r7, #16
20001416:	46bd      	mov	sp, r7
20001418:	bd80      	pop	{r7, pc}
2000141a:	bf00      	nop
2000141c:	20003da0 	.word	0x20003da0
20001420:	20003d1c 	.word	0x20003d1c
20001424:	40001000 	.word	0x40001000
20001428:	40038000 	.word	0x40038000
2000142c:	40011000 	.word	0x40011000

20001430 <recover_from_rx_overflow>:
recover_from_rx_overflow():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:196
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
20001430:	b580      	push	{r7, lr}
20001432:	b08a      	sub	sp, #40	; 0x28
20001434:	af00      	add	r7, sp, #0
20001436:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:208
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
20001438:	687b      	ldr	r3, [r7, #4]
2000143a:	681b      	ldr	r3, [r3, #0]
2000143c:	681b      	ldr	r3, [r3, #0]
2000143e:	627b      	str	r3, [r7, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:209
    clk_gen = this_spi->hw_reg->CLK_GEN;
20001440:	687b      	ldr	r3, [r7, #4]
20001442:	681b      	ldr	r3, [r3, #0]
20001444:	699b      	ldr	r3, [r3, #24]
20001446:	623b      	str	r3, [r7, #32]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:210
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
20001448:	687b      	ldr	r3, [r7, #4]
2000144a:	681b      	ldr	r3, [r3, #0]
2000144c:	685b      	ldr	r3, [r3, #4]
2000144e:	61fb      	str	r3, [r7, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:211
    control2 = this_spi->hw_reg->CONTROL2;
20001450:	687b      	ldr	r3, [r7, #4]
20001452:	681b      	ldr	r3, [r3, #0]
20001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20001456:	61bb      	str	r3, [r7, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:212
    packet_size = this_spi->hw_reg->PKTSIZE;
20001458:	687b      	ldr	r3, [r7, #4]
2000145a:	681b      	ldr	r3, [r3, #0]
2000145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000145e:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:213
    cmd_size = this_spi->hw_reg->CMDSIZE;
20001460:	687b      	ldr	r3, [r7, #4]
20001462:	681b      	ldr	r3, [r3, #0]
20001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001466:	613b      	str	r3, [r7, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:214
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
20001468:	687b      	ldr	r3, [r7, #4]
2000146a:	681b      	ldr	r3, [r3, #0]
2000146c:	69db      	ldr	r3, [r3, #28]
2000146e:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:219
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
20001470:	687b      	ldr	r3, [r7, #4]
20001472:	4a35      	ldr	r2, [pc, #212]	; (20001548 <recover_from_rx_overflow+0x118>)
20001474:	4293      	cmp	r3, r2
20001476:	d11d      	bne.n	200014b4 <recover_from_rx_overflow+0x84>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:221
    {
        this_spi->hw_reg = ((SPI_TypeDef *) SPI0_BASE);
20001478:	687b      	ldr	r3, [r7, #4]
2000147a:	4a34      	ldr	r2, [pc, #208]	; (2000154c <recover_from_rx_overflow+0x11c>)
2000147c:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:222
        this_spi->irqn = SPI0_IRQn;
2000147e:	687b      	ldr	r3, [r7, #4]
20001480:	2202      	movs	r2, #2
20001482:	711a      	strb	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:225

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20001484:	4b32      	ldr	r3, [pc, #200]	; (20001550 <recover_from_rx_overflow+0x120>)
20001486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001488:	4a31      	ldr	r2, [pc, #196]	; (20001550 <recover_from_rx_overflow+0x120>)
2000148a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000148e:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:227
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
20001490:	2002      	movs	r0, #2
20001492:	f7ff ff41 	bl	20001318 <NVIC_ClearPendingIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:229
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20001496:	4b2e      	ldr	r3, [pc, #184]	; (20001550 <recover_from_rx_overflow+0x120>)
20001498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000149a:	4a2d      	ldr	r2, [pc, #180]	; (20001550 <recover_from_rx_overflow+0x120>)
2000149c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
200014a0:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:231

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
200014a2:	687b      	ldr	r3, [r7, #4]
200014a4:	681b      	ldr	r3, [r3, #0]
200014a6:	681a      	ldr	r2, [r3, #0]
200014a8:	687b      	ldr	r3, [r7, #4]
200014aa:	681b      	ldr	r3, [r3, #0]
200014ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
200014b0:	601a      	str	r2, [r3, #0]
200014b2:	e01c      	b.n	200014ee <recover_from_rx_overflow+0xbe>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:235
    }
    else
    {
        this_spi->hw_reg = ((SPI_TypeDef *) SPI1_BASE);
200014b4:	687b      	ldr	r3, [r7, #4]
200014b6:	4a27      	ldr	r2, [pc, #156]	; (20001554 <recover_from_rx_overflow+0x124>)
200014b8:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:236
        this_spi->irqn = SPI1_IRQn;
200014ba:	687b      	ldr	r3, [r7, #4]
200014bc:	2203      	movs	r2, #3
200014be:	711a      	strb	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:239
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
200014c0:	4b23      	ldr	r3, [pc, #140]	; (20001550 <recover_from_rx_overflow+0x120>)
200014c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200014c4:	4a22      	ldr	r2, [pc, #136]	; (20001550 <recover_from_rx_overflow+0x120>)
200014c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
200014ca:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:241
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
200014cc:	2003      	movs	r0, #3
200014ce:	f7ff ff23 	bl	20001318 <NVIC_ClearPendingIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:243
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
200014d2:	4b1f      	ldr	r3, [pc, #124]	; (20001550 <recover_from_rx_overflow+0x120>)
200014d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200014d6:	4a1e      	ldr	r2, [pc, #120]	; (20001550 <recover_from_rx_overflow+0x120>)
200014d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
200014dc:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:245
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
200014de:	687b      	ldr	r3, [r7, #4]
200014e0:	681b      	ldr	r3, [r3, #0]
200014e2:	681a      	ldr	r2, [r3, #0]
200014e4:	687b      	ldr	r3, [r7, #4]
200014e6:	681b      	ldr	r3, [r3, #0]
200014e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
200014ec:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:251
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
200014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014f0:	f023 0301 	bic.w	r3, r3, #1
200014f4:	627b      	str	r3, [r7, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:252
    this_spi->hw_reg->CONTROL = control_reg;
200014f6:	687b      	ldr	r3, [r7, #4]
200014f8:	681b      	ldr	r3, [r3, #0]
200014fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200014fc:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:253
    this_spi->hw_reg->CLK_GEN = clk_gen;
200014fe:	687b      	ldr	r3, [r7, #4]
20001500:	681b      	ldr	r3, [r3, #0]
20001502:	6a3a      	ldr	r2, [r7, #32]
20001504:	619a      	str	r2, [r3, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:254
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
20001506:	687b      	ldr	r3, [r7, #4]
20001508:	681b      	ldr	r3, [r3, #0]
2000150a:	69fa      	ldr	r2, [r7, #28]
2000150c:	605a      	str	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:255
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
2000150e:	687b      	ldr	r3, [r7, #4]
20001510:	681b      	ldr	r3, [r3, #0]
20001512:	681a      	ldr	r2, [r3, #0]
20001514:	687b      	ldr	r3, [r7, #4]
20001516:	681b      	ldr	r3, [r3, #0]
20001518:	f042 0201 	orr.w	r2, r2, #1
2000151c:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:256
    this_spi->hw_reg->CONTROL2 = control2;
2000151e:	687b      	ldr	r3, [r7, #4]
20001520:	681b      	ldr	r3, [r3, #0]
20001522:	69ba      	ldr	r2, [r7, #24]
20001524:	629a      	str	r2, [r3, #40]	; 0x28
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:257
    this_spi->hw_reg->PKTSIZE = packet_size;
20001526:	687b      	ldr	r3, [r7, #4]
20001528:	681b      	ldr	r3, [r3, #0]
2000152a:	697a      	ldr	r2, [r7, #20]
2000152c:	631a      	str	r2, [r3, #48]	; 0x30
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:258
    this_spi->hw_reg->CMDSIZE = cmd_size;
2000152e:	687b      	ldr	r3, [r7, #4]
20001530:	681b      	ldr	r3, [r3, #0]
20001532:	693a      	ldr	r2, [r7, #16]
20001534:	635a      	str	r2, [r3, #52]	; 0x34
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:259
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
20001536:	687b      	ldr	r3, [r7, #4]
20001538:	681b      	ldr	r3, [r3, #0]
2000153a:	68fa      	ldr	r2, [r7, #12]
2000153c:	61da      	str	r2, [r3, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:260
}
2000153e:	bf00      	nop
20001540:	3728      	adds	r7, #40	; 0x28
20001542:	46bd      	mov	sp, r7
20001544:	bd80      	pop	{r7, pc}
20001546:	bf00      	nop
20001548:	20003da0 	.word	0x20003da0
2000154c:	40001000 	.word	0x40001000
20001550:	40038000 	.word	0x40038000
20001554:	40011000 	.word	0x40011000

20001558 <MSS_SPI_configure_master_mode>:
MSS_SPI_configure_master_mode():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:311
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    uint32_t                clk_div,
    uint8_t                 frame_bit_length
)
{
20001558:	b580      	push	{r7, lr}
2000155a:	b086      	sub	sp, #24
2000155c:	af00      	add	r7, sp, #0
2000155e:	60f8      	str	r0, [r7, #12]
20001560:	607a      	str	r2, [r7, #4]
20001562:	603b      	str	r3, [r7, #0]
20001564:	460b      	mov	r3, r1
20001566:	72fb      	strb	r3, [r7, #11]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:312
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001568:	68fb      	ldr	r3, [r7, #12]
2000156a:	4a45      	ldr	r2, [pc, #276]	; (20001680 <MSS_SPI_configure_master_mode+0x128>)
2000156c:	4293      	cmp	r3, r2
2000156e:	d004      	beq.n	2000157a <MSS_SPI_configure_master_mode+0x22>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:312 (discriminator 1)
20001570:	68fb      	ldr	r3, [r7, #12]
20001572:	4a44      	ldr	r2, [pc, #272]	; (20001684 <MSS_SPI_configure_master_mode+0x12c>)
20001574:	4293      	cmp	r3, r2
20001576:	d000      	beq.n	2000157a <MSS_SPI_configure_master_mode+0x22>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:312 (discriminator 2)
20001578:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:313
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
2000157a:	7afb      	ldrb	r3, [r7, #11]
2000157c:	2b07      	cmp	r3, #7
2000157e:	d900      	bls.n	20001582 <MSS_SPI_configure_master_mode+0x2a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:313 (discriminator 1)
20001580:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:314
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
20001582:	f897 3020 	ldrb.w	r3, [r7, #32]
20001586:	2b20      	cmp	r3, #32
20001588:	d900      	bls.n	2000158c <MSS_SPI_configure_master_mode+0x34>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:314 (discriminator 1)
2000158a:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:316
     /* Check that the requested clock divider is within range and an even number. */
    ASSERT(clk_div >= 2u);
2000158c:	683b      	ldr	r3, [r7, #0]
2000158e:	2b01      	cmp	r3, #1
20001590:	d800      	bhi.n	20001594 <MSS_SPI_configure_master_mode+0x3c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:316 (discriminator 1)
20001592:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:317
    ASSERT(clk_div <= 512u);
20001594:	683b      	ldr	r3, [r7, #0]
20001596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2000159a:	d900      	bls.n	2000159e <MSS_SPI_configure_master_mode+0x46>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:317 (discriminator 1)
2000159c:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:318
    ASSERT(0u == (clk_div & 0x00000001));
2000159e:	683b      	ldr	r3, [r7, #0]
200015a0:	f003 0301 	and.w	r3, r3, #1
200015a4:	2b00      	cmp	r3, #0
200015a6:	d000      	beq.n	200015aa <MSS_SPI_configure_master_mode+0x52>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:318 (discriminator 1)
200015a8:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:321
   
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
200015aa:	68fb      	ldr	r3, [r7, #12]
200015ac:	f993 3004 	ldrsb.w	r3, [r3, #4]
200015b0:	4618      	mov	r0, r3
200015b2:	f7ff fe97 	bl	200012e4 <NVIC_DisableIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:324

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
200015b6:	68fb      	ldr	r3, [r7, #12]
200015b8:	2200      	movs	r2, #0
200015ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:327

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
200015be:	68fb      	ldr	r3, [r7, #12]
200015c0:	681b      	ldr	r3, [r3, #0]
200015c2:	681a      	ldr	r2, [r3, #0]
200015c4:	68fb      	ldr	r3, [r7, #12]
200015c6:	681b      	ldr	r3, [r3, #0]
200015c8:	f022 0201 	bic.w	r2, r2, #1
200015cc:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:328
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
200015ce:	68fb      	ldr	r3, [r7, #12]
200015d0:	681b      	ldr	r3, [r3, #0]
200015d2:	681a      	ldr	r2, [r3, #0]
200015d4:	68fb      	ldr	r3, [r7, #12]
200015d6:	681b      	ldr	r3, [r3, #0]
200015d8:	f042 0202 	orr.w	r2, r2, #2
200015dc:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:329
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
200015de:	68fb      	ldr	r3, [r7, #12]
200015e0:	681b      	ldr	r3, [r3, #0]
200015e2:	681a      	ldr	r2, [r3, #0]
200015e4:	68fb      	ldr	r3, [r7, #12]
200015e6:	681b      	ldr	r3, [r3, #0]
200015e8:	f042 0201 	orr.w	r2, r2, #1
200015ec:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:336
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
200015ee:	7afb      	ldrb	r3, [r7, #11]
200015f0:	2b07      	cmp	r3, #7
200015f2:	d83a      	bhi.n	2000166a <MSS_SPI_configure_master_mode+0x112>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:345
        * Setting the SPS bit ensures the slave select remains asserted even
        * if we don't keep the TX FIFO filled in block mode. We only do it for
        * Motorola modes and if you need the slave selected deselected between
        * frames in modes 0 or 2 then remove SPS_MASK from below.
        */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
200015f4:	687b      	ldr	r3, [r7, #4]
200015f6:	2b00      	cmp	r3, #0
200015f8:	d00b      	beq.n	20001612 <MSS_SPI_configure_master_mode+0xba>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:345 (discriminator 1)
200015fa:	687b      	ldr	r3, [r7, #4]
200015fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20001600:	d007      	beq.n	20001612 <MSS_SPI_configure_master_mode+0xba>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:345 (discriminator 2)
20001602:	687b      	ldr	r3, [r7, #4]
20001604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20001608:	d003      	beq.n	20001612 <MSS_SPI_configure_master_mode+0xba>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:346
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
2000160a:	687b      	ldr	r3, [r7, #4]
2000160c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
20001610:	d10b      	bne.n	2000162a <MSS_SPI_configure_master_mode+0xd2>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:348
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
20001612:	7afb      	ldrb	r3, [r7, #11]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:350
                                                   BIGFIFO_MASK | CTRL_CLKMODE_MASK |
                                                   (uint32_t)protocol_mode | 
20001614:	687a      	ldr	r2, [r7, #4]
20001616:	f042 5250 	orr.w	r2, r2, #872415232	; 0x34000000
2000161a:	f442 7281 	orr.w	r2, r2, #258	; 0x102
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:348
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
2000161e:	68f9      	ldr	r1, [r7, #12]
20001620:	3306      	adds	r3, #6
20001622:	00db      	lsls	r3, r3, #3
20001624:	440b      	add	r3, r1
20001626:	605a      	str	r2, [r3, #4]
20001628:	e00a      	b.n	20001640 <MSS_SPI_configure_master_mode+0xe8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:355
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
2000162a:	7afb      	ldrb	r3, [r7, #11]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:357
                                                   BIGFIFO_MASK | CTRL_CLKMODE_MASK |
                                                   (uint32_t)protocol_mode | 
2000162c:	687a      	ldr	r2, [r7, #4]
2000162e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
20001632:	f442 7281 	orr.w	r2, r2, #258	; 0x102
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:355
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
20001636:	68f9      	ldr	r1, [r7, #12]
20001638:	3306      	adds	r3, #6
2000163a:	00db      	lsls	r3, r3, #3
2000163c:	440b      	add	r3, r1
2000163e:	605a      	str	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:360
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
20001640:	7afb      	ldrb	r3, [r7, #11]
20001642:	68fa      	ldr	r2, [r7, #12]
20001644:	3306      	adds	r3, #6
20001646:	00db      	lsls	r3, r3, #3
20001648:	4413      	add	r3, r2
2000164a:	f897 2020 	ldrb.w	r2, [r7, #32]
2000164e:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:362

        clk_gen = (clk_div / 2u) - 1u;
20001650:	683b      	ldr	r3, [r7, #0]
20001652:	085b      	lsrs	r3, r3, #1
20001654:	3b01      	subs	r3, #1
20001656:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:363
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_gen;
20001658:	7afb      	ldrb	r3, [r7, #11]
2000165a:	697a      	ldr	r2, [r7, #20]
2000165c:	b2d1      	uxtb	r1, r2
2000165e:	68fa      	ldr	r2, [r7, #12]
20001660:	3306      	adds	r3, #6
20001662:	00db      	lsls	r3, r3, #3
20001664:	4413      	add	r3, r2
20001666:	460a      	mov	r2, r1
20001668:	725a      	strb	r2, [r3, #9]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:366
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
2000166a:	68fb      	ldr	r3, [r7, #12]
2000166c:	f993 3004 	ldrsb.w	r3, [r3, #4]
20001670:	4618      	mov	r0, r3
20001672:	f7ff fe1f 	bl	200012b4 <NVIC_EnableIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:367
}
20001676:	bf00      	nop
20001678:	3718      	adds	r7, #24
2000167a:	46bd      	mov	sp, r7
2000167c:	bd80      	pop	{r7, pc}
2000167e:	bf00      	nop
20001680:	20003da0 	.word	0x20003da0
20001684:	20003d1c 	.word	0x20003d1c

20001688 <MSS_SPI_set_slave_select>:
MSS_SPI_set_slave_select():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:378
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20001688:	b580      	push	{r7, lr}
2000168a:	b084      	sub	sp, #16
2000168c:	af00      	add	r7, sp, #0
2000168e:	6078      	str	r0, [r7, #4]
20001690:	460b      	mov	r3, r1
20001692:	70fb      	strb	r3, [r7, #3]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:381
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001694:	687b      	ldr	r3, [r7, #4]
20001696:	4a35      	ldr	r2, [pc, #212]	; (2000176c <MSS_SPI_set_slave_select+0xe4>)
20001698:	4293      	cmp	r3, r2
2000169a:	d004      	beq.n	200016a6 <MSS_SPI_set_slave_select+0x1e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:381 (discriminator 1)
2000169c:	687b      	ldr	r3, [r7, #4]
2000169e:	4a34      	ldr	r2, [pc, #208]	; (20001770 <MSS_SPI_set_slave_select+0xe8>)
200016a0:	4293      	cmp	r3, r2
200016a2:	d000      	beq.n	200016a6 <MSS_SPI_set_slave_select+0x1e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:381 (discriminator 2)
200016a4:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:384
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
200016a6:	687b      	ldr	r3, [r7, #4]
200016a8:	681b      	ldr	r3, [r3, #0]
200016aa:	681b      	ldr	r3, [r3, #0]
200016ac:	f003 0302 	and.w	r3, r3, #2
200016b0:	2b02      	cmp	r3, #2
200016b2:	d000      	beq.n	200016b6 <MSS_SPI_set_slave_select+0x2e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:384 (discriminator 1)
200016b4:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:386
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
200016b6:	78fb      	ldrb	r3, [r7, #3]
200016b8:	687a      	ldr	r2, [r7, #4]
200016ba:	3306      	adds	r3, #6
200016bc:	00db      	lsls	r3, r3, #3
200016be:	4413      	add	r3, r2
200016c0:	685b      	ldr	r3, [r3, #4]
200016c2:	f1b3 3fff 	cmp.w	r3, #4294967295
200016c6:	d100      	bne.n	200016ca <MSS_SPI_set_slave_select+0x42>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:386 (discriminator 1)
200016c8:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:389

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
200016ca:	687b      	ldr	r3, [r7, #4]
200016cc:	f993 3004 	ldrsb.w	r3, [r3, #4]
200016d0:	4618      	mov	r0, r3
200016d2:	f7ff fe07 	bl	200012e4 <NVIC_DisableIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:392

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
200016d6:	687b      	ldr	r3, [r7, #4]
200016d8:	681b      	ldr	r3, [r3, #0]
200016da:	689b      	ldr	r3, [r3, #8]
200016dc:	f003 0304 	and.w	r3, r3, #4
200016e0:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:393
    if(rx_overflow)
200016e2:	68fb      	ldr	r3, [r7, #12]
200016e4:	2b00      	cmp	r3, #0
200016e6:	d002      	beq.n	200016ee <MSS_SPI_set_slave_select+0x66>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:395
    {
         recover_from_rx_overflow(this_spi);
200016e8:	6878      	ldr	r0, [r7, #4]
200016ea:	f7ff fea1 	bl	20001430 <recover_from_rx_overflow>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:399
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
200016ee:	687b      	ldr	r3, [r7, #4]
200016f0:	681b      	ldr	r3, [r3, #0]
200016f2:	681a      	ldr	r2, [r3, #0]
200016f4:	687b      	ldr	r3, [r7, #4]
200016f6:	681b      	ldr	r3, [r3, #0]
200016f8:	f022 0201 	bic.w	r2, r2, #1
200016fc:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:400
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
200016fe:	78fb      	ldrb	r3, [r7, #3]
20001700:	687a      	ldr	r2, [r7, #4]
20001702:	6812      	ldr	r2, [r2, #0]
20001704:	6879      	ldr	r1, [r7, #4]
20001706:	3306      	adds	r3, #6
20001708:	00db      	lsls	r3, r3, #3
2000170a:	440b      	add	r3, r1
2000170c:	685b      	ldr	r3, [r3, #4]
2000170e:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:401
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
20001710:	78fb      	ldrb	r3, [r7, #3]
20001712:	687a      	ldr	r2, [r7, #4]
20001714:	3306      	adds	r3, #6
20001716:	00db      	lsls	r3, r3, #3
20001718:	4413      	add	r3, r2
2000171a:	7a5a      	ldrb	r2, [r3, #9]
2000171c:	687b      	ldr	r3, [r7, #4]
2000171e:	681b      	ldr	r3, [r3, #0]
20001720:	619a      	str	r2, [r3, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:402
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
20001722:	78fb      	ldrb	r3, [r7, #3]
20001724:	687a      	ldr	r2, [r7, #4]
20001726:	3306      	adds	r3, #6
20001728:	00db      	lsls	r3, r3, #3
2000172a:	4413      	add	r3, r2
2000172c:	7a1a      	ldrb	r2, [r3, #8]
2000172e:	687b      	ldr	r3, [r7, #4]
20001730:	681b      	ldr	r3, [r3, #0]
20001732:	605a      	str	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:403
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001734:	687b      	ldr	r3, [r7, #4]
20001736:	681b      	ldr	r3, [r3, #0]
20001738:	681a      	ldr	r2, [r3, #0]
2000173a:	687b      	ldr	r3, [r7, #4]
2000173c:	681b      	ldr	r3, [r3, #0]
2000173e:	f042 0201 	orr.w	r2, r2, #1
20001742:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:406
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
20001744:	687b      	ldr	r3, [r7, #4]
20001746:	681b      	ldr	r3, [r3, #0]
20001748:	69d9      	ldr	r1, [r3, #28]
2000174a:	78fb      	ldrb	r3, [r7, #3]
2000174c:	2201      	movs	r2, #1
2000174e:	409a      	lsls	r2, r3
20001750:	687b      	ldr	r3, [r7, #4]
20001752:	681b      	ldr	r3, [r3, #0]
20001754:	430a      	orrs	r2, r1
20001756:	61da      	str	r2, [r3, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:408
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001758:	687b      	ldr	r3, [r7, #4]
2000175a:	f993 3004 	ldrsb.w	r3, [r3, #4]
2000175e:	4618      	mov	r0, r3
20001760:	f7ff fda8 	bl	200012b4 <NVIC_EnableIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:409
}
20001764:	bf00      	nop
20001766:	3710      	adds	r7, #16
20001768:	46bd      	mov	sp, r7
2000176a:	bd80      	pop	{r7, pc}
2000176c:	20003da0 	.word	0x20003da0
20001770:	20003d1c 	.word	0x20003d1c

20001774 <MSS_SPI_clear_slave_select>:
MSS_SPI_clear_slave_select():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:420
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20001774:	b580      	push	{r7, lr}
20001776:	b084      	sub	sp, #16
20001778:	af00      	add	r7, sp, #0
2000177a:	6078      	str	r0, [r7, #4]
2000177c:	460b      	mov	r3, r1
2000177e:	70fb      	strb	r3, [r7, #3]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:423
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001780:	687b      	ldr	r3, [r7, #4]
20001782:	4a1c      	ldr	r2, [pc, #112]	; (200017f4 <MSS_SPI_clear_slave_select+0x80>)
20001784:	4293      	cmp	r3, r2
20001786:	d004      	beq.n	20001792 <MSS_SPI_clear_slave_select+0x1e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:423 (discriminator 1)
20001788:	687b      	ldr	r3, [r7, #4]
2000178a:	4a1b      	ldr	r2, [pc, #108]	; (200017f8 <MSS_SPI_clear_slave_select+0x84>)
2000178c:	4293      	cmp	r3, r2
2000178e:	d000      	beq.n	20001792 <MSS_SPI_clear_slave_select+0x1e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:423 (discriminator 2)
20001790:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:426
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001792:	687b      	ldr	r3, [r7, #4]
20001794:	681b      	ldr	r3, [r3, #0]
20001796:	681b      	ldr	r3, [r3, #0]
20001798:	f003 0302 	and.w	r3, r3, #2
2000179c:	2b02      	cmp	r3, #2
2000179e:	d000      	beq.n	200017a2 <MSS_SPI_clear_slave_select+0x2e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:426 (discriminator 1)
200017a0:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:429

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
200017a2:	687b      	ldr	r3, [r7, #4]
200017a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
200017a8:	4618      	mov	r0, r3
200017aa:	f7ff fd9b 	bl	200012e4 <NVIC_DisableIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:432

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
200017ae:	687b      	ldr	r3, [r7, #4]
200017b0:	681b      	ldr	r3, [r3, #0]
200017b2:	689b      	ldr	r3, [r3, #8]
200017b4:	f003 0304 	and.w	r3, r3, #4
200017b8:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:433
    if(rx_overflow)
200017ba:	68fb      	ldr	r3, [r7, #12]
200017bc:	2b00      	cmp	r3, #0
200017be:	d002      	beq.n	200017c6 <MSS_SPI_clear_slave_select+0x52>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:435
    {
         recover_from_rx_overflow(this_spi);
200017c0:	6878      	ldr	r0, [r7, #4]
200017c2:	f7ff fe35 	bl	20001430 <recover_from_rx_overflow>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:438
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
200017c6:	687b      	ldr	r3, [r7, #4]
200017c8:	681b      	ldr	r3, [r3, #0]
200017ca:	69d9      	ldr	r1, [r3, #28]
200017cc:	78fb      	ldrb	r3, [r7, #3]
200017ce:	2201      	movs	r2, #1
200017d0:	fa02 f303 	lsl.w	r3, r2, r3
200017d4:	43da      	mvns	r2, r3
200017d6:	687b      	ldr	r3, [r7, #4]
200017d8:	681b      	ldr	r3, [r3, #0]
200017da:	400a      	ands	r2, r1
200017dc:	61da      	str	r2, [r3, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:440
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
200017de:	687b      	ldr	r3, [r7, #4]
200017e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
200017e4:	4618      	mov	r0, r3
200017e6:	f7ff fd65 	bl	200012b4 <NVIC_EnableIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:441
}
200017ea:	bf00      	nop
200017ec:	3710      	adds	r7, #16
200017ee:	46bd      	mov	sp, r7
200017f0:	bd80      	pop	{r7, pc}
200017f2:	bf00      	nop
200017f4:	20003da0 	.word	0x20003da0
200017f8:	20003d1c 	.word	0x20003d1c

200017fc <MSS_SPI_transfer_block>:
MSS_SPI_transfer_block():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:502
    const uint8_t * cmd_buffer,
    uint16_t cmd_byte_size,
    uint8_t * rd_buffer,
    uint16_t rd_byte_size
)
{
200017fc:	b580      	push	{r7, lr}
200017fe:	b08e      	sub	sp, #56	; 0x38
20001800:	af00      	add	r7, sp, #0
20001802:	60f8      	str	r0, [r7, #12]
20001804:	60b9      	str	r1, [r7, #8]
20001806:	603b      	str	r3, [r7, #0]
20001808:	4613      	mov	r3, r2
2000180a:	80fb      	strh	r3, [r7, #6]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:503
    uint16_t transfer_idx = 0u;
2000180c:	2300      	movs	r3, #0
2000180e:	86fb      	strh	r3, [r7, #54]	; 0x36
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:508
    uint16_t tx_idx;
    uint16_t rx_idx;
    uint32_t frame_count;
    volatile uint32_t rx_raw;
    uint16_t transit = 0u;
20001810:	2300      	movs	r3, #0
20001812:	857b      	strh	r3, [r7, #42]	; 0x2a
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:515
    uint32_t rx_overflow;
    uint32_t rx_fifo_empty;
    
    uint16_t transfer_size;     /* Total number of bytes transfered. */
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001814:	68fb      	ldr	r3, [r7, #12]
20001816:	4a74      	ldr	r2, [pc, #464]	; (200019e8 <MSS_SPI_transfer_block+0x1ec>)
20001818:	4293      	cmp	r3, r2
2000181a:	d004      	beq.n	20001826 <MSS_SPI_transfer_block+0x2a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:515 (discriminator 1)
2000181c:	68fb      	ldr	r3, [r7, #12]
2000181e:	4a73      	ldr	r2, [pc, #460]	; (200019ec <MSS_SPI_transfer_block+0x1f0>)
20001820:	4293      	cmp	r3, r2
20001822:	d000      	beq.n	20001826 <MSS_SPI_transfer_block+0x2a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:515 (discriminator 2)
20001824:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:518
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001826:	68fb      	ldr	r3, [r7, #12]
20001828:	681b      	ldr	r3, [r3, #0]
2000182a:	681b      	ldr	r3, [r3, #0]
2000182c:	f003 0302 	and.w	r3, r3, #2
20001830:	2b02      	cmp	r3, #2
20001832:	d000      	beq.n	20001836 <MSS_SPI_transfer_block+0x3a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:518 (discriminator 1)
20001834:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:521
    
    /* Compute number of bytes to transfer. */
    transfer_size = cmd_byte_size + rd_byte_size;
20001836:	88fa      	ldrh	r2, [r7, #6]
20001838:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
2000183c:	4413      	add	r3, r2
2000183e:	847b      	strh	r3, [r7, #34]	; 0x22
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:524
    
    /* Adjust to 1 byte transfer to cater for DMA transfers. */
    if(0u == transfer_size)
20001840:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
20001842:	2b00      	cmp	r3, #0
20001844:	d102      	bne.n	2000184c <MSS_SPI_transfer_block+0x50>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:526
    {
        frame_count = 1u;
20001846:	2301      	movs	r3, #1
20001848:	62fb      	str	r3, [r7, #44]	; 0x2c
2000184a:	e001      	b.n	20001850 <MSS_SPI_transfer_block+0x54>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:530
    }
    else
    {
        frame_count = transfer_size;
2000184c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
2000184e:	62fb      	str	r3, [r7, #44]	; 0x2c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:534
    }

    /* Flush the Tx and Rx FIFOs. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20001850:	68fb      	ldr	r3, [r7, #12]
20001852:	681b      	ldr	r3, [r3, #0]
20001854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001856:	68fb      	ldr	r3, [r7, #12]
20001858:	681b      	ldr	r3, [r3, #0]
2000185a:	f042 020c 	orr.w	r2, r2, #12
2000185e:	62da      	str	r2, [r3, #44]	; 0x2c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:537
    
    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20001860:	68fb      	ldr	r3, [r7, #12]
20001862:	681b      	ldr	r3, [r3, #0]
20001864:	689b      	ldr	r3, [r3, #8]
20001866:	f003 0304 	and.w	r3, r3, #4
2000186a:	61fb      	str	r3, [r7, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:538
    if(rx_overflow)
2000186c:	69fb      	ldr	r3, [r7, #28]
2000186e:	2b00      	cmp	r3, #0
20001870:	d002      	beq.n	20001878 <MSS_SPI_transfer_block+0x7c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:540
    {
         recover_from_rx_overflow(this_spi);
20001872:	68f8      	ldr	r0, [r7, #12]
20001874:	f7ff fddc 	bl	20001430 <recover_from_rx_overflow>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:544
    }
    
    /* Set frame size to 8 bits and the frame count to the transfer size. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20001878:	68fb      	ldr	r3, [r7, #12]
2000187a:	681b      	ldr	r3, [r3, #0]
2000187c:	681a      	ldr	r2, [r3, #0]
2000187e:	68fb      	ldr	r3, [r7, #12]
20001880:	681b      	ldr	r3, [r3, #0]
20001882:	f022 0201 	bic.w	r2, r2, #1
20001886:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:545
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK) | ( (frame_count << TXRXDFCOUNT_SHIFT) & TXRXDFCOUNT_MASK);
20001888:	68fb      	ldr	r3, [r7, #12]
2000188a:	681b      	ldr	r3, [r3, #0]
2000188c:	681b      	ldr	r3, [r3, #0]
2000188e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
20001892:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
20001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001898:	021b      	lsls	r3, r3, #8
2000189a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2000189e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
200018a2:	68f9      	ldr	r1, [r7, #12]
200018a4:	6809      	ldr	r1, [r1, #0]
200018a6:	4313      	orrs	r3, r2
200018a8:	600b      	str	r3, [r1, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:546
    this_spi->hw_reg->TXRXDF_SIZE = MSS_SPI_BLOCK_TRANSFER_FRAME_SIZE;
200018aa:	68fb      	ldr	r3, [r7, #12]
200018ac:	681b      	ldr	r3, [r3, #0]
200018ae:	2208      	movs	r2, #8
200018b0:	605a      	str	r2, [r3, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:547
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
200018b2:	68fb      	ldr	r3, [r7, #12]
200018b4:	681b      	ldr	r3, [r3, #0]
200018b6:	681a      	ldr	r2, [r3, #0]
200018b8:	68fb      	ldr	r3, [r7, #12]
200018ba:	681b      	ldr	r3, [r3, #0]
200018bc:	f042 0201 	orr.w	r2, r2, #1
200018c0:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:550

    /* Flush the receive FIFO. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
200018c2:	68fb      	ldr	r3, [r7, #12]
200018c4:	681b      	ldr	r3, [r3, #0]
200018c6:	689b      	ldr	r3, [r3, #8]
200018c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
200018cc:	627b      	str	r3, [r7, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:551
    while(0u == rx_fifo_empty)
200018ce:	e009      	b.n	200018e4 <MSS_SPI_transfer_block+0xe8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:553
    {
        rx_raw = this_spi->hw_reg->RX_DATA;
200018d0:	68fb      	ldr	r3, [r7, #12]
200018d2:	681b      	ldr	r3, [r3, #0]
200018d4:	691b      	ldr	r3, [r3, #16]
200018d6:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:554
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
200018d8:	68fb      	ldr	r3, [r7, #12]
200018da:	681b      	ldr	r3, [r3, #0]
200018dc:	689b      	ldr	r3, [r3, #8]
200018de:	f003 0340 	and.w	r3, r3, #64	; 0x40
200018e2:	627b      	str	r3, [r7, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:551
    while(0u == rx_fifo_empty)
200018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200018e6:	2b00      	cmp	r3, #0
200018e8:	d0f2      	beq.n	200018d0 <MSS_SPI_transfer_block+0xd4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:557
    }
    
    tx_idx = 0u;
200018ea:	2300      	movs	r3, #0
200018ec:	86bb      	strh	r3, [r7, #52]	; 0x34
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:558
    rx_idx = 0u;
200018ee:	2300      	movs	r3, #0
200018f0:	867b      	strh	r3, [r7, #50]	; 0x32
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:559
    if(tx_idx < cmd_byte_size)
200018f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
200018f4:	88fb      	ldrh	r3, [r7, #6]
200018f6:	429a      	cmp	r2, r3
200018f8:	d20d      	bcs.n	20001916 <MSS_SPI_transfer_block+0x11a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:561
    {
        this_spi->hw_reg->TX_DATA = cmd_buffer[tx_idx];
200018fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
200018fc:	68ba      	ldr	r2, [r7, #8]
200018fe:	4413      	add	r3, r2
20001900:	781a      	ldrb	r2, [r3, #0]
20001902:	68fb      	ldr	r3, [r7, #12]
20001904:	681b      	ldr	r3, [r3, #0]
20001906:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:562
        ++tx_idx;
20001908:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
2000190a:	3301      	adds	r3, #1
2000190c:	86bb      	strh	r3, [r7, #52]	; 0x34
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:563
        ++transit;
2000190e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
20001910:	3301      	adds	r3, #1
20001912:	857b      	strh	r3, [r7, #42]	; 0x2a
20001914:	e05f      	b.n	200019d6 <MSS_SPI_transfer_block+0x1da>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:567
    }
    else
    {
        if(tx_idx < transfer_size)
20001916:	8eba      	ldrh	r2, [r7, #52]	; 0x34
20001918:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
2000191a:	429a      	cmp	r2, r3
2000191c:	d25b      	bcs.n	200019d6 <MSS_SPI_transfer_block+0x1da>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:569
        {
            this_spi->hw_reg->TX_DATA = 0x00u;
2000191e:	68fb      	ldr	r3, [r7, #12]
20001920:	681b      	ldr	r3, [r3, #0]
20001922:	2200      	movs	r2, #0
20001924:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:570
            ++tx_idx;
20001926:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
20001928:	3301      	adds	r3, #1
2000192a:	86bb      	strh	r3, [r7, #52]	; 0x34
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:571
            ++transit;
2000192c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
2000192e:	3301      	adds	r3, #1
20001930:	857b      	strh	r3, [r7, #42]	; 0x2a
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:577
        }
    }
    /* Perform the remainder of the transfer by sending a byte every time a byte
     * has been received. This should ensure that no Rx overflow can happen in
     * case of an interrupt occurs during this function. */
    while(transfer_idx < transfer_size)
20001932:	e050      	b.n	200019d6 <MSS_SPI_transfer_block+0x1da>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:579
    {
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20001934:	68fb      	ldr	r3, [r7, #12]
20001936:	681b      	ldr	r3, [r3, #0]
20001938:	689b      	ldr	r3, [r3, #8]
2000193a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000193e:	627b      	str	r3, [r7, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:580
        if(0u == rx_fifo_empty)
20001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001942:	2b00      	cmp	r3, #0
20001944:	d11b      	bne.n	2000197e <MSS_SPI_transfer_block+0x182>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:583
        {
            /* Process received byte. */
            rx_raw = this_spi->hw_reg->RX_DATA;
20001946:	68fb      	ldr	r3, [r7, #12]
20001948:	681b      	ldr	r3, [r3, #0]
2000194a:	691b      	ldr	r3, [r3, #16]
2000194c:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:584
            if(transfer_idx >= cmd_byte_size)
2000194e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
20001950:	88fb      	ldrh	r3, [r7, #6]
20001952:	429a      	cmp	r2, r3
20001954:	d30d      	bcc.n	20001972 <MSS_SPI_transfer_block+0x176>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:586
            {
                if(rx_idx < rd_byte_size)
20001956:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
20001958:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
2000195c:	429a      	cmp	r2, r3
2000195e:	d205      	bcs.n	2000196c <MSS_SPI_transfer_block+0x170>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:588
                {
                    rd_buffer[rx_idx] = (uint8_t)rx_raw;   
20001960:	6979      	ldr	r1, [r7, #20]
20001962:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
20001964:	683a      	ldr	r2, [r7, #0]
20001966:	4413      	add	r3, r2
20001968:	b2ca      	uxtb	r2, r1
2000196a:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:590
                }
                ++rx_idx;
2000196c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
2000196e:	3301      	adds	r3, #1
20001970:	867b      	strh	r3, [r7, #50]	; 0x32
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:592
            }
            ++transfer_idx;
20001972:	8efb      	ldrh	r3, [r7, #54]	; 0x36
20001974:	3301      	adds	r3, #1
20001976:	86fb      	strh	r3, [r7, #54]	; 0x36
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:593
            --transit;
20001978:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
2000197a:	3b01      	subs	r3, #1
2000197c:	857b      	strh	r3, [r7, #42]	; 0x2a
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:596
        }

        tx_fifo_full = this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK;
2000197e:	68fb      	ldr	r3, [r7, #12]
20001980:	681b      	ldr	r3, [r3, #0]
20001982:	689b      	ldr	r3, [r3, #8]
20001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001988:	61bb      	str	r3, [r7, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:597
        if(0u == tx_fifo_full)
2000198a:	69bb      	ldr	r3, [r7, #24]
2000198c:	2b00      	cmp	r3, #0
2000198e:	d122      	bne.n	200019d6 <MSS_SPI_transfer_block+0x1da>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:599
        {
            if(transit < RX_FIFO_SIZE)
20001990:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
20001992:	2b03      	cmp	r3, #3
20001994:	d81f      	bhi.n	200019d6 <MSS_SPI_transfer_block+0x1da>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:602
            {
                /* Send another byte. */
                if(tx_idx < cmd_byte_size)
20001996:	8eba      	ldrh	r2, [r7, #52]	; 0x34
20001998:	88fb      	ldrh	r3, [r7, #6]
2000199a:	429a      	cmp	r2, r3
2000199c:	d20d      	bcs.n	200019ba <MSS_SPI_transfer_block+0x1be>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:604
                {
                    this_spi->hw_reg->TX_DATA = cmd_buffer[tx_idx];
2000199e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
200019a0:	68ba      	ldr	r2, [r7, #8]
200019a2:	4413      	add	r3, r2
200019a4:	781a      	ldrb	r2, [r3, #0]
200019a6:	68fb      	ldr	r3, [r7, #12]
200019a8:	681b      	ldr	r3, [r3, #0]
200019aa:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:605
                    ++tx_idx;
200019ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
200019ae:	3301      	adds	r3, #1
200019b0:	86bb      	strh	r3, [r7, #52]	; 0x34
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:606
                    ++transit;
200019b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
200019b4:	3301      	adds	r3, #1
200019b6:	857b      	strh	r3, [r7, #42]	; 0x2a
200019b8:	e00d      	b.n	200019d6 <MSS_SPI_transfer_block+0x1da>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:610
                }
                else
                {
                    if(tx_idx < transfer_size)
200019ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
200019bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
200019be:	429a      	cmp	r2, r3
200019c0:	d209      	bcs.n	200019d6 <MSS_SPI_transfer_block+0x1da>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:612
                    {
                        this_spi->hw_reg->TX_DATA = 0x00u;
200019c2:	68fb      	ldr	r3, [r7, #12]
200019c4:	681b      	ldr	r3, [r3, #0]
200019c6:	2200      	movs	r2, #0
200019c8:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:613
                        ++tx_idx;
200019ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
200019cc:	3301      	adds	r3, #1
200019ce:	86bb      	strh	r3, [r7, #52]	; 0x34
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:614
                        ++transit;
200019d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
200019d2:	3301      	adds	r3, #1
200019d4:	857b      	strh	r3, [r7, #42]	; 0x2a
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:577
    while(transfer_idx < transfer_size)
200019d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
200019d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
200019da:	429a      	cmp	r2, r3
200019dc:	d3aa      	bcc.n	20001934 <MSS_SPI_transfer_block+0x138>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:620
                    }
                }
            }
        }
    }
}
200019de:	bf00      	nop
200019e0:	3738      	adds	r7, #56	; 0x38
200019e2:	46bd      	mov	sp, r7
200019e4:	bd80      	pop	{r7, pc}
200019e6:	bf00      	nop
200019e8:	20003da0 	.word	0x20003da0
200019ec:	20003d1c 	.word	0x20003d1c

200019f0 <MSS_SPI_tx_done>:
MSS_SPI_tx_done():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1039
 */
uint32_t MSS_SPI_tx_done
(
    mss_spi_instance_t * this_spi
)
{
200019f0:	b480      	push	{r7}
200019f2:	b085      	sub	sp, #20
200019f4:	af00      	add	r7, sp, #0
200019f6:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1042
    uint32_t tx_done;
    
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
200019f8:	687b      	ldr	r3, [r7, #4]
200019fa:	681b      	ldr	r3, [r3, #0]
200019fc:	689b      	ldr	r3, [r3, #8]
200019fe:	f003 0301 	and.w	r3, r3, #1
20001a02:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1044
    
    return tx_done;
20001a04:	68fb      	ldr	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1045
}
20001a06:	4618      	mov	r0, r3
20001a08:	3714      	adds	r7, #20
20001a0a:	46bd      	mov	sp, r7
20001a0c:	bc80      	pop	{r7}
20001a0e:	4770      	bx	lr

20001a10 <fill_slave_tx_fifo>:
fill_slave_tx_fifo():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1054
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20001a10:	b480      	push	{r7}
20001a12:	b085      	sub	sp, #20
20001a14:	af00      	add	r7, sp, #0
20001a16:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1055
    uint32_t guard = 0u;
20001a18:	2300      	movs	r3, #0
20001a1a:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1057

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001a1c:	e00d      	b.n	20001a3a <fill_slave_tx_fifo+0x2a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1061
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
20001a1e:	687b      	ldr	r3, [r7, #4]
20001a20:	689a      	ldr	r2, [r3, #8]
20001a22:	687b      	ldr	r3, [r7, #4]
20001a24:	691b      	ldr	r3, [r3, #16]
20001a26:	4413      	add	r3, r2
20001a28:	781a      	ldrb	r2, [r3, #0]
20001a2a:	687b      	ldr	r3, [r7, #4]
20001a2c:	681b      	ldr	r3, [r3, #0]
20001a2e:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1062
        ++this_spi->slave_tx_idx;
20001a30:	687b      	ldr	r3, [r7, #4]
20001a32:	691b      	ldr	r3, [r3, #16]
20001a34:	1c5a      	adds	r2, r3, #1
20001a36:	687b      	ldr	r3, [r7, #4]
20001a38:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1057
    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001a3a:	687b      	ldr	r3, [r7, #4]
20001a3c:	681b      	ldr	r3, [r3, #0]
20001a3e:	689b      	ldr	r3, [r3, #8]
20001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001a44:	2b00      	cmp	r3, #0
20001a46:	d105      	bne.n	20001a54 <fill_slave_tx_fifo+0x44>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1058 (discriminator 1)
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20001a48:	687b      	ldr	r3, [r7, #4]
20001a4a:	691a      	ldr	r2, [r3, #16]
20001a4c:	687b      	ldr	r3, [r7, #4]
20001a4e:	68db      	ldr	r3, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1057 (discriminator 1)
    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001a50:	429a      	cmp	r2, r3
20001a52:	d3e4      	bcc.n	20001a1e <fill_slave_tx_fifo+0xe>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1065
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
20001a54:	687b      	ldr	r3, [r7, #4]
20001a56:	691a      	ldr	r2, [r3, #16]
20001a58:	687b      	ldr	r3, [r7, #4]
20001a5a:	68db      	ldr	r3, [r3, #12]
20001a5c:	429a      	cmp	r2, r3
20001a5e:	d31b      	bcc.n	20001a98 <fill_slave_tx_fifo+0x88>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1067
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001a60:	e00d      	b.n	20001a7e <fill_slave_tx_fifo+0x6e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1071
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
20001a62:	687b      	ldr	r3, [r7, #4]
20001a64:	695a      	ldr	r2, [r3, #20]
20001a66:	687b      	ldr	r3, [r7, #4]
20001a68:	69db      	ldr	r3, [r3, #28]
20001a6a:	4413      	add	r3, r2
20001a6c:	781a      	ldrb	r2, [r3, #0]
20001a6e:	687b      	ldr	r3, [r7, #4]
20001a70:	681b      	ldr	r3, [r3, #0]
20001a72:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1072
            ++this_spi->resp_buff_tx_idx;
20001a74:	687b      	ldr	r3, [r7, #4]
20001a76:	69db      	ldr	r3, [r3, #28]
20001a78:	1c5a      	adds	r2, r3, #1
20001a7a:	687b      	ldr	r3, [r7, #4]
20001a7c:	61da      	str	r2, [r3, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1067
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001a7e:	687b      	ldr	r3, [r7, #4]
20001a80:	681b      	ldr	r3, [r3, #0]
20001a82:	689b      	ldr	r3, [r3, #8]
20001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001a88:	2b00      	cmp	r3, #0
20001a8a:	d105      	bne.n	20001a98 <fill_slave_tx_fifo+0x88>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1068 (discriminator 1)
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
20001a8c:	687b      	ldr	r3, [r7, #4]
20001a8e:	69da      	ldr	r2, [r3, #28]
20001a90:	687b      	ldr	r3, [r7, #4]
20001a92:	699b      	ldr	r3, [r3, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1067 (discriminator 1)
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001a94:	429a      	cmp	r2, r3
20001a96:	d3e4      	bcc.n	20001a62 <fill_slave_tx_fifo+0x52>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1076
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
20001a98:	687b      	ldr	r3, [r7, #4]
20001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001a9c:	2b00      	cmp	r3, #0
20001a9e:	d01d      	beq.n	20001adc <fill_slave_tx_fifo+0xcc>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1076 (discriminator 1)
20001aa0:	687b      	ldr	r3, [r7, #4]
20001aa2:	691a      	ldr	r2, [r3, #16]
20001aa4:	687b      	ldr	r3, [r7, #4]
20001aa6:	68db      	ldr	r3, [r3, #12]
20001aa8:	429a      	cmp	r2, r3
20001aaa:	d317      	bcc.n	20001adc <fill_slave_tx_fifo+0xcc>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1077 (discriminator 2)
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
20001aac:	687b      	ldr	r3, [r7, #4]
20001aae:	69da      	ldr	r2, [r3, #28]
20001ab0:	687b      	ldr	r3, [r7, #4]
20001ab2:	699b      	ldr	r3, [r3, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1076 (discriminator 2)
    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
20001ab4:	429a      	cmp	r2, r3
20001ab6:	d311      	bcc.n	20001adc <fill_slave_tx_fifo+0xcc>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1079
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001ab8:	e006      	b.n	20001ac8 <fill_slave_tx_fifo+0xb8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1083
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
20001aba:	687b      	ldr	r3, [r7, #4]
20001abc:	681b      	ldr	r3, [r3, #0]
20001abe:	2200      	movs	r2, #0
20001ac0:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1090
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
20001ac2:	68fb      	ldr	r3, [r7, #12]
20001ac4:	3301      	adds	r3, #1
20001ac6:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1079
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001ac8:	687b      	ldr	r3, [r7, #4]
20001aca:	681b      	ldr	r3, [r3, #0]
20001acc:	689b      	ldr	r3, [r3, #8]
20001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001ad2:	2b00      	cmp	r3, #0
20001ad4:	d102      	bne.n	20001adc <fill_slave_tx_fifo+0xcc>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1079 (discriminator 1)
20001ad6:	68fb      	ldr	r3, [r7, #12]
20001ad8:	2b1f      	cmp	r3, #31
20001ada:	d9ee      	bls.n	20001aba <fill_slave_tx_fifo+0xaa>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1094
        }
    }

}
20001adc:	bf00      	nop
20001ade:	3714      	adds	r7, #20
20001ae0:	46bd      	mov	sp, r7
20001ae2:	bc80      	pop	{r7}
20001ae4:	4770      	bx	lr

20001ae6 <read_slave_rx_fifo>:
read_slave_rx_fifo():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1103
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20001ae6:	b580      	push	{r7, lr}
20001ae8:	b084      	sub	sp, #16
20001aea:	af00      	add	r7, sp, #0
20001aec:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1106
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001aee:	687b      	ldr	r3, [r7, #4]
20001af0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001af4:	2b02      	cmp	r3, #2
20001af6:	d115      	bne.n	20001b24 <read_slave_rx_fifo+0x3e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1108
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001af8:	e00c      	b.n	20001b14 <read_slave_rx_fifo+0x2e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1111
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
20001afa:	687b      	ldr	r3, [r7, #4]
20001afc:	681b      	ldr	r3, [r3, #0]
20001afe:	691b      	ldr	r3, [r3, #16]
20001b00:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1112
            if(0u != this_spi->frame_rx_handler)
20001b02:	687b      	ldr	r3, [r7, #4]
20001b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001b06:	2b00      	cmp	r3, #0
20001b08:	d004      	beq.n	20001b14 <read_slave_rx_fifo+0x2e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1114
            {
                this_spi->frame_rx_handler( rx_frame );
20001b0a:	687b      	ldr	r3, [r7, #4]
20001b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001b0e:	68fa      	ldr	r2, [r7, #12]
20001b10:	4610      	mov	r0, r2
20001b12:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1108
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001b14:	687b      	ldr	r3, [r7, #4]
20001b16:	681b      	ldr	r3, [r3, #0]
20001b18:	689b      	ldr	r3, [r3, #8]
20001b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001b1e:	2b00      	cmp	r3, #0
20001b20:	d0eb      	beq.n	20001afa <read_slave_rx_fifo+0x14>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1140
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
20001b22:	e02f      	b.n	20001b84 <read_slave_rx_fifo+0x9e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1118
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20001b24:	687b      	ldr	r3, [r7, #4]
20001b26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001b2a:	2b01      	cmp	r3, #1
20001b2c:	d123      	bne.n	20001b76 <read_slave_rx_fifo+0x90>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1121
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001b2e:	e016      	b.n	20001b5e <read_slave_rx_fifo+0x78>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1123
            rx_frame = this_spi->hw_reg->RX_DATA;
20001b30:	687b      	ldr	r3, [r7, #4]
20001b32:	681b      	ldr	r3, [r3, #0]
20001b34:	691b      	ldr	r3, [r3, #16]
20001b36:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1124
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
20001b38:	687b      	ldr	r3, [r7, #4]
20001b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001b3c:	687b      	ldr	r3, [r7, #4]
20001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001b40:	429a      	cmp	r2, r3
20001b42:	d207      	bcs.n	20001b54 <read_slave_rx_fifo+0x6e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1126
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20001b44:	68f9      	ldr	r1, [r7, #12]
20001b46:	687b      	ldr	r3, [r7, #4]
20001b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001b4a:	687b      	ldr	r3, [r7, #4]
20001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001b4e:	4413      	add	r3, r2
20001b50:	b2ca      	uxtb	r2, r1
20001b52:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1129
            ++this_spi->slave_rx_idx;
20001b54:	687b      	ldr	r3, [r7, #4]
20001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001b58:	1c5a      	adds	r2, r3, #1
20001b5a:	687b      	ldr	r3, [r7, #4]
20001b5c:	631a      	str	r2, [r3, #48]	; 0x30
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1121
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001b5e:	687b      	ldr	r3, [r7, #4]
20001b60:	681b      	ldr	r3, [r3, #0]
20001b62:	689b      	ldr	r3, [r3, #8]
20001b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001b68:	2b00      	cmp	r3, #0
20001b6a:	d0e1      	beq.n	20001b30 <read_slave_rx_fifo+0x4a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1140
}
20001b6c:	e00a      	b.n	20001b84 <read_slave_rx_fifo+0x9e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1137
            rx_frame = this_spi->hw_reg->RX_DATA;
20001b6e:	687b      	ldr	r3, [r7, #4]
20001b70:	681b      	ldr	r3, [r3, #0]
20001b72:	691b      	ldr	r3, [r3, #16]
20001b74:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1135
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001b76:	687b      	ldr	r3, [r7, #4]
20001b78:	681b      	ldr	r3, [r3, #0]
20001b7a:	689b      	ldr	r3, [r3, #8]
20001b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001b80:	2b00      	cmp	r3, #0
20001b82:	d0f4      	beq.n	20001b6e <read_slave_rx_fifo+0x88>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1140
}
20001b84:	bf00      	nop
20001b86:	3710      	adds	r7, #16
20001b88:	46bd      	mov	sp, r7
20001b8a:	bd80      	pop	{r7, pc}

20001b8c <mss_spi_isr>:
mss_spi_isr():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1149
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
20001b8c:	b580      	push	{r7, lr}
20001b8e:	b086      	sub	sp, #24
20001b90:	af00      	add	r7, sp, #0
20001b92:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1151
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
20001b94:	687b      	ldr	r3, [r7, #4]
20001b96:	681b      	ldr	r3, [r3, #0]
20001b98:	3320      	adds	r3, #32
20001b9a:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1153

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001b9c:	687b      	ldr	r3, [r7, #4]
20001b9e:	4a98      	ldr	r2, [pc, #608]	; (20001e00 <mss_spi_isr+0x274>)
20001ba0:	4293      	cmp	r3, r2
20001ba2:	d004      	beq.n	20001bae <mss_spi_isr+0x22>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1153 (discriminator 1)
20001ba4:	687b      	ldr	r3, [r7, #4]
20001ba6:	4a97      	ldr	r2, [pc, #604]	; (20001e04 <mss_spi_isr+0x278>)
20001ba8:	4293      	cmp	r3, r2
20001baa:	d000      	beq.n	20001bae <mss_spi_isr+0x22>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1153 (discriminator 2)
20001bac:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1155
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
20001bae:	697b      	ldr	r3, [r7, #20]
20001bb0:	681b      	ldr	r3, [r3, #0]
20001bb2:	f003 0302 	and.w	r3, r3, #2
20001bb6:	2b00      	cmp	r3, #0
20001bb8:	d04e      	beq.n	20001c58 <mss_spi_isr+0xcc>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1157
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001bba:	687b      	ldr	r3, [r7, #4]
20001bbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001bc0:	2b02      	cmp	r3, #2
20001bc2:	d115      	bne.n	20001bf0 <mss_spi_isr+0x64>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1160
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001bc4:	e00c      	b.n	20001be0 <mss_spi_isr+0x54>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1162
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
20001bc6:	687b      	ldr	r3, [r7, #4]
20001bc8:	681b      	ldr	r3, [r3, #0]
20001bca:	691b      	ldr	r3, [r3, #16]
20001bcc:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1163
                if(0u != this_spi->frame_rx_handler)
20001bce:	687b      	ldr	r3, [r7, #4]
20001bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001bd2:	2b00      	cmp	r3, #0
20001bd4:	d004      	beq.n	20001be0 <mss_spi_isr+0x54>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1165
                {
                    this_spi->frame_rx_handler( rx_frame );
20001bd6:	687b      	ldr	r3, [r7, #4]
20001bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001bda:	68fa      	ldr	r2, [r7, #12]
20001bdc:	4610      	mov	r0, r2
20001bde:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1160
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001be0:	687b      	ldr	r3, [r7, #4]
20001be2:	681b      	ldr	r3, [r3, #0]
20001be4:	689b      	ldr	r3, [r3, #8]
20001be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001bea:	2b00      	cmp	r3, #0
20001bec:	d0eb      	beq.n	20001bc6 <mss_spi_isr+0x3a>
20001bee:	e02f      	b.n	20001c50 <mss_spi_isr+0xc4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1169
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20001bf0:	687b      	ldr	r3, [r7, #4]
20001bf2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001bf6:	2b01      	cmp	r3, #1
20001bf8:	d123      	bne.n	20001c42 <mss_spi_isr+0xb6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1172
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001bfa:	e016      	b.n	20001c2a <mss_spi_isr+0x9e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1174
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
20001bfc:	687b      	ldr	r3, [r7, #4]
20001bfe:	681b      	ldr	r3, [r3, #0]
20001c00:	691b      	ldr	r3, [r3, #16]
20001c02:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1175
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
20001c04:	687b      	ldr	r3, [r7, #4]
20001c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001c08:	687b      	ldr	r3, [r7, #4]
20001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001c0c:	429a      	cmp	r2, r3
20001c0e:	d207      	bcs.n	20001c20 <mss_spi_isr+0x94>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1177
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20001c10:	68f9      	ldr	r1, [r7, #12]
20001c12:	687b      	ldr	r3, [r7, #4]
20001c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001c16:	687b      	ldr	r3, [r7, #4]
20001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001c1a:	4413      	add	r3, r2
20001c1c:	b2ca      	uxtb	r2, r1
20001c1e:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1180
                }

                ++this_spi->slave_rx_idx;            
20001c20:	687b      	ldr	r3, [r7, #4]
20001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001c24:	1c5a      	adds	r2, r3, #1
20001c26:	687b      	ldr	r3, [r7, #4]
20001c28:	631a      	str	r2, [r3, #48]	; 0x30
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1172
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001c2a:	687b      	ldr	r3, [r7, #4]
20001c2c:	681b      	ldr	r3, [r3, #0]
20001c2e:	689b      	ldr	r3, [r3, #8]
20001c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001c34:	2b00      	cmp	r3, #0
20001c36:	d0e1      	beq.n	20001bfc <mss_spi_isr+0x70>
20001c38:	e00a      	b.n	20001c50 <mss_spi_isr+0xc4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1188
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
20001c3a:	687b      	ldr	r3, [r7, #4]
20001c3c:	681b      	ldr	r3, [r3, #0]
20001c3e:	691b      	ldr	r3, [r3, #16]
20001c40:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1186
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001c42:	687b      	ldr	r3, [r7, #4]
20001c44:	681b      	ldr	r3, [r3, #0]
20001c46:	689b      	ldr	r3, [r3, #8]
20001c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001c4c:	2b00      	cmp	r3, #0
20001c4e:	d0f4      	beq.n	20001c3a <mss_spi_isr+0xae>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1192
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
20001c50:	687b      	ldr	r3, [r7, #4]
20001c52:	681b      	ldr	r3, [r3, #0]
20001c54:	2202      	movs	r2, #2
20001c56:	60da      	str	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1196
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
20001c58:	697b      	ldr	r3, [r7, #20]
20001c5a:	681b      	ldr	r3, [r3, #0]
20001c5c:	f003 0301 	and.w	r3, r3, #1
20001c60:	2b00      	cmp	r3, #0
20001c62:	d011      	beq.n	20001c88 <mss_spi_isr+0xfc>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1198
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20001c64:	687b      	ldr	r3, [r7, #4]
20001c66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001c6a:	2b02      	cmp	r3, #2
20001c6c:	d105      	bne.n	20001c7a <mss_spi_isr+0xee>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1201
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
20001c6e:	687b      	ldr	r3, [r7, #4]
20001c70:	681b      	ldr	r3, [r3, #0]
20001c72:	687a      	ldr	r2, [r7, #4]
20001c74:	6f92      	ldr	r2, [r2, #120]	; 0x78
20001c76:	615a      	str	r2, [r3, #20]
20001c78:	e002      	b.n	20001c80 <mss_spi_isr+0xf4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1205
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
20001c7a:	6878      	ldr	r0, [r7, #4]
20001c7c:	f7ff fec8 	bl	20001a10 <fill_slave_tx_fifo>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1208
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
20001c80:	687b      	ldr	r3, [r7, #4]
20001c82:	681b      	ldr	r3, [r3, #0]
20001c84:	2201      	movs	r2, #1
20001c86:	60da      	str	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1212
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
20001c88:	697b      	ldr	r3, [r7, #20]
20001c8a:	681b      	ldr	r3, [r3, #0]
20001c8c:	f003 0310 	and.w	r3, r3, #16
20001c90:	2b00      	cmp	r3, #0
20001c92:	d020      	beq.n	20001cd6 <mss_spi_isr+0x14a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1214
    {
        read_slave_rx_fifo(this_spi);
20001c94:	6878      	ldr	r0, [r7, #4]
20001c96:	f7ff ff26 	bl	20001ae6 <read_slave_rx_fifo>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1219
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
20001c9a:	687b      	ldr	r3, [r7, #4]
20001c9c:	6a1b      	ldr	r3, [r3, #32]
20001c9e:	2b00      	cmp	r3, #0
20001ca0:	d00a      	beq.n	20001cb8 <mss_spi_isr+0x12c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1221
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
20001ca2:	687b      	ldr	r3, [r7, #4]
20001ca4:	6a1b      	ldr	r3, [r3, #32]
20001ca6:	687a      	ldr	r2, [r7, #4]
20001ca8:	6a90      	ldr	r0, [r2, #40]	; 0x28
20001caa:	687a      	ldr	r2, [r7, #4]
20001cac:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001cae:	4611      	mov	r1, r2
20001cb0:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1222
            fill_slave_tx_fifo(this_spi);
20001cb2:	6878      	ldr	r0, [r7, #4]
20001cb4:	f7ff feac 	bl	20001a10 <fill_slave_tx_fifo>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1225
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
20001cb8:	687b      	ldr	r3, [r7, #4]
20001cba:	2201      	movs	r2, #1
20001cbc:	625a      	str	r2, [r3, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1227
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
20001cbe:	687b      	ldr	r3, [r7, #4]
20001cc0:	681b      	ldr	r3, [r3, #0]
20001cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001cc4:	687b      	ldr	r3, [r7, #4]
20001cc6:	681b      	ldr	r3, [r3, #0]
20001cc8:	f022 0210 	bic.w	r2, r2, #16
20001ccc:	629a      	str	r2, [r3, #40]	; 0x28
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1228
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20001cce:	687b      	ldr	r3, [r7, #4]
20001cd0:	681b      	ldr	r3, [r3, #0]
20001cd2:	2210      	movs	r2, #16
20001cd4:	60da      	str	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1231
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
20001cd6:	697b      	ldr	r3, [r7, #20]
20001cd8:	681b      	ldr	r3, [r3, #0]
20001cda:	f003 0304 	and.w	r3, r3, #4
20001cde:	2b00      	cmp	r3, #0
20001ce0:	d00e      	beq.n	20001d00 <mss_spi_isr+0x174>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1237
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
20001ce2:	687b      	ldr	r3, [r7, #4]
20001ce4:	681b      	ldr	r3, [r3, #0]
20001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001ce8:	687b      	ldr	r3, [r7, #4]
20001cea:	681b      	ldr	r3, [r3, #0]
20001cec:	f042 0204 	orr.w	r2, r2, #4
20001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1238
        recover_from_rx_overflow(this_spi);
20001cf2:	6878      	ldr	r0, [r7, #4]
20001cf4:	f7ff fb9c 	bl	20001430 <recover_from_rx_overflow>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1239
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
20001cf8:	687b      	ldr	r3, [r7, #4]
20001cfa:	681b      	ldr	r3, [r3, #0]
20001cfc:	2204      	movs	r2, #4
20001cfe:	60da      	str	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1248
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
20001d00:	697b      	ldr	r3, [r7, #20]
20001d02:	681b      	ldr	r3, [r3, #0]
20001d04:	f003 0308 	and.w	r3, r3, #8
20001d08:	2b00      	cmp	r3, #0
20001d0a:	d02d      	beq.n	20001d68 <mss_spi_isr+0x1dc>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1250
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
20001d0c:	687b      	ldr	r3, [r7, #4]
20001d0e:	681b      	ldr	r3, [r3, #0]
20001d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001d12:	687b      	ldr	r3, [r7, #4]
20001d14:	681b      	ldr	r3, [r3, #0]
20001d16:	f042 0208 	orr.w	r2, r2, #8
20001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1251
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20001d1c:	687b      	ldr	r3, [r7, #4]
20001d1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001d22:	2b02      	cmp	r3, #2
20001d24:	d111      	bne.n	20001d4a <mss_spi_isr+0x1be>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1253
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
20001d26:	687b      	ldr	r3, [r7, #4]
20001d28:	681b      	ldr	r3, [r3, #0]
20001d2a:	681b      	ldr	r3, [r3, #0]
20001d2c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
20001d30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
20001d34:	687a      	ldr	r2, [r7, #4]
20001d36:	6812      	ldr	r2, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1254
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
20001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1253
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
20001d3c:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1256
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
20001d3e:	687b      	ldr	r3, [r7, #4]
20001d40:	681b      	ldr	r3, [r3, #0]
20001d42:	687a      	ldr	r2, [r7, #4]
20001d44:	6f92      	ldr	r2, [r2, #120]	; 0x78
20001d46:	615a      	str	r2, [r3, #20]
20001d48:	e00a      	b.n	20001d60 <mss_spi_isr+0x1d4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1258
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
20001d4a:	687b      	ldr	r3, [r7, #4]
20001d4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001d50:	2b01      	cmp	r3, #1
20001d52:	d105      	bne.n	20001d60 <mss_spi_isr+0x1d4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1261
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
20001d54:	687b      	ldr	r3, [r7, #4]
20001d56:	2200      	movs	r2, #0
20001d58:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1262
            fill_slave_tx_fifo(this_spi);
20001d5a:	6878      	ldr	r0, [r7, #4]
20001d5c:	f7ff fe58 	bl	20001a10 <fill_slave_tx_fifo>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1269
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
20001d60:	687b      	ldr	r3, [r7, #4]
20001d62:	681b      	ldr	r3, [r3, #0]
20001d64:	2208      	movs	r2, #8
20001d66:	60da      	str	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1277
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
20001d68:	697b      	ldr	r3, [r7, #20]
20001d6a:	681b      	ldr	r3, [r3, #0]
20001d6c:	f003 0320 	and.w	r3, r3, #32
20001d70:	2b00      	cmp	r3, #0
20001d72:	d041      	beq.n	20001df8 <mss_spi_isr+0x26c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1281
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
20001d74:	6878      	ldr	r0, [r7, #4]
20001d76:	f7ff feb6 	bl	20001ae6 <read_slave_rx_fifo>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1282
        rx_size = this_spi->slave_rx_idx;
20001d7a:	687b      	ldr	r3, [r7, #4]
20001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001d7e:	613b      	str	r3, [r7, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1288
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0 != this_spi->cmd_handler)
20001d80:	687b      	ldr	r3, [r7, #4]
20001d82:	6a1b      	ldr	r3, [r3, #32]
20001d84:	2b00      	cmp	r3, #0
20001d86:	d017      	beq.n	20001db8 <mss_spi_isr+0x22c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1290
        {
            this_spi->cmd_done = 0u;
20001d88:	687b      	ldr	r3, [r7, #4]
20001d8a:	2200      	movs	r2, #0
20001d8c:	625a      	str	r2, [r3, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1291
            this_spi->resp_tx_buffer = 0u;
20001d8e:	687b      	ldr	r3, [r7, #4]
20001d90:	2200      	movs	r2, #0
20001d92:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1292
            this_spi->resp_buff_size = 0u;
20001d94:	687b      	ldr	r3, [r7, #4]
20001d96:	2200      	movs	r2, #0
20001d98:	619a      	str	r2, [r3, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1293
            this_spi->resp_buff_tx_idx = 0u;
20001d9a:	687b      	ldr	r3, [r7, #4]
20001d9c:	2200      	movs	r2, #0
20001d9e:	61da      	str	r2, [r3, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1294
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20001da0:	687b      	ldr	r3, [r7, #4]
20001da2:	681b      	ldr	r3, [r3, #0]
20001da4:	2210      	movs	r2, #16
20001da6:	60da      	str	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1295
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
20001da8:	687b      	ldr	r3, [r7, #4]
20001daa:	681b      	ldr	r3, [r3, #0]
20001dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001dae:	687b      	ldr	r3, [r7, #4]
20001db0:	681b      	ldr	r3, [r3, #0]
20001db2:	f042 0210 	orr.w	r2, r2, #16
20001db6:	629a      	str	r2, [r3, #40]	; 0x28
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1302
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
20001db8:	687b      	ldr	r3, [r7, #4]
20001dba:	2200      	movs	r2, #0
20001dbc:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1303
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20001dbe:	687b      	ldr	r3, [r7, #4]
20001dc0:	681b      	ldr	r3, [r3, #0]
20001dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001dc4:	687b      	ldr	r3, [r7, #4]
20001dc6:	681b      	ldr	r3, [r3, #0]
20001dc8:	f042 020c 	orr.w	r2, r2, #12
20001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1304
        fill_slave_tx_fifo(this_spi);
20001dce:	6878      	ldr	r0, [r7, #4]
20001dd0:	f7ff fe1e 	bl	20001a10 <fill_slave_tx_fifo>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1307
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
20001dd4:	687b      	ldr	r3, [r7, #4]
20001dd6:	2200      	movs	r2, #0
20001dd8:	631a      	str	r2, [r3, #48]	; 0x30
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1311
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
20001dda:	687b      	ldr	r3, [r7, #4]
20001ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
20001dde:	2b00      	cmp	r3, #0
20001de0:	d006      	beq.n	20001df0 <mss_spi_isr+0x264>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1313
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
20001de2:	687b      	ldr	r3, [r7, #4]
20001de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
20001de6:	687a      	ldr	r2, [r7, #4]
20001de8:	6a92      	ldr	r2, [r2, #40]	; 0x28
20001dea:	6939      	ldr	r1, [r7, #16]
20001dec:	4610      	mov	r0, r2
20001dee:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1316
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
20001df0:	687b      	ldr	r3, [r7, #4]
20001df2:	681b      	ldr	r3, [r3, #0]
20001df4:	2220      	movs	r2, #32
20001df6:	60da      	str	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1318
    }
}
20001df8:	bf00      	nop
20001dfa:	3718      	adds	r7, #24
20001dfc:	46bd      	mov	sp, r7
20001dfe:	bd80      	pop	{r7, pc}
20001e00:	20003da0 	.word	0x20003da0
20001e04:	20003d1c 	.word	0x20003d1c

20001e08 <SPI0_IRQHandler>:
SPI0_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1331
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
20001e08:	4668      	mov	r0, sp
20001e0a:	f020 0107 	bic.w	r1, r0, #7
20001e0e:	468d      	mov	sp, r1
20001e10:	b589      	push	{r0, r3, r7, lr}
20001e12:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1332
    mss_spi_isr(&g_mss_spi0);
20001e14:	4804      	ldr	r0, [pc, #16]	; (20001e28 <SPI0_IRQHandler+0x20>)
20001e16:	f7ff feb9 	bl	20001b8c <mss_spi_isr>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1333
}
20001e1a:	bf00      	nop
20001e1c:	46bd      	mov	sp, r7
20001e1e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001e22:	4685      	mov	sp, r0
20001e24:	4770      	bx	lr
20001e26:	bf00      	nop
20001e28:	20003da0 	.word	0x20003da0

20001e2c <SPI1_IRQHandler>:
SPI1_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1345
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
20001e2c:	4668      	mov	r0, sp
20001e2e:	f020 0107 	bic.w	r1, r0, #7
20001e32:	468d      	mov	sp, r1
20001e34:	b589      	push	{r0, r3, r7, lr}
20001e36:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1346
    mss_spi_isr(&g_mss_spi1);
20001e38:	4804      	ldr	r0, [pc, #16]	; (20001e4c <SPI1_IRQHandler+0x20>)
20001e3a:	f7ff fea7 	bl	20001b8c <mss_spi_isr>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_spi/mss_spi.c:1347
}
20001e3e:	bf00      	nop
20001e40:	46bd      	mov	sp, r7
20001e42:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001e46:	4685      	mov	sp, r0
20001e48:	4770      	bx	lr
20001e4a:	bf00      	nop
20001e4c:	20003d1c 	.word	0x20003d1c

20001e50 <NVIC_DisableIRQ>:
NVIC_DisableIRQ():
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1464
{
20001e50:	b480      	push	{r7}
20001e52:	b083      	sub	sp, #12
20001e54:	af00      	add	r7, sp, #0
20001e56:	4603      	mov	r3, r0
20001e58:	71fb      	strb	r3, [r7, #7]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1465
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
20001e5a:	79fb      	ldrb	r3, [r7, #7]
20001e5c:	f003 021f 	and.w	r2, r3, #31
20001e60:	4907      	ldr	r1, [pc, #28]	; (20001e80 <NVIC_DisableIRQ+0x30>)
20001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001e66:	095b      	lsrs	r3, r3, #5
20001e68:	2001      	movs	r0, #1
20001e6a:	fa00 f202 	lsl.w	r2, r0, r2
20001e6e:	3320      	adds	r3, #32
20001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1466
}
20001e74:	bf00      	nop
20001e76:	370c      	adds	r7, #12
20001e78:	46bd      	mov	sp, r7
20001e7a:	bc80      	pop	{r7}
20001e7c:	4770      	bx	lr
20001e7e:	bf00      	nop
20001e80:	e000e100 	.word	0xe000e100

20001e84 <enable_slave_if_required>:
enable_slave_if_required():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:615
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
20001e84:	b480      	push	{r7}
20001e86:	b083      	sub	sp, #12
20001e88:	af00      	add	r7, sp, #0
20001e8a:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:616
    if( this_i2c->is_slave_enabled )
20001e8c:	687b      	ldr	r3, [r7, #4]
20001e8e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20001e92:	2b00      	cmp	r3, #0
20001e94:	d003      	beq.n	20001e9e <enable_slave_if_required+0x1a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:618
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
20001e96:	687b      	ldr	r3, [r7, #4]
20001e98:	699b      	ldr	r3, [r3, #24]
20001e9a:	2201      	movs	r2, #1
20001e9c:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:620
    }
}
20001e9e:	bf00      	nop
20001ea0:	370c      	adds	r7, #12
20001ea2:	46bd      	mov	sp, r7
20001ea4:	bc80      	pop	{r7}
20001ea6:	4770      	bx	lr

20001ea8 <mss_i2c_isr>:
mss_i2c_isr():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:635
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
20001ea8:	b590      	push	{r4, r7, lr}
20001eaa:	b085      	sub	sp, #20
20001eac:	af00      	add	r7, sp, #0
20001eae:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:639
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
20001eb0:	2301      	movs	r3, #1
20001eb2:	73fb      	strb	r3, [r7, #15]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:640
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20001eb4:	687b      	ldr	r3, [r7, #4]
20001eb6:	4ae7      	ldr	r2, [pc, #924]	; (20002254 <mss_i2c_isr+0x3ac>)
20001eb8:	4293      	cmp	r3, r2
20001eba:	d004      	beq.n	20001ec6 <mss_i2c_isr+0x1e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:640 (discriminator 1)
20001ebc:	687b      	ldr	r3, [r7, #4]
20001ebe:	4ae6      	ldr	r2, [pc, #920]	; (20002258 <mss_i2c_isr+0x3b0>)
20001ec0:	4293      	cmp	r3, r2
20001ec2:	d000      	beq.n	20001ec6 <mss_i2c_isr+0x1e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:640 (discriminator 2)
20001ec4:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:642

    status = this_i2c->hw_reg->STATUS;
20001ec6:	687b      	ldr	r3, [r7, #4]
20001ec8:	695b      	ldr	r3, [r3, #20]
20001eca:	791b      	ldrb	r3, [r3, #4]
20001ecc:	72fb      	strb	r3, [r7, #11]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:644

    switch( status )
20001ece:	7afb      	ldrb	r3, [r7, #11]
20001ed0:	b2db      	uxtb	r3, r3
20001ed2:	3b08      	subs	r3, #8
20001ed4:	2bd0      	cmp	r3, #208	; 0xd0
20001ed6:	f200 83d7 	bhi.w	20002688 <mss_i2c_isr+0x7e0>
20001eda:	a201      	add	r2, pc, #4	; (adr r2, 20001ee0 <mss_i2c_isr+0x38>)
20001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001ee0:	20002225 	.word	0x20002225
20001ee4:	20002689 	.word	0x20002689
20001ee8:	20002689 	.word	0x20002689
20001eec:	20002689 	.word	0x20002689
20001ef0:	20002689 	.word	0x20002689
20001ef4:	20002689 	.word	0x20002689
20001ef8:	20002689 	.word	0x20002689
20001efc:	20002689 	.word	0x20002689
20001f00:	20002225 	.word	0x20002225
20001f04:	20002689 	.word	0x20002689
20001f08:	20002689 	.word	0x20002689
20001f0c:	20002689 	.word	0x20002689
20001f10:	20002689 	.word	0x20002689
20001f14:	20002689 	.word	0x20002689
20001f18:	20002689 	.word	0x20002689
20001f1c:	20002689 	.word	0x20002689
20001f20:	200022c1 	.word	0x200022c1
20001f24:	20002689 	.word	0x20002689
20001f28:	20002689 	.word	0x20002689
20001f2c:	20002689 	.word	0x20002689
20001f30:	20002689 	.word	0x20002689
20001f34:	20002689 	.word	0x20002689
20001f38:	20002689 	.word	0x20002689
20001f3c:	20002689 	.word	0x20002689
20001f40:	200022a3 	.word	0x200022a3
20001f44:	20002689 	.word	0x20002689
20001f48:	20002689 	.word	0x20002689
20001f4c:	20002689 	.word	0x20002689
20001f50:	20002689 	.word	0x20002689
20001f54:	20002689 	.word	0x20002689
20001f58:	20002689 	.word	0x20002689
20001f5c:	20002689 	.word	0x20002689
20001f60:	200022c1 	.word	0x200022c1
20001f64:	20002689 	.word	0x20002689
20001f68:	20002689 	.word	0x20002689
20001f6c:	20002689 	.word	0x20002689
20001f70:	20002689 	.word	0x20002689
20001f74:	20002689 	.word	0x20002689
20001f78:	20002689 	.word	0x20002689
20001f7c:	20002689 	.word	0x20002689
20001f80:	20002347 	.word	0x20002347
20001f84:	20002689 	.word	0x20002689
20001f88:	20002689 	.word	0x20002689
20001f8c:	20002689 	.word	0x20002689
20001f90:	20002689 	.word	0x20002689
20001f94:	20002689 	.word	0x20002689
20001f98:	20002689 	.word	0x20002689
20001f9c:	20002689 	.word	0x20002689
20001fa0:	20002299 	.word	0x20002299
20001fa4:	20002689 	.word	0x20002689
20001fa8:	20002689 	.word	0x20002689
20001fac:	20002689 	.word	0x20002689
20001fb0:	20002689 	.word	0x20002689
20001fb4:	20002689 	.word	0x20002689
20001fb8:	20002689 	.word	0x20002689
20001fbc:	20002689 	.word	0x20002689
20001fc0:	20002365 	.word	0x20002365
20001fc4:	20002689 	.word	0x20002689
20001fc8:	20002689 	.word	0x20002689
20001fcc:	20002689 	.word	0x20002689
20001fd0:	20002689 	.word	0x20002689
20001fd4:	20002689 	.word	0x20002689
20001fd8:	20002689 	.word	0x20002689
20001fdc:	20002689 	.word	0x20002689
20001fe0:	200023a9 	.word	0x200023a9
20001fe4:	20002689 	.word	0x20002689
20001fe8:	20002689 	.word	0x20002689
20001fec:	20002689 	.word	0x20002689
20001ff0:	20002689 	.word	0x20002689
20001ff4:	20002689 	.word	0x20002689
20001ff8:	20002689 	.word	0x20002689
20001ffc:	20002689 	.word	0x20002689
20002000:	200023c7 	.word	0x200023c7
20002004:	20002689 	.word	0x20002689
20002008:	20002689 	.word	0x20002689
2000200c:	20002689 	.word	0x20002689
20002010:	20002689 	.word	0x20002689
20002014:	20002689 	.word	0x20002689
20002018:	20002689 	.word	0x20002689
2000201c:	20002689 	.word	0x20002689
20002020:	200023fb 	.word	0x200023fb
20002024:	20002689 	.word	0x20002689
20002028:	20002689 	.word	0x20002689
2000202c:	20002689 	.word	0x20002689
20002030:	20002689 	.word	0x20002689
20002034:	20002689 	.word	0x20002689
20002038:	20002689 	.word	0x20002689
2000203c:	20002689 	.word	0x20002689
20002040:	2000248b 	.word	0x2000248b
20002044:	20002689 	.word	0x20002689
20002048:	20002689 	.word	0x20002689
2000204c:	20002689 	.word	0x20002689
20002050:	20002689 	.word	0x20002689
20002054:	20002689 	.word	0x20002689
20002058:	20002689 	.word	0x20002689
2000205c:	20002689 	.word	0x20002689
20002060:	20002483 	.word	0x20002483
20002064:	20002689 	.word	0x20002689
20002068:	20002689 	.word	0x20002689
2000206c:	20002689 	.word	0x20002689
20002070:	20002689 	.word	0x20002689
20002074:	20002689 	.word	0x20002689
20002078:	20002689 	.word	0x20002689
2000207c:	20002689 	.word	0x20002689
20002080:	2000248b 	.word	0x2000248b
20002084:	20002689 	.word	0x20002689
20002088:	20002689 	.word	0x20002689
2000208c:	20002689 	.word	0x20002689
20002090:	20002689 	.word	0x20002689
20002094:	20002689 	.word	0x20002689
20002098:	20002689 	.word	0x20002689
2000209c:	20002689 	.word	0x20002689
200020a0:	20002483 	.word	0x20002483
200020a4:	20002689 	.word	0x20002689
200020a8:	20002689 	.word	0x20002689
200020ac:	20002689 	.word	0x20002689
200020b0:	20002689 	.word	0x20002689
200020b4:	20002689 	.word	0x20002689
200020b8:	20002689 	.word	0x20002689
200020bc:	20002689 	.word	0x20002689
200020c0:	200024c1 	.word	0x200024c1
200020c4:	20002689 	.word	0x20002689
200020c8:	20002689 	.word	0x20002689
200020cc:	20002689 	.word	0x20002689
200020d0:	20002689 	.word	0x20002689
200020d4:	20002689 	.word	0x20002689
200020d8:	20002689 	.word	0x20002689
200020dc:	20002689 	.word	0x20002689
200020e0:	20002457 	.word	0x20002457
200020e4:	20002689 	.word	0x20002689
200020e8:	20002689 	.word	0x20002689
200020ec:	20002689 	.word	0x20002689
200020f0:	20002689 	.word	0x20002689
200020f4:	20002689 	.word	0x20002689
200020f8:	20002689 	.word	0x20002689
200020fc:	20002689 	.word	0x20002689
20002100:	200024c1 	.word	0x200024c1
20002104:	20002689 	.word	0x20002689
20002108:	20002689 	.word	0x20002689
2000210c:	20002689 	.word	0x20002689
20002110:	20002689 	.word	0x20002689
20002114:	20002689 	.word	0x20002689
20002118:	20002689 	.word	0x20002689
2000211c:	20002689 	.word	0x20002689
20002120:	20002457 	.word	0x20002457
20002124:	20002689 	.word	0x20002689
20002128:	20002689 	.word	0x20002689
2000212c:	20002689 	.word	0x20002689
20002130:	20002689 	.word	0x20002689
20002134:	20002689 	.word	0x20002689
20002138:	20002689 	.word	0x20002689
2000213c:	20002689 	.word	0x20002689
20002140:	20002517 	.word	0x20002517
20002144:	20002689 	.word	0x20002689
20002148:	20002689 	.word	0x20002689
2000214c:	20002689 	.word	0x20002689
20002150:	20002689 	.word	0x20002689
20002154:	20002689 	.word	0x20002689
20002158:	20002689 	.word	0x20002689
2000215c:	20002689 	.word	0x20002689
20002160:	200025d9 	.word	0x200025d9
20002164:	20002689 	.word	0x20002689
20002168:	20002689 	.word	0x20002689
2000216c:	20002689 	.word	0x20002689
20002170:	20002689 	.word	0x20002689
20002174:	20002689 	.word	0x20002689
20002178:	20002689 	.word	0x20002689
2000217c:	20002689 	.word	0x20002689
20002180:	200025d9 	.word	0x200025d9
20002184:	20002689 	.word	0x20002689
20002188:	20002689 	.word	0x20002689
2000218c:	20002689 	.word	0x20002689
20002190:	20002689 	.word	0x20002689
20002194:	20002689 	.word	0x20002689
20002198:	20002689 	.word	0x20002689
2000219c:	20002689 	.word	0x20002689
200021a0:	200025d9 	.word	0x200025d9
200021a4:	20002689 	.word	0x20002689
200021a8:	20002689 	.word	0x20002689
200021ac:	20002689 	.word	0x20002689
200021b0:	20002689 	.word	0x20002689
200021b4:	20002689 	.word	0x20002689
200021b8:	20002689 	.word	0x20002689
200021bc:	20002689 	.word	0x20002689
200021c0:	20002659 	.word	0x20002659
200021c4:	20002689 	.word	0x20002689
200021c8:	20002689 	.word	0x20002689
200021cc:	20002689 	.word	0x20002689
200021d0:	20002689 	.word	0x20002689
200021d4:	20002689 	.word	0x20002689
200021d8:	20002689 	.word	0x20002689
200021dc:	20002689 	.word	0x20002689
200021e0:	20002659 	.word	0x20002659
200021e4:	20002689 	.word	0x20002689
200021e8:	20002689 	.word	0x20002689
200021ec:	20002689 	.word	0x20002689
200021f0:	20002689 	.word	0x20002689
200021f4:	20002689 	.word	0x20002689
200021f8:	20002689 	.word	0x20002689
200021fc:	20002689 	.word	0x20002689
20002200:	20002689 	.word	0x20002689
20002204:	20002689 	.word	0x20002689
20002208:	20002689 	.word	0x20002689
2000220c:	20002689 	.word	0x20002689
20002210:	20002689 	.word	0x20002689
20002214:	20002689 	.word	0x20002689
20002218:	20002689 	.word	0x20002689
2000221c:	20002689 	.word	0x20002689
20002220:	200025b1 	.word	0x200025b1
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:650
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
20002224:	687b      	ldr	r3, [r7, #4]
20002226:	699b      	ldr	r3, [r3, #24]
20002228:	2200      	movs	r2, #0
2000222a:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:651
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
2000222c:	687b      	ldr	r3, [r7, #4]
2000222e:	685a      	ldr	r2, [r3, #4]
20002230:	687b      	ldr	r3, [r7, #4]
20002232:	695b      	ldr	r3, [r3, #20]
20002234:	b2d2      	uxtb	r2, r2
20002236:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:652
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
20002238:	687b      	ldr	r3, [r7, #4]
2000223a:	699b      	ldr	r3, [r3, #24]
2000223c:	687a      	ldr	r2, [r7, #4]
2000223e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20002240:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:653
            if ( this_i2c->dir == WRITE_DIR )
20002244:	687b      	ldr	r3, [r7, #4]
20002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002248:	2b00      	cmp	r3, #0
2000224a:	d107      	bne.n	2000225c <mss_i2c_isr+0x3b4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:655
            {
                this_i2c->master_tx_idx = 0u;
2000224c:	687b      	ldr	r3, [r7, #4]
2000224e:	2200      	movs	r2, #0
20002250:	629a      	str	r2, [r3, #40]	; 0x28
20002252:	e00a      	b.n	2000226a <mss_i2c_isr+0x3c2>
20002254:	20003e24 	.word	0x20003e24
20002258:	20003e98 	.word	0x20003e98
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:657
            }
            else if ( this_i2c->dir == READ_DIR)
2000225c:	687b      	ldr	r3, [r7, #4]
2000225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002260:	2b01      	cmp	r3, #1
20002262:	d102      	bne.n	2000226a <mss_i2c_isr+0x3c2>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:659
            {
                this_i2c->master_rx_idx = 0u;
20002264:	687b      	ldr	r3, [r7, #4]
20002266:	2200      	movs	r2, #0
20002268:	639a      	str	r2, [r3, #56]	; 0x38
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:667
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
2000226a:	687b      	ldr	r3, [r7, #4]
2000226c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20002270:	2b00      	cmp	r3, #0
20002272:	d003      	beq.n	2000227c <mss_i2c_isr+0x3d4>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:669
            {
                this_i2c->is_transaction_pending = 0u;
20002274:	687b      	ldr	r3, [r7, #4]
20002276:	2200      	movs	r2, #0
20002278:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:676

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
2000227c:	687b      	ldr	r3, [r7, #4]
2000227e:	7a1a      	ldrb	r2, [r3, #8]
20002280:	687b      	ldr	r3, [r7, #4]
20002282:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
20002286:	429a      	cmp	r2, r3
20002288:	f000 821d 	beq.w	200026c6 <mss_i2c_isr+0x81e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:678
            {
                this_i2c->transaction = this_i2c->pending_transaction;
2000228c:	687b      	ldr	r3, [r7, #4]
2000228e:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
20002292:	687b      	ldr	r3, [r7, #4]
20002294:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:680
            }
            break;
20002296:	e216      	b.n	200026c6 <mss_i2c_isr+0x81e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:684
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20002298:	687b      	ldr	r3, [r7, #4]
2000229a:	699b      	ldr	r3, [r3, #24]
2000229c:	2201      	movs	r2, #1
2000229e:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:685
            break;
200022a0:	e21c      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:690
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200022a2:	687b      	ldr	r3, [r7, #4]
200022a4:	699b      	ldr	r3, [r3, #24]
200022a6:	2201      	movs	r2, #1
200022a8:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:691
            this_i2c->master_status = MSS_I2C_FAILED;
200022aa:	687b      	ldr	r3, [r7, #4]
200022ac:	2202      	movs	r2, #2
200022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:692
            this_i2c->transaction = NO_TRANSACTION;
200022b2:	687b      	ldr	r3, [r7, #4]
200022b4:	2200      	movs	r2, #0
200022b6:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:693
            enable_slave_if_required(this_i2c);
200022b8:	6878      	ldr	r0, [r7, #4]
200022ba:	f7ff fde3 	bl	20001e84 <enable_slave_if_required>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:694
            break;
200022be:	e20d      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:699
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
200022c0:	687b      	ldr	r3, [r7, #4]
200022c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
200022c4:	687b      	ldr	r3, [r7, #4]
200022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200022c8:	429a      	cmp	r2, r3
200022ca:	d20c      	bcs.n	200022e6 <mss_i2c_isr+0x43e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:701
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
200022cc:	687b      	ldr	r3, [r7, #4]
200022ce:	6a1a      	ldr	r2, [r3, #32]
200022d0:	687b      	ldr	r3, [r7, #4]
200022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200022d4:	1c58      	adds	r0, r3, #1
200022d6:	6879      	ldr	r1, [r7, #4]
200022d8:	6288      	str	r0, [r1, #40]	; 0x28
200022da:	441a      	add	r2, r3
200022dc:	687b      	ldr	r3, [r7, #4]
200022de:	695b      	ldr	r3, [r3, #20]
200022e0:	7812      	ldrb	r2, [r2, #0]
200022e2:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:733
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
200022e4:	e1fa      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:703
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
200022e6:	687b      	ldr	r3, [r7, #4]
200022e8:	7a1b      	ldrb	r3, [r3, #8]
200022ea:	2b03      	cmp	r3, #3
200022ec:	d107      	bne.n	200022fe <mss_i2c_isr+0x456>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:707
                 this_i2c->dir = READ_DIR;
200022ee:	687b      	ldr	r3, [r7, #4]
200022f0:	2201      	movs	r2, #1
200022f2:	62da      	str	r2, [r3, #44]	; 0x2c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:708
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200022f4:	687b      	ldr	r3, [r7, #4]
200022f6:	699b      	ldr	r3, [r3, #24]
200022f8:	2201      	movs	r2, #1
200022fa:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:733
            break;
200022fc:	e1ee      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:716
                this_i2c->transaction = NO_TRANSACTION;
200022fe:	687b      	ldr	r3, [r7, #4]
20002300:	2200      	movs	r2, #0
20002302:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:717
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
20002304:	687b      	ldr	r3, [r7, #4]
20002306:	7c1b      	ldrb	r3, [r3, #16]
20002308:	f003 0301 	and.w	r3, r3, #1
2000230c:	73bb      	strb	r3, [r7, #14]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:720
                this_i2c->bus_status  = hold_bus;
2000230e:	687b      	ldr	r3, [r7, #4]
20002310:	7bba      	ldrb	r2, [r7, #14]
20002312:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:721
                if ( hold_bus == 0u )
20002316:	7bbb      	ldrb	r3, [r7, #14]
20002318:	2b00      	cmp	r3, #0
2000231a:	d107      	bne.n	2000232c <mss_i2c_isr+0x484>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:723
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
2000231c:	687b      	ldr	r3, [r7, #4]
2000231e:	699b      	ldr	r3, [r3, #24]
20002320:	2201      	movs	r2, #1
20002322:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:724
                    enable_slave_if_required(this_i2c);
20002324:	6878      	ldr	r0, [r7, #4]
20002326:	f7ff fdad 	bl	20001e84 <enable_slave_if_required>
2000232a:	e007      	b.n	2000233c <mss_i2c_isr+0x494>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:728
                    NVIC_DisableIRQ( this_i2c->irqn );
2000232c:	687b      	ldr	r3, [r7, #4]
2000232e:	f993 3011 	ldrsb.w	r3, [r3, #17]
20002332:	4618      	mov	r0, r3
20002334:	f7ff fd8c 	bl	20001e50 <NVIC_DisableIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:729
                    clear_irq = 0u;
20002338:	2300      	movs	r3, #0
2000233a:	73fb      	strb	r3, [r7, #15]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:731
                this_i2c->master_status = MSS_I2C_SUCCESS;
2000233c:	687b      	ldr	r3, [r7, #4]
2000233e:	2200      	movs	r2, #0
20002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:733
            break;
20002344:	e1ca      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:741
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20002346:	687b      	ldr	r3, [r7, #4]
20002348:	699b      	ldr	r3, [r3, #24]
2000234a:	2201      	movs	r2, #1
2000234c:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:742
            this_i2c->master_status = MSS_I2C_FAILED;
2000234e:	687b      	ldr	r3, [r7, #4]
20002350:	2202      	movs	r2, #2
20002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:748

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002356:	687b      	ldr	r3, [r7, #4]
20002358:	2200      	movs	r2, #0
2000235a:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:749
            enable_slave_if_required(this_i2c);
2000235c:	6878      	ldr	r0, [r7, #4]
2000235e:	f7ff fd91 	bl	20001e84 <enable_slave_if_required>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:751

            break;
20002362:	e1bb      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:760
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20002364:	687b      	ldr	r3, [r7, #4]
20002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20002368:	2b01      	cmp	r3, #1
2000236a:	d904      	bls.n	20002376 <mss_i2c_isr+0x4ce>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:762
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000236c:	687b      	ldr	r3, [r7, #4]
2000236e:	699b      	ldr	r3, [r3, #24]
20002370:	2201      	movs	r2, #1
20002372:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:775
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20002374:	e1b2      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:764
            else if(1u == this_i2c->master_rx_size)
20002376:	687b      	ldr	r3, [r7, #4]
20002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000237a:	2b01      	cmp	r3, #1
2000237c:	d104      	bne.n	20002388 <mss_i2c_isr+0x4e0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:766
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
2000237e:	687b      	ldr	r3, [r7, #4]
20002380:	699b      	ldr	r3, [r3, #24]
20002382:	2200      	movs	r2, #0
20002384:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:775
            break;
20002386:	e1a9      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:770
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002388:	687b      	ldr	r3, [r7, #4]
2000238a:	699b      	ldr	r3, [r3, #24]
2000238c:	2201      	movs	r2, #1
2000238e:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:771
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20002390:	687b      	ldr	r3, [r7, #4]
20002392:	699b      	ldr	r3, [r3, #24]
20002394:	2201      	movs	r2, #1
20002396:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:772
                this_i2c->master_status = MSS_I2C_SUCCESS;
20002398:	687b      	ldr	r3, [r7, #4]
2000239a:	2200      	movs	r2, #0
2000239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:773
                this_i2c->transaction = NO_TRANSACTION;
200023a0:	687b      	ldr	r3, [r7, #4]
200023a2:	2200      	movs	r2, #0
200023a4:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:775
            break;
200023a6:	e199      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:778
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200023a8:	687b      	ldr	r3, [r7, #4]
200023aa:	699b      	ldr	r3, [r3, #24]
200023ac:	2201      	movs	r2, #1
200023ae:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:779
            this_i2c->master_status = MSS_I2C_FAILED;
200023b0:	687b      	ldr	r3, [r7, #4]
200023b2:	2202      	movs	r2, #2
200023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:785

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200023b8:	687b      	ldr	r3, [r7, #4]
200023ba:	2200      	movs	r2, #0
200023bc:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:786
            enable_slave_if_required(this_i2c);
200023be:	6878      	ldr	r0, [r7, #4]
200023c0:	f7ff fd60 	bl	20001e84 <enable_slave_if_required>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:787
            break;
200023c4:	e18a      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:791
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
200023c6:	687b      	ldr	r3, [r7, #4]
200023c8:	695a      	ldr	r2, [r3, #20]
200023ca:	687b      	ldr	r3, [r7, #4]
200023cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
200023ce:	687b      	ldr	r3, [r7, #4]
200023d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200023d2:	1c5c      	adds	r4, r3, #1
200023d4:	6878      	ldr	r0, [r7, #4]
200023d6:	6384      	str	r4, [r0, #56]	; 0x38
200023d8:	440b      	add	r3, r1
200023da:	7a12      	ldrb	r2, [r2, #8]
200023dc:	b2d2      	uxtb	r2, r2
200023de:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:793

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
200023e0:	687b      	ldr	r3, [r7, #4]
200023e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200023e4:	687b      	ldr	r3, [r7, #4]
200023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200023e8:	3b01      	subs	r3, #1
200023ea:	429a      	cmp	r2, r3
200023ec:	f0c0 816d 	bcc.w	200026ca <mss_i2c_isr+0x822>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:797
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
200023f0:	687b      	ldr	r3, [r7, #4]
200023f2:	699b      	ldr	r3, [r3, #24]
200023f4:	2200      	movs	r2, #0
200023f6:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:799
            }
            break;
200023f8:	e167      	b.n	200026ca <mss_i2c_isr+0x822>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:803
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
200023fa:	687b      	ldr	r3, [r7, #4]
200023fc:	695a      	ldr	r2, [r3, #20]
200023fe:	687b      	ldr	r3, [r7, #4]
20002400:	6b19      	ldr	r1, [r3, #48]	; 0x30
20002402:	687b      	ldr	r3, [r7, #4]
20002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002406:	440b      	add	r3, r1
20002408:	7a12      	ldrb	r2, [r2, #8]
2000240a:	b2d2      	uxtb	r2, r2
2000240c:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:805
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
2000240e:	687b      	ldr	r3, [r7, #4]
20002410:	7c1b      	ldrb	r3, [r3, #16]
20002412:	f003 0301 	and.w	r3, r3, #1
20002416:	73bb      	strb	r3, [r7, #14]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:808

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20002418:	687b      	ldr	r3, [r7, #4]
2000241a:	7bba      	ldrb	r2, [r7, #14]
2000241c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:809
            if ( hold_bus == 0u )
20002420:	7bbb      	ldrb	r3, [r7, #14]
20002422:	2b00      	cmp	r3, #0
20002424:	d107      	bne.n	20002436 <mss_i2c_isr+0x58e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:811
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
20002426:	687b      	ldr	r3, [r7, #4]
20002428:	699b      	ldr	r3, [r3, #24]
2000242a:	2201      	movs	r2, #1
2000242c:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:814

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
2000242e:	6878      	ldr	r0, [r7, #4]
20002430:	f7ff fd28 	bl	20001e84 <enable_slave_if_required>
20002434:	e007      	b.n	20002446 <mss_i2c_isr+0x59e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:818
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20002436:	687b      	ldr	r3, [r7, #4]
20002438:	f993 3011 	ldrsb.w	r3, [r3, #17]
2000243c:	4618      	mov	r0, r3
2000243e:	f7ff fd07 	bl	20001e50 <NVIC_DisableIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:819
                clear_irq = 0u;
20002442:	2300      	movs	r3, #0
20002444:	73fb      	strb	r3, [r7, #15]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:826

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002446:	687b      	ldr	r3, [r7, #4]
20002448:	2200      	movs	r2, #0
2000244a:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:827
            this_i2c->master_status = MSS_I2C_SUCCESS;
2000244c:	687b      	ldr	r3, [r7, #4]
2000244e:	2200      	movs	r2, #0
20002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:828
            break;
20002454:	e142      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:833
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002456:	687b      	ldr	r3, [r7, #4]
20002458:	699b      	ldr	r3, [r3, #24]
2000245a:	2201      	movs	r2, #1
2000245c:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:835
            
            this_i2c->transaction = NO_TRANSACTION;
2000245e:	687b      	ldr	r3, [r7, #4]
20002460:	2200      	movs	r2, #0
20002462:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:836
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20002464:	687b      	ldr	r3, [r7, #4]
20002466:	2200      	movs	r2, #0
20002468:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:839
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
2000246c:	687b      	ldr	r3, [r7, #4]
2000246e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20002472:	2b00      	cmp	r3, #0
20002474:	f000 812b 	beq.w	200026ce <mss_i2c_isr+0x826>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:841
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20002478:	687b      	ldr	r3, [r7, #4]
2000247a:	699b      	ldr	r3, [r3, #24]
2000247c:	2201      	movs	r2, #1
2000247e:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:843
            }
            break;
20002480:	e125      	b.n	200026ce <mss_i2c_isr+0x826>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:851
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20002482:	687b      	ldr	r3, [r7, #4]
20002484:	2201      	movs	r2, #1
20002486:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:857
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
2000248a:	687b      	ldr	r3, [r7, #4]
2000248c:	2204      	movs	r2, #4
2000248e:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:858
            this_i2c->slave_rx_idx = 0u;
20002490:	687b      	ldr	r3, [r7, #4]
20002492:	2200      	movs	r2, #0
20002494:	659a      	str	r2, [r3, #88]	; 0x58
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:859
            this_i2c->random_read_addr = 0u;
20002496:	687b      	ldr	r3, [r7, #4]
20002498:	2200      	movs	r2, #0
2000249a:	60da      	str	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:864

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
2000249c:	687b      	ldr	r3, [r7, #4]
2000249e:	699b      	ldr	r3, [r3, #24]
200024a0:	695b      	ldr	r3, [r3, #20]
200024a2:	2b00      	cmp	r3, #0
200024a4:	d007      	beq.n	200024b6 <mss_i2c_isr+0x60e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:866
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
200024a6:	687b      	ldr	r3, [r7, #4]
200024a8:	699b      	ldr	r3, [r3, #24]
200024aa:	2200      	movs	r2, #0
200024ac:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:867
                this_i2c->is_transaction_pending = 1u;
200024ae:	687b      	ldr	r3, [r7, #4]
200024b0:	2201      	movs	r2, #1
200024b2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:869
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
200024b6:	687b      	ldr	r3, [r7, #4]
200024b8:	2201      	movs	r2, #1
200024ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:876
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
200024be:	e10d      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:880
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
200024c0:	687b      	ldr	r3, [r7, #4]
200024c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200024c4:	2b00      	cmp	r3, #0
200024c6:	d01a      	beq.n	200024fe <mss_i2c_isr+0x656>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:881
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
200024c8:	687b      	ldr	r3, [r7, #4]
200024ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
200024cc:	687b      	ldr	r3, [r7, #4]
200024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200024d0:	429a      	cmp	r2, r3
200024d2:	d214      	bcs.n	200024fe <mss_i2c_isr+0x656>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:883
            {
                data = this_i2c->hw_reg->DATA;
200024d4:	687b      	ldr	r3, [r7, #4]
200024d6:	695b      	ldr	r3, [r3, #20]
200024d8:	7a1b      	ldrb	r3, [r3, #8]
200024da:	737b      	strb	r3, [r7, #13]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:884
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
200024dc:	687b      	ldr	r3, [r7, #4]
200024de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200024e0:	687b      	ldr	r3, [r7, #4]
200024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200024e4:	1c58      	adds	r0, r3, #1
200024e6:	6879      	ldr	r1, [r7, #4]
200024e8:	6588      	str	r0, [r1, #88]	; 0x58
200024ea:	4413      	add	r3, r2
200024ec:	7b7a      	ldrb	r2, [r7, #13]
200024ee:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:893
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
200024f0:	687b      	ldr	r3, [r7, #4]
200024f2:	68db      	ldr	r3, [r3, #12]
200024f4:	021a      	lsls	r2, r3, #8
200024f6:	7b7b      	ldrb	r3, [r7, #13]
200024f8:	441a      	add	r2, r3
200024fa:	687b      	ldr	r3, [r7, #4]
200024fc:	60da      	str	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:899
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
200024fe:	687b      	ldr	r3, [r7, #4]
20002500:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20002502:	687b      	ldr	r3, [r7, #4]
20002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002506:	429a      	cmp	r2, r3
20002508:	f0c0 80e3 	bcc.w	200026d2 <mss_i2c_isr+0x82a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:901
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
2000250c:	687b      	ldr	r3, [r7, #4]
2000250e:	699b      	ldr	r3, [r3, #24]
20002510:	2200      	movs	r2, #0
20002512:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:903
            }
            break;
20002514:	e0dd      	b.n	200026d2 <mss_i2c_isr+0x82a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:911
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20002516:	687b      	ldr	r3, [r7, #4]
20002518:	7a1b      	ldrb	r3, [r3, #8]
2000251a:	2b04      	cmp	r3, #4
2000251c:	d131      	bne.n	20002582 <mss_i2c_isr+0x6da>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:913
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
2000251e:	687b      	ldr	r3, [r7, #4]
20002520:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20002522:	687b      	ldr	r3, [r7, #4]
20002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20002526:	429a      	cmp	r2, r3
20002528:	d103      	bne.n	20002532 <mss_i2c_isr+0x68a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:915
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
2000252a:	687b      	ldr	r3, [r7, #4]
2000252c:	68da      	ldr	r2, [r3, #12]
2000252e:	687b      	ldr	r3, [r7, #4]
20002530:	64da      	str	r2, [r3, #76]	; 0x4c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:919
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
20002532:	687b      	ldr	r3, [r7, #4]
20002534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20002536:	2b00      	cmp	r3, #0
20002538:	d01e      	beq.n	20002578 <mss_i2c_isr+0x6d0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:922
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
2000253a:	687b      	ldr	r3, [r7, #4]
2000253c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2000253e:	687a      	ldr	r2, [r7, #4]
20002540:	6d11      	ldr	r1, [r2, #80]	; 0x50
20002542:	687a      	ldr	r2, [r7, #4]
20002544:	6d92      	ldr	r2, [r2, #88]	; 0x58
20002546:	b292      	uxth	r2, r2
20002548:	6878      	ldr	r0, [r7, #4]
2000254a:	4798      	blx	r3
2000254c:	4603      	mov	r3, r0
2000254e:	733b      	strb	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:923
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20002550:	7b3b      	ldrb	r3, [r7, #12]
20002552:	2b00      	cmp	r3, #0
20002554:	d107      	bne.n	20002566 <mss_i2c_isr+0x6be>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:929
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
20002556:	6878      	ldr	r0, [r7, #4]
20002558:	f7ff fc94 	bl	20001e84 <enable_slave_if_required>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:930
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000255c:	687b      	ldr	r3, [r7, #4]
2000255e:	699b      	ldr	r3, [r3, #24]
20002560:	2201      	movs	r2, #1
20002562:	609a      	str	r2, [r3, #8]
20002564:	e013      	b.n	2000258e <mss_i2c_isr+0x6e6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:934
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
20002566:	687b      	ldr	r3, [r7, #4]
20002568:	699b      	ldr	r3, [r3, #24]
2000256a:	2200      	movs	r2, #0
2000256c:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:938
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
2000256e:	687b      	ldr	r3, [r7, #4]
20002570:	2200      	movs	r2, #0
20002572:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
20002576:	e00a      	b.n	2000258e <mss_i2c_isr+0x6e6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:944
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002578:	687b      	ldr	r3, [r7, #4]
2000257a:	699b      	ldr	r3, [r3, #24]
2000257c:	2201      	movs	r2, #1
2000257e:	609a      	str	r2, [r3, #8]
20002580:	e005      	b.n	2000258e <mss_i2c_isr+0x6e6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:954
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20002582:	687b      	ldr	r3, [r7, #4]
20002584:	2200      	movs	r2, #0
20002586:	64da      	str	r2, [r3, #76]	; 0x4c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:960
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20002588:	6878      	ldr	r0, [r7, #4]
2000258a:	f7ff fc7b 	bl	20001e84 <enable_slave_if_required>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:964
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
2000258e:	687b      	ldr	r3, [r7, #4]
20002590:	2200      	movs	r2, #0
20002592:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:967

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20002596:	687b      	ldr	r3, [r7, #4]
20002598:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
2000259c:	2b00      	cmp	r3, #0
2000259e:	d003      	beq.n	200025a8 <mss_i2c_isr+0x700>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:969
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
200025a0:	687b      	ldr	r3, [r7, #4]
200025a2:	699b      	ldr	r3, [r3, #24]
200025a4:	2201      	movs	r2, #1
200025a6:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:976

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200025a8:	687b      	ldr	r3, [r7, #4]
200025aa:	2200      	movs	r2, #0
200025ac:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:977
            break;
200025ae:	e095      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:984
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
200025b0:	687b      	ldr	r3, [r7, #4]
200025b2:	2200      	movs	r2, #0
200025b4:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:989
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
200025b6:	687b      	ldr	r3, [r7, #4]
200025b8:	2200      	movs	r2, #0
200025ba:	64da      	str	r2, [r3, #76]	; 0x4c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:993
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
200025bc:	687b      	ldr	r3, [r7, #4]
200025be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
200025c2:	b2db      	uxtb	r3, r3
200025c4:	2b01      	cmp	r3, #1
200025c6:	d103      	bne.n	200025d0 <mss_i2c_isr+0x728>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:995
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
200025c8:	687b      	ldr	r3, [r7, #4]
200025ca:	2202      	movs	r2, #2
200025cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:998
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
200025d0:	6878      	ldr	r0, [r7, #4]
200025d2:	f7ff fc57 	bl	20001e84 <enable_slave_if_required>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1000

            break;
200025d6:	e081      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1006
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
200025d8:	7afb      	ldrb	r3, [r7, #11]
200025da:	b2db      	uxtb	r3, r3
200025dc:	2ba8      	cmp	r3, #168	; 0xa8
200025de:	d116      	bne.n	2000260e <mss_i2c_isr+0x766>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1008
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
200025e0:	687b      	ldr	r3, [r7, #4]
200025e2:	2205      	movs	r2, #5
200025e4:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1009
                this_i2c->random_read_addr = 0u;
200025e6:	687b      	ldr	r3, [r7, #4]
200025e8:	2200      	movs	r2, #0
200025ea:	60da      	str	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1011

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
200025ec:	687b      	ldr	r3, [r7, #4]
200025ee:	2201      	movs	r2, #1
200025f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1016

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
200025f4:	687b      	ldr	r3, [r7, #4]
200025f6:	699b      	ldr	r3, [r3, #24]
200025f8:	695b      	ldr	r3, [r3, #20]
200025fa:	2b00      	cmp	r3, #0
200025fc:	d007      	beq.n	2000260e <mss_i2c_isr+0x766>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1018
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
200025fe:	687b      	ldr	r3, [r7, #4]
20002600:	699b      	ldr	r3, [r3, #24]
20002602:	2200      	movs	r2, #0
20002604:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1019
                    this_i2c->is_transaction_pending = 1u;
20002606:	687b      	ldr	r3, [r7, #4]
20002608:	2201      	movs	r2, #1
2000260a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1022
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
2000260e:	687b      	ldr	r3, [r7, #4]
20002610:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20002612:	687b      	ldr	r3, [r7, #4]
20002614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002616:	429a      	cmp	r2, r3
20002618:	d304      	bcc.n	20002624 <mss_i2c_isr+0x77c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1026
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
2000261a:	687b      	ldr	r3, [r7, #4]
2000261c:	695b      	ldr	r3, [r3, #20]
2000261e:	22ff      	movs	r2, #255	; 0xff
20002620:	721a      	strb	r2, [r3, #8]
20002622:	e00b      	b.n	2000263c <mss_i2c_isr+0x794>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1031
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
20002624:	687b      	ldr	r3, [r7, #4]
20002626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20002628:	687b      	ldr	r3, [r7, #4]
2000262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000262c:	1c58      	adds	r0, r3, #1
2000262e:	6879      	ldr	r1, [r7, #4]
20002630:	64c8      	str	r0, [r1, #76]	; 0x4c
20002632:	441a      	add	r2, r3
20002634:	687b      	ldr	r3, [r7, #4]
20002636:	695b      	ldr	r3, [r3, #20]
20002638:	7812      	ldrb	r2, [r2, #0]
2000263a:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1034
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
2000263c:	687b      	ldr	r3, [r7, #4]
2000263e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20002640:	687b      	ldr	r3, [r7, #4]
20002642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002644:	429a      	cmp	r2, r3
20002646:	d346      	bcc.n	200026d6 <mss_i2c_isr+0x82e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1036
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20002648:	687b      	ldr	r3, [r7, #4]
2000264a:	699b      	ldr	r3, [r3, #24]
2000264c:	2200      	movs	r2, #0
2000264e:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1039
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20002650:	687b      	ldr	r3, [r7, #4]
20002652:	2200      	movs	r2, #0
20002654:	64da      	str	r2, [r3, #76]	; 0x4c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1041
            }
            break;
20002656:	e03e      	b.n	200026d6 <mss_i2c_isr+0x82e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1048
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20002658:	687b      	ldr	r3, [r7, #4]
2000265a:	2200      	movs	r2, #0
2000265c:	64da      	str	r2, [r3, #76]	; 0x4c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1049
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000265e:	687b      	ldr	r3, [r7, #4]
20002660:	699b      	ldr	r3, [r3, #24]
20002662:	2201      	movs	r2, #1
20002664:	609a      	str	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1052

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20002666:	687b      	ldr	r3, [r7, #4]
20002668:	2200      	movs	r2, #0
2000266a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1055

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
2000266e:	687b      	ldr	r3, [r7, #4]
20002670:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20002674:	2b00      	cmp	r3, #0
20002676:	d003      	beq.n	20002680 <mss_i2c_isr+0x7d8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1057
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20002678:	687b      	ldr	r3, [r7, #4]
2000267a:	699b      	ldr	r3, [r3, #24]
2000267c:	2201      	movs	r2, #1
2000267e:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1064

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002680:	687b      	ldr	r3, [r7, #4]
20002682:	2200      	movs	r2, #0
20002684:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1065
            break;
20002686:	e029      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1074
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
20002688:	687b      	ldr	r3, [r7, #4]
2000268a:	699b      	ldr	r3, [r3, #24]
2000268c:	2200      	movs	r2, #0
2000268e:	615a      	str	r2, [r3, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1079
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002690:	687b      	ldr	r3, [r7, #4]
20002692:	2200      	movs	r2, #0
20002694:	721a      	strb	r2, [r3, #8]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1084
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20002696:	687b      	ldr	r3, [r7, #4]
20002698:	2200      	movs	r2, #0
2000269a:	64da      	str	r2, [r3, #76]	; 0x4c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1088
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
2000269c:	687b      	ldr	r3, [r7, #4]
2000269e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
200026a2:	b2db      	uxtb	r3, r3
200026a4:	2b01      	cmp	r3, #1
200026a6:	d103      	bne.n	200026b0 <mss_i2c_isr+0x808>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1090
            {
                this_i2c->master_status = MSS_I2C_FAILED;
200026a8:	687b      	ldr	r3, [r7, #4]
200026aa:	2202      	movs	r2, #2
200026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1093
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
200026b0:	687b      	ldr	r3, [r7, #4]
200026b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
200026b6:	b2db      	uxtb	r3, r3
200026b8:	2b01      	cmp	r3, #1
200026ba:	d10e      	bne.n	200026da <mss_i2c_isr+0x832>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1095
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
200026bc:	687b      	ldr	r3, [r7, #4]
200026be:	2202      	movs	r2, #2
200026c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1099
            }


            break;
200026c4:	e009      	b.n	200026da <mss_i2c_isr+0x832>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:680
            break;
200026c6:	bf00      	nop
200026c8:	e008      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:799
            break;
200026ca:	bf00      	nop
200026cc:	e006      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:843
            break;
200026ce:	bf00      	nop
200026d0:	e004      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:903
            break;
200026d2:	bf00      	nop
200026d4:	e002      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1041
            break;
200026d6:	bf00      	nop
200026d8:	e000      	b.n	200026dc <mss_i2c_isr+0x834>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1099
            break;
200026da:	bf00      	nop
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1102
    }
    
    if ( clear_irq )
200026dc:	7bfb      	ldrb	r3, [r7, #15]
200026de:	2b00      	cmp	r3, #0
200026e0:	d003      	beq.n	200026ea <mss_i2c_isr+0x842>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1105
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
200026e2:	687b      	ldr	r3, [r7, #4]
200026e4:	699b      	ldr	r3, [r3, #24]
200026e6:	2200      	movs	r2, #0
200026e8:	60da      	str	r2, [r3, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1110
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
200026ea:	687b      	ldr	r3, [r7, #4]
200026ec:	695b      	ldr	r3, [r3, #20]
200026ee:	791b      	ldrb	r3, [r3, #4]
200026f0:	72fb      	strb	r3, [r7, #11]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1111
}
200026f2:	bf00      	nop
200026f4:	3714      	adds	r7, #20
200026f6:	46bd      	mov	sp, r7
200026f8:	bd90      	pop	{r4, r7, pc}
200026fa:	bf00      	nop

200026fc <I2C0_IRQHandler>:
I2C0_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1378
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
200026fc:	4668      	mov	r0, sp
200026fe:	f020 0107 	bic.w	r1, r0, #7
20002702:	468d      	mov	sp, r1
20002704:	b589      	push	{r0, r3, r7, lr}
20002706:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1379
    mss_i2c_isr( &g_mss_i2c0 );
20002708:	4804      	ldr	r0, [pc, #16]	; (2000271c <I2C0_IRQHandler+0x20>)
2000270a:	f7ff fbcd 	bl	20001ea8 <mss_i2c_isr>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1380
}
2000270e:	bf00      	nop
20002710:	46bd      	mov	sp, r7
20002712:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002716:	4685      	mov	sp, r0
20002718:	4770      	bx	lr
2000271a:	bf00      	nop
2000271c:	20003e24 	.word	0x20003e24

20002720 <I2C1_IRQHandler>:
I2C1_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1390
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
20002720:	4668      	mov	r0, sp
20002722:	f020 0107 	bic.w	r1, r0, #7
20002726:	468d      	mov	sp, r1
20002728:	b589      	push	{r0, r3, r7, lr}
2000272a:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1391
    mss_i2c_isr( &g_mss_i2c1 );
2000272c:	4804      	ldr	r0, [pc, #16]	; (20002740 <I2C1_IRQHandler+0x20>)
2000272e:	f7ff fbbb 	bl	20001ea8 <mss_i2c_isr>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_i2c/mss_i2c.c:1392
}
20002732:	bf00      	nop
20002734:	46bd      	mov	sp, r7
20002736:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000273a:	4685      	mov	sp, r0
2000273c:	4770      	bx	lr
2000273e:	bf00      	nop
20002740:	20003e98 	.word	0x20003e98

20002744 <start_transfer>:
start_transfer():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:197
    uint32_t src_addr,
    uint32_t dest_addr,
    uint32_t transfer_size,
    uint8_t transfer_dir
)
{
20002744:	b480      	push	{r7}
20002746:	b085      	sub	sp, #20
20002748:	af00      	add	r7, sp, #0
2000274a:	60f8      	str	r0, [r7, #12]
2000274c:	60b9      	str	r1, [r7, #8]
2000274e:	607a      	str	r2, [r7, #4]
20002750:	70fb      	strb	r3, [r7, #3]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:199
    /* Set descriptor transfer direction */
    HPDMA_BITBAND->Descriptor[g_hpdma_end_desc].HPDMACR_DCP_XFR_DIR = transfer_dir;
20002752:	484d      	ldr	r0, [pc, #308]	; (20002888 <start_transfer+0x144>)
20002754:	4b4d      	ldr	r3, [pc, #308]	; (2000288c <start_transfer+0x148>)
20002756:	681a      	ldr	r2, [r3, #0]
20002758:	78f9      	ldrb	r1, [r7, #3]
2000275a:	4613      	mov	r3, r2
2000275c:	009b      	lsls	r3, r3, #2
2000275e:	4413      	add	r3, r2
20002760:	01db      	lsls	r3, r3, #7
20002762:	4403      	add	r3, r0
20002764:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
20002768:	6019      	str	r1, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:202
    
    /* Store Source and destination Address */
    HPDMA->Descriptor[g_hpdma_end_desc].HPDMASAR_REG = src_addr;
2000276a:	4949      	ldr	r1, [pc, #292]	; (20002890 <start_transfer+0x14c>)
2000276c:	4b47      	ldr	r3, [pc, #284]	; (2000288c <start_transfer+0x148>)
2000276e:	681a      	ldr	r2, [r3, #0]
20002770:	4613      	mov	r3, r2
20002772:	009b      	lsls	r3, r3, #2
20002774:	4413      	add	r3, r2
20002776:	009b      	lsls	r3, r3, #2
20002778:	440b      	add	r3, r1
2000277a:	3304      	adds	r3, #4
2000277c:	68fa      	ldr	r2, [r7, #12]
2000277e:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:203
    HPDMA->Descriptor[g_hpdma_end_desc].HPDMADAR_REG = dest_addr;
20002780:	4943      	ldr	r1, [pc, #268]	; (20002890 <start_transfer+0x14c>)
20002782:	4b42      	ldr	r3, [pc, #264]	; (2000288c <start_transfer+0x148>)
20002784:	681a      	ldr	r2, [r3, #0]
20002786:	4613      	mov	r3, r2
20002788:	009b      	lsls	r3, r3, #2
2000278a:	4413      	add	r3, r2
2000278c:	009b      	lsls	r3, r3, #2
2000278e:	440b      	add	r3, r1
20002790:	3308      	adds	r3, #8
20002792:	68ba      	ldr	r2, [r7, #8]
20002794:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:206
    
    /* Set the transfer size to 64K */
    HPDMA->Descriptor[g_hpdma_end_desc].HPDMACR_REG &= HPDMA_XFR_SIZE_MASK;
20002796:	493e      	ldr	r1, [pc, #248]	; (20002890 <start_transfer+0x14c>)
20002798:	4b3c      	ldr	r3, [pc, #240]	; (2000288c <start_transfer+0x148>)
2000279a:	681a      	ldr	r2, [r3, #0]
2000279c:	4613      	mov	r3, r2
2000279e:	009b      	lsls	r3, r3, #2
200027a0:	4413      	add	r3, r2
200027a2:	009b      	lsls	r3, r3, #2
200027a4:	440b      	add	r3, r1
200027a6:	330c      	adds	r3, #12
200027a8:	681b      	ldr	r3, [r3, #0]
200027aa:	4839      	ldr	r0, [pc, #228]	; (20002890 <start_transfer+0x14c>)
200027ac:	4a37      	ldr	r2, [pc, #220]	; (2000288c <start_transfer+0x148>)
200027ae:	6811      	ldr	r1, [r2, #0]
200027b0:	0c1a      	lsrs	r2, r3, #16
200027b2:	0412      	lsls	r2, r2, #16
200027b4:	460b      	mov	r3, r1
200027b6:	009b      	lsls	r3, r3, #2
200027b8:	440b      	add	r3, r1
200027ba:	009b      	lsls	r3, r3, #2
200027bc:	4403      	add	r3, r0
200027be:	330c      	adds	r3, #12
200027c0:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:208
    
    if(transfer_size > MAX_SIZE_PER_DMA_XFR)
200027c2:	687b      	ldr	r3, [r7, #4]
200027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200027c8:	d90f      	bls.n	200027ea <start_transfer+0xa6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:210
    {
        g_transfer.xfr_size = transfer_size - MAX_SIZE_PER_DMA_XFR;
200027ca:	687b      	ldr	r3, [r7, #4]
200027cc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
200027d0:	4a30      	ldr	r2, [pc, #192]	; (20002894 <start_transfer+0x150>)
200027d2:	6113      	str	r3, [r2, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:211
        g_transfer.des_addr = dest_addr + MAX_SIZE_PER_DMA_XFR;
200027d4:	68bb      	ldr	r3, [r7, #8]
200027d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
200027da:	4a2e      	ldr	r2, [pc, #184]	; (20002894 <start_transfer+0x150>)
200027dc:	60d3      	str	r3, [r2, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:212
        g_transfer.src_addr = src_addr + MAX_SIZE_PER_DMA_XFR; 
200027de:	68fb      	ldr	r3, [r7, #12]
200027e0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
200027e4:	4a2b      	ldr	r2, [pc, #172]	; (20002894 <start_transfer+0x150>)
200027e6:	6093      	str	r3, [r2, #8]
200027e8:	e01a      	b.n	20002820 <start_transfer+0xdc>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:217
    }
    else
    {
        /* Set descriptor transfer size */
        HPDMA->Descriptor[g_hpdma_end_desc].HPDMACR_REG |= (uint16_t)transfer_size;
200027ea:	4929      	ldr	r1, [pc, #164]	; (20002890 <start_transfer+0x14c>)
200027ec:	4b27      	ldr	r3, [pc, #156]	; (2000288c <start_transfer+0x148>)
200027ee:	681a      	ldr	r2, [r3, #0]
200027f0:	4613      	mov	r3, r2
200027f2:	009b      	lsls	r3, r3, #2
200027f4:	4413      	add	r3, r2
200027f6:	009b      	lsls	r3, r3, #2
200027f8:	440b      	add	r3, r1
200027fa:	330c      	adds	r3, #12
200027fc:	681b      	ldr	r3, [r3, #0]
200027fe:	687a      	ldr	r2, [r7, #4]
20002800:	b292      	uxth	r2, r2
20002802:	4611      	mov	r1, r2
20002804:	4822      	ldr	r0, [pc, #136]	; (20002890 <start_transfer+0x14c>)
20002806:	4a21      	ldr	r2, [pc, #132]	; (2000288c <start_transfer+0x148>)
20002808:	6812      	ldr	r2, [r2, #0]
2000280a:	4319      	orrs	r1, r3
2000280c:	4613      	mov	r3, r2
2000280e:	009b      	lsls	r3, r3, #2
20002810:	4413      	add	r3, r2
20002812:	009b      	lsls	r3, r3, #2
20002814:	4403      	add	r3, r0
20002816:	330c      	adds	r3, #12
20002818:	6019      	str	r1, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:218
        g_transfer.xfr_size = 0u;     
2000281a:	4b1e      	ldr	r3, [pc, #120]	; (20002894 <start_transfer+0x150>)
2000281c:	2200      	movs	r2, #0
2000281e:	611a      	str	r2, [r3, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:221
    }    
    /* Enable interrupts for the requested descriptor. */
    HPDMA->Descriptor[g_hpdma_end_desc].HPDMACR_REG |= HPDMACR_ALL_IRQ_ENABLE_MASK;       
20002820:	491b      	ldr	r1, [pc, #108]	; (20002890 <start_transfer+0x14c>)
20002822:	4b1a      	ldr	r3, [pc, #104]	; (2000288c <start_transfer+0x148>)
20002824:	681a      	ldr	r2, [r3, #0]
20002826:	4613      	mov	r3, r2
20002828:	009b      	lsls	r3, r3, #2
2000282a:	4413      	add	r3, r2
2000282c:	009b      	lsls	r3, r3, #2
2000282e:	440b      	add	r3, r1
20002830:	330c      	adds	r3, #12
20002832:	681b      	ldr	r3, [r3, #0]
20002834:	4816      	ldr	r0, [pc, #88]	; (20002890 <start_transfer+0x14c>)
20002836:	4a15      	ldr	r2, [pc, #84]	; (2000288c <start_transfer+0x148>)
20002838:	6812      	ldr	r2, [r2, #0]
2000283a:	f443 01e0 	orr.w	r1, r3, #7340032	; 0x700000
2000283e:	4613      	mov	r3, r2
20002840:	009b      	lsls	r3, r3, #2
20002842:	4413      	add	r3, r2
20002844:	009b      	lsls	r3, r3, #2
20002846:	4403      	add	r3, r0
20002848:	330c      	adds	r3, #12
2000284a:	6019      	str	r1, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:223
    /* Set valid descriptor to start transfer */
    HPDMA_BITBAND->Descriptor[g_hpdma_end_desc].HPDMACR_DCP_VALID = HPDMA_ENABLE;  
2000284c:	490e      	ldr	r1, [pc, #56]	; (20002888 <start_transfer+0x144>)
2000284e:	4b0f      	ldr	r3, [pc, #60]	; (2000288c <start_transfer+0x148>)
20002850:	681a      	ldr	r2, [r3, #0]
20002852:	4613      	mov	r3, r2
20002854:	009b      	lsls	r3, r3, #2
20002856:	4413      	add	r3, r2
20002858:	01db      	lsls	r3, r3, #7
2000285a:	440b      	add	r3, r1
2000285c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
20002860:	2201      	movs	r2, #1
20002862:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:225
    /* Start transfer */
    HPDMA_BITBAND->Descriptor[g_hpdma_end_desc].HPDMACR_DCP_PAUSE = HPDMA_DISABLE;        
20002864:	4908      	ldr	r1, [pc, #32]	; (20002888 <start_transfer+0x144>)
20002866:	4b09      	ldr	r3, [pc, #36]	; (2000288c <start_transfer+0x148>)
20002868:	681a      	ldr	r2, [r3, #0]
2000286a:	4613      	mov	r3, r2
2000286c:	009b      	lsls	r3, r3, #2
2000286e:	4413      	add	r3, r2
20002870:	01db      	lsls	r3, r3, #7
20002872:	440b      	add	r3, r1
20002874:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
20002878:	2200      	movs	r2, #0
2000287a:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:226
}
2000287c:	bf00      	nop
2000287e:	3714      	adds	r7, #20
20002880:	46bd      	mov	sp, r7
20002882:	bc80      	pop	{r7}
20002884:	4770      	bx	lr
20002886:	bf00      	nop
20002888:	42280000 	.word	0x42280000
2000288c:	20003c80 	.word	0x20003c80
20002890:	40014000 	.word	0x40014000
20002894:	20003c68 	.word	0x20003c68

20002898 <HPDMA_Complete_IRQHandler>:
HPDMA_Complete_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:313
#if defined(__GNUC__)
__attribute__((__interrupt__)) void HPDMA_Complete_IRQHandler(void)
#else
void HPDMA_Complete_IRQHandler(void)
#endif 
{
20002898:	4668      	mov	r0, sp
2000289a:	f020 0107 	bic.w	r1, r0, #7
2000289e:	468d      	mov	sp, r1
200028a0:	b589      	push	{r0, r3, r7, lr}
200028a2:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:315
    /* Clear interrupt */
    HPDMA_BITBAND->HPDMAICR_CLR_XFR_INT[g_hpdma_current_desc] = HPDMA_ENABLE;
200028a4:	4a35      	ldr	r2, [pc, #212]	; (2000297c <HPDMA_Complete_IRQHandler+0xe4>)
200028a6:	4b36      	ldr	r3, [pc, #216]	; (20002980 <HPDMA_Complete_IRQHandler+0xe8>)
200028a8:	681b      	ldr	r3, [r3, #0]
200028aa:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
200028ae:	2101      	movs	r1, #1
200028b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:317
    /* Disable interrupts */
    HPDMA->Descriptor[g_hpdma_current_desc].HPDMACR_REG &= ~HPDMACR_ALL_IRQ_ENABLE_MASK;
200028b4:	4933      	ldr	r1, [pc, #204]	; (20002984 <HPDMA_Complete_IRQHandler+0xec>)
200028b6:	4b32      	ldr	r3, [pc, #200]	; (20002980 <HPDMA_Complete_IRQHandler+0xe8>)
200028b8:	681a      	ldr	r2, [r3, #0]
200028ba:	4613      	mov	r3, r2
200028bc:	009b      	lsls	r3, r3, #2
200028be:	4413      	add	r3, r2
200028c0:	009b      	lsls	r3, r3, #2
200028c2:	440b      	add	r3, r1
200028c4:	330c      	adds	r3, #12
200028c6:	681b      	ldr	r3, [r3, #0]
200028c8:	482e      	ldr	r0, [pc, #184]	; (20002984 <HPDMA_Complete_IRQHandler+0xec>)
200028ca:	4a2d      	ldr	r2, [pc, #180]	; (20002980 <HPDMA_Complete_IRQHandler+0xe8>)
200028cc:	6812      	ldr	r2, [r2, #0]
200028ce:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
200028d2:	4613      	mov	r3, r2
200028d4:	009b      	lsls	r3, r3, #2
200028d6:	4413      	add	r3, r2
200028d8:	009b      	lsls	r3, r3, #2
200028da:	4403      	add	r3, r0
200028dc:	330c      	adds	r3, #12
200028de:	6019      	str	r1, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:319
    
    ++g_hpdma_current_desc;
200028e0:	4b27      	ldr	r3, [pc, #156]	; (20002980 <HPDMA_Complete_IRQHandler+0xe8>)
200028e2:	681b      	ldr	r3, [r3, #0]
200028e4:	3301      	adds	r3, #1
200028e6:	4a26      	ldr	r2, [pc, #152]	; (20002980 <HPDMA_Complete_IRQHandler+0xe8>)
200028e8:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:321
    
    if(NO_OF_HPDMA_DESCRIPTORS == g_hpdma_current_desc)
200028ea:	4b25      	ldr	r3, [pc, #148]	; (20002980 <HPDMA_Complete_IRQHandler+0xe8>)
200028ec:	681b      	ldr	r3, [r3, #0]
200028ee:	2b04      	cmp	r3, #4
200028f0:	d102      	bne.n	200028f8 <HPDMA_Complete_IRQHandler+0x60>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:323
    {
        g_hpdma_current_desc = 0u;
200028f2:	4b23      	ldr	r3, [pc, #140]	; (20002980 <HPDMA_Complete_IRQHandler+0xe8>)
200028f4:	2200      	movs	r2, #0
200028f6:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:326
    } 
    
    if(g_transfer.xfr_size > 0u)
200028f8:	4b23      	ldr	r3, [pc, #140]	; (20002988 <HPDMA_Complete_IRQHandler+0xf0>)
200028fa:	691b      	ldr	r3, [r3, #16]
200028fc:	2b00      	cmp	r3, #0
200028fe:	d017      	beq.n	20002930 <HPDMA_Complete_IRQHandler+0x98>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:328
    {
        if(NO_OF_HPDMA_DESCRIPTORS == g_hpdma_end_desc)
20002900:	4b22      	ldr	r3, [pc, #136]	; (2000298c <HPDMA_Complete_IRQHandler+0xf4>)
20002902:	681b      	ldr	r3, [r3, #0]
20002904:	2b04      	cmp	r3, #4
20002906:	d103      	bne.n	20002910 <HPDMA_Complete_IRQHandler+0x78>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:330
        {
            g_hpdma_end_desc = 0u;
20002908:	4b20      	ldr	r3, [pc, #128]	; (2000298c <HPDMA_Complete_IRQHandler+0xf4>)
2000290a:	2200      	movs	r2, #0
2000290c:	601a      	str	r2, [r3, #0]
2000290e:	e004      	b.n	2000291a <HPDMA_Complete_IRQHandler+0x82>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:334
        }
        else
        {
            ++g_hpdma_end_desc;
20002910:	4b1e      	ldr	r3, [pc, #120]	; (2000298c <HPDMA_Complete_IRQHandler+0xf4>)
20002912:	681b      	ldr	r3, [r3, #0]
20002914:	3301      	adds	r3, #1
20002916:	4a1d      	ldr	r2, [pc, #116]	; (2000298c <HPDMA_Complete_IRQHandler+0xf4>)
20002918:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:336
        }
        start_transfer(g_transfer.src_addr,
2000291a:	4b1b      	ldr	r3, [pc, #108]	; (20002988 <HPDMA_Complete_IRQHandler+0xf0>)
2000291c:	6898      	ldr	r0, [r3, #8]
2000291e:	4b1a      	ldr	r3, [pc, #104]	; (20002988 <HPDMA_Complete_IRQHandler+0xf0>)
20002920:	68d9      	ldr	r1, [r3, #12]
20002922:	4b19      	ldr	r3, [pc, #100]	; (20002988 <HPDMA_Complete_IRQHandler+0xf0>)
20002924:	691a      	ldr	r2, [r3, #16]
20002926:	4b18      	ldr	r3, [pc, #96]	; (20002988 <HPDMA_Complete_IRQHandler+0xf0>)
20002928:	7d1b      	ldrb	r3, [r3, #20]
2000292a:	f7ff ff0b 	bl	20002744 <start_transfer>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:355
            {
                (*(g_transfer.completion_handler))(HPDMA_COMPLETED);
            }  
        }
    }
}
2000292e:	e01e      	b.n	2000296e <HPDMA_Complete_IRQHandler+0xd6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:343
        if(((HPDMA->Descriptor[g_hpdma_current_desc].HPDMACR_REG) & HPDMACR_ALL_IRQ_ENABLE_MASK) == 0u)  
20002930:	4914      	ldr	r1, [pc, #80]	; (20002984 <HPDMA_Complete_IRQHandler+0xec>)
20002932:	4b13      	ldr	r3, [pc, #76]	; (20002980 <HPDMA_Complete_IRQHandler+0xe8>)
20002934:	681a      	ldr	r2, [r3, #0]
20002936:	4613      	mov	r3, r2
20002938:	009b      	lsls	r3, r3, #2
2000293a:	4413      	add	r3, r2
2000293c:	009b      	lsls	r3, r3, #2
2000293e:	440b      	add	r3, r1
20002940:	330c      	adds	r3, #12
20002942:	681b      	ldr	r3, [r3, #0]
20002944:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
20002948:	2b00      	cmp	r3, #0
2000294a:	d110      	bne.n	2000296e <HPDMA_Complete_IRQHandler+0xd6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:345
            g_hpdma_current_desc = 0u;
2000294c:	4b0c      	ldr	r3, [pc, #48]	; (20002980 <HPDMA_Complete_IRQHandler+0xe8>)
2000294e:	2200      	movs	r2, #0
20002950:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:346
            g_hpdma_end_desc = 0u;
20002952:	4b0e      	ldr	r3, [pc, #56]	; (2000298c <HPDMA_Complete_IRQHandler+0xf4>)
20002954:	2200      	movs	r2, #0
20002956:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:348
            g_transfer.state = HPDMA_COMPLETED;
20002958:	4b0b      	ldr	r3, [pc, #44]	; (20002988 <HPDMA_Complete_IRQHandler+0xf0>)
2000295a:	2201      	movs	r2, #1
2000295c:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:349
            if(g_transfer.completion_handler != NULL_HANDLER)
2000295e:	4b0a      	ldr	r3, [pc, #40]	; (20002988 <HPDMA_Complete_IRQHandler+0xf0>)
20002960:	685b      	ldr	r3, [r3, #4]
20002962:	2b00      	cmp	r3, #0
20002964:	d003      	beq.n	2000296e <HPDMA_Complete_IRQHandler+0xd6>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:351
                (*(g_transfer.completion_handler))(HPDMA_COMPLETED);
20002966:	4b08      	ldr	r3, [pc, #32]	; (20002988 <HPDMA_Complete_IRQHandler+0xf0>)
20002968:	685b      	ldr	r3, [r3, #4]
2000296a:	2001      	movs	r0, #1
2000296c:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:355
}
2000296e:	bf00      	nop
20002970:	46bd      	mov	sp, r7
20002972:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002976:	4685      	mov	sp, r0
20002978:	4770      	bx	lr
2000297a:	bf00      	nop
2000297c:	42280000 	.word	0x42280000
20002980:	20003c84 	.word	0x20003c84
20002984:	40014000 	.word	0x40014000
20002988:	20003c68 	.word	0x20003c68
2000298c:	20003c80 	.word	0x20003c80

20002990 <HPDMA_Error_IRQHandler>:
HPDMA_Error_IRQHandler():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:367
#if defined(__GNUC__)
__attribute__((__interrupt__)) void HPDMA_Error_IRQHandler(void)
#else
void HPDMA_Error_IRQHandler(void)
#endif 
{
20002990:	4668      	mov	r0, sp
20002992:	f020 0107 	bic.w	r1, r0, #7
20002996:	468d      	mov	sp, r1
20002998:	b581      	push	{r0, r7, lr}
2000299a:	b083      	sub	sp, #12
2000299c:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:374
    uint32_t inc;

    /*
     * Handle source/destination errors.
     */
    error_bits = HPDMA->HPDMAEDR_REG;
2000299e:	4b38      	ldr	r3, [pc, #224]	; (20002a80 <HPDMA_Error_IRQHandler+0xf0>)
200029a0:	681b      	ldr	r3, [r3, #0]
200029a2:	603b      	str	r3, [r7, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:375
    error_bits = error_bits & HPDMAEDR_DCP_ERR_MASK;
200029a4:	683b      	ldr	r3, [r7, #0]
200029a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
200029aa:	603b      	str	r3, [r7, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:377
    
    if(error_bits != 0u)
200029ac:	683b      	ldr	r3, [r7, #0]
200029ae:	2b00      	cmp	r3, #0
200029b0:	d02f      	beq.n	20002a12 <HPDMA_Error_IRQHandler+0x82>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:379
    {
        if(HPDMA_BITBAND->Descriptor[g_hpdma_current_desc].HPDMASR_DCP_SERR != 0u)
200029b2:	4934      	ldr	r1, [pc, #208]	; (20002a84 <HPDMA_Error_IRQHandler+0xf4>)
200029b4:	4b34      	ldr	r3, [pc, #208]	; (20002a88 <HPDMA_Error_IRQHandler+0xf8>)
200029b6:	681a      	ldr	r2, [r3, #0]
200029b8:	4613      	mov	r3, r2
200029ba:	009b      	lsls	r3, r3, #2
200029bc:	4413      	add	r3, r2
200029be:	01db      	lsls	r3, r3, #7
200029c0:	440b      	add	r3, r1
200029c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
200029c6:	681b      	ldr	r3, [r3, #0]
200029c8:	2b00      	cmp	r3, #0
200029ca:	d00a      	beq.n	200029e2 <HPDMA_Error_IRQHandler+0x52>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:381
        {
            g_transfer.state = HPDMA_SOURCE_ERROR;
200029cc:	4b2f      	ldr	r3, [pc, #188]	; (20002a8c <HPDMA_Error_IRQHandler+0xfc>)
200029ce:	2202      	movs	r2, #2
200029d0:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:382
            if(g_transfer.completion_handler != NULL_HANDLER)
200029d2:	4b2e      	ldr	r3, [pc, #184]	; (20002a8c <HPDMA_Error_IRQHandler+0xfc>)
200029d4:	685b      	ldr	r3, [r3, #4]
200029d6:	2b00      	cmp	r3, #0
200029d8:	d003      	beq.n	200029e2 <HPDMA_Error_IRQHandler+0x52>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:384
            {                        
                (*(g_transfer.completion_handler))(HPDMA_SOURCE_ERROR);
200029da:	4b2c      	ldr	r3, [pc, #176]	; (20002a8c <HPDMA_Error_IRQHandler+0xfc>)
200029dc:	685b      	ldr	r3, [r3, #4]
200029de:	2002      	movs	r0, #2
200029e0:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:388
            }
        }
        
        if(HPDMA_BITBAND->Descriptor[g_hpdma_current_desc].HPDMASR_DCP_DERR != 0u)
200029e2:	4928      	ldr	r1, [pc, #160]	; (20002a84 <HPDMA_Error_IRQHandler+0xf4>)
200029e4:	4b28      	ldr	r3, [pc, #160]	; (20002a88 <HPDMA_Error_IRQHandler+0xf8>)
200029e6:	681a      	ldr	r2, [r3, #0]
200029e8:	4613      	mov	r3, r2
200029ea:	009b      	lsls	r3, r3, #2
200029ec:	4413      	add	r3, r2
200029ee:	01db      	lsls	r3, r3, #7
200029f0:	440b      	add	r3, r1
200029f2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
200029f6:	681b      	ldr	r3, [r3, #0]
200029f8:	2b00      	cmp	r3, #0
200029fa:	d00a      	beq.n	20002a12 <HPDMA_Error_IRQHandler+0x82>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:390
        {
            g_transfer.state = HPDMA_DESTINATION_ERROR;
200029fc:	4b23      	ldr	r3, [pc, #140]	; (20002a8c <HPDMA_Error_IRQHandler+0xfc>)
200029fe:	2203      	movs	r2, #3
20002a00:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:391
            if(g_transfer.completion_handler != NULL_HANDLER)
20002a02:	4b22      	ldr	r3, [pc, #136]	; (20002a8c <HPDMA_Error_IRQHandler+0xfc>)
20002a04:	685b      	ldr	r3, [r3, #4]
20002a06:	2b00      	cmp	r3, #0
20002a08:	d003      	beq.n	20002a12 <HPDMA_Error_IRQHandler+0x82>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:393
            {                        
                (*(g_transfer.completion_handler))(HPDMA_DESTINATION_ERROR);
20002a0a:	4b20      	ldr	r3, [pc, #128]	; (20002a8c <HPDMA_Error_IRQHandler+0xfc>)
20002a0c:	685b      	ldr	r3, [r3, #4]
20002a0e:	2003      	movs	r0, #3
20002a10:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:401
    }
    
    /*
     * Handle non word aligned errors.
     */
    error_bits = HPDMA->HPDMAEDR_REG;
20002a12:	4b1b      	ldr	r3, [pc, #108]	; (20002a80 <HPDMA_Error_IRQHandler+0xf0>)
20002a14:	681b      	ldr	r3, [r3, #0]
20002a16:	603b      	str	r3, [r7, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:402
    error_bits = error_bits & HPDMAEDR_NON_WORD_ERR_MASK;
20002a18:	683b      	ldr	r3, [r7, #0]
20002a1a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
20002a1e:	603b      	str	r3, [r7, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:404
    
    if(error_bits != 0u)
20002a20:	683b      	ldr	r3, [r7, #0]
20002a22:	2b00      	cmp	r3, #0
20002a24:	d00a      	beq.n	20002a3c <HPDMA_Error_IRQHandler+0xac>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:406
    {
        g_transfer.state = HPDMA_WORD_ALIGN_ERROR;
20002a26:	4b19      	ldr	r3, [pc, #100]	; (20002a8c <HPDMA_Error_IRQHandler+0xfc>)
20002a28:	2204      	movs	r2, #4
20002a2a:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:408
        /* Call handler. */
        if(g_transfer.completion_handler != NULL_HANDLER)
20002a2c:	4b17      	ldr	r3, [pc, #92]	; (20002a8c <HPDMA_Error_IRQHandler+0xfc>)
20002a2e:	685b      	ldr	r3, [r3, #4]
20002a30:	2b00      	cmp	r3, #0
20002a32:	d003      	beq.n	20002a3c <HPDMA_Error_IRQHandler+0xac>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:410
        {
            (*(g_transfer.completion_handler))(HPDMA_WORD_ALIGN_ERROR);
20002a34:	4b15      	ldr	r3, [pc, #84]	; (20002a8c <HPDMA_Error_IRQHandler+0xfc>)
20002a36:	685b      	ldr	r3, [r3, #4]
20002a38:	2004      	movs	r0, #4
20002a3a:	4798      	blx	r3
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:414
        }
    }
    
    for(inc = 0u; inc < NO_OF_HPDMA_DESCRIPTORS; inc++)
20002a3c:	2300      	movs	r3, #0
20002a3e:	607b      	str	r3, [r7, #4]
20002a40:	e014      	b.n	20002a6c <HPDMA_Error_IRQHandler+0xdc>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:417 (discriminator 3)
    {
        /* Abort transfer. */
        HPDMA_BITBAND->Descriptor[inc].HPDMACR_DCP_CLR = HPDMA_ENABLE;
20002a42:	4910      	ldr	r1, [pc, #64]	; (20002a84 <HPDMA_Error_IRQHandler+0xf4>)
20002a44:	687a      	ldr	r2, [r7, #4]
20002a46:	4613      	mov	r3, r2
20002a48:	009b      	lsls	r3, r3, #2
20002a4a:	4413      	add	r3, r2
20002a4c:	01db      	lsls	r3, r3, #7
20002a4e:	440b      	add	r3, r1
20002a50:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
20002a54:	2201      	movs	r2, #1
20002a56:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:419 (discriminator 3)
        /* Clear interrupt. */
        HPDMA_BITBAND->HPDMAICR_CLR_XFR_INT[inc] = HPDMA_ENABLE;
20002a58:	4a0a      	ldr	r2, [pc, #40]	; (20002a84 <HPDMA_Error_IRQHandler+0xf4>)
20002a5a:	687b      	ldr	r3, [r7, #4]
20002a5c:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
20002a60:	2101      	movs	r1, #1
20002a62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:414 (discriminator 3)
    for(inc = 0u; inc < NO_OF_HPDMA_DESCRIPTORS; inc++)
20002a66:	687b      	ldr	r3, [r7, #4]
20002a68:	3301      	adds	r3, #1
20002a6a:	607b      	str	r3, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:414 (discriminator 1)
20002a6c:	687b      	ldr	r3, [r7, #4]
20002a6e:	2b03      	cmp	r3, #3
20002a70:	d9e7      	bls.n	20002a42 <HPDMA_Error_IRQHandler+0xb2>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_hpdma/mss_hpdma.c:421
    }
}
20002a72:	bf00      	nop
20002a74:	370c      	adds	r7, #12
20002a76:	46bd      	mov	sp, r7
20002a78:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
20002a7c:	4685      	mov	sp, r0
20002a7e:	4770      	bx	lr
20002a80:	40014000 	.word	0x40014000
20002a84:	42280000 	.word	0x42280000
20002a88:	20003c84 	.word	0x20003c84
20002a8c:	20003c68 	.word	0x20003c68

20002a90 <NVIC_DisableIRQ>:
NVIC_DisableIRQ():
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1464
{
20002a90:	b480      	push	{r7}
20002a92:	b083      	sub	sp, #12
20002a94:	af00      	add	r7, sp, #0
20002a96:	4603      	mov	r3, r0
20002a98:	71fb      	strb	r3, [r7, #7]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1465
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
20002a9a:	79fb      	ldrb	r3, [r7, #7]
20002a9c:	f003 021f 	and.w	r2, r3, #31
20002aa0:	4907      	ldr	r1, [pc, #28]	; (20002ac0 <NVIC_DisableIRQ+0x30>)
20002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002aa6:	095b      	lsrs	r3, r3, #5
20002aa8:	2001      	movs	r0, #1
20002aaa:	fa00 f202 	lsl.w	r2, r0, r2
20002aae:	3320      	adds	r3, #32
20002ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1466
}
20002ab4:	bf00      	nop
20002ab6:	370c      	adds	r7, #12
20002ab8:	46bd      	mov	sp, r7
20002aba:	bc80      	pop	{r7}
20002abc:	4770      	bx	lr
20002abe:	bf00      	nop
20002ac0:	e000e100 	.word	0xe000e100

20002ac4 <NVIC_ClearPendingIRQ>:
NVIC_ClearPendingIRQ():
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1499
{
20002ac4:	b480      	push	{r7}
20002ac6:	b083      	sub	sp, #12
20002ac8:	af00      	add	r7, sp, #0
20002aca:	4603      	mov	r3, r0
20002acc:	71fb      	strb	r3, [r7, #7]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1500
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
20002ace:	79fb      	ldrb	r3, [r7, #7]
20002ad0:	f003 021f 	and.w	r2, r3, #31
20002ad4:	4907      	ldr	r1, [pc, #28]	; (20002af4 <NVIC_ClearPendingIRQ+0x30>)
20002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002ada:	095b      	lsrs	r3, r3, #5
20002adc:	2001      	movs	r0, #1
20002ade:	fa00 f202 	lsl.w	r2, r0, r2
20002ae2:	3360      	adds	r3, #96	; 0x60
20002ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
c:\microsemi\softconsole_v6.2\cmsis\v4.5\include/core_cm3.h:1501
}
20002ae8:	bf00      	nop
20002aea:	370c      	adds	r7, #12
20002aec:	46bd      	mov	sp, r7
20002aee:	bc80      	pop	{r7}
20002af0:	4770      	bx	lr
20002af2:	bf00      	nop
20002af4:	e000e100 	.word	0xe000e100

20002af8 <MSS_GPIO_init>:
MSS_GPIO_init():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:107
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
20002af8:	b580      	push	{r7, lr}
20002afa:	b082      	sub	sp, #8
20002afc:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:111
    uint32_t inc;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20002afe:	4b1a      	ldr	r3, [pc, #104]	; (20002b68 <MSS_GPIO_init+0x70>)
20002b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002b02:	4a19      	ldr	r2, [pc, #100]	; (20002b68 <MSS_GPIO_init+0x70>)
20002b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20002b08:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:112
    SYSREG->SOFT_RST_CR |= (SYSREG_GPIO_7_0_SOFTRESET_MASK |
20002b0a:	4b17      	ldr	r3, [pc, #92]	; (20002b68 <MSS_GPIO_init+0x70>)
20002b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002b0e:	4a16      	ldr	r2, [pc, #88]	; (20002b68 <MSS_GPIO_init+0x70>)
20002b10:	f043 73f0 	orr.w	r3, r3, #31457280	; 0x1e00000
20002b14:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:118
                            SYSREG_GPIO_15_8_SOFTRESET_MASK |
                            SYSREG_GPIO_23_16_SOFTRESET_MASK |
                            SYSREG_GPIO_31_24_SOFTRESET_MASK);
                            
    /* Clear any previously pended MSS GPIO interrupt */
    for(inc = 0U; inc < NB_OF_GPIO; ++inc)
20002b16:	2300      	movs	r3, #0
20002b18:	607b      	str	r3, [r7, #4]
20002b1a:	e012      	b.n	20002b42 <MSS_GPIO_init+0x4a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:120 (discriminator 3)
    {
        NVIC_DisableIRQ(g_gpio_irqn_lut[inc]);
20002b1c:	4a13      	ldr	r2, [pc, #76]	; (20002b6c <MSS_GPIO_init+0x74>)
20002b1e:	687b      	ldr	r3, [r7, #4]
20002b20:	4413      	add	r3, r2
20002b22:	f993 3000 	ldrsb.w	r3, [r3]
20002b26:	4618      	mov	r0, r3
20002b28:	f7ff ffb2 	bl	20002a90 <NVIC_DisableIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:121 (discriminator 3)
        NVIC_ClearPendingIRQ(g_gpio_irqn_lut[inc]);
20002b2c:	4a0f      	ldr	r2, [pc, #60]	; (20002b6c <MSS_GPIO_init+0x74>)
20002b2e:	687b      	ldr	r3, [r7, #4]
20002b30:	4413      	add	r3, r2
20002b32:	f993 3000 	ldrsb.w	r3, [r3]
20002b36:	4618      	mov	r0, r3
20002b38:	f7ff ffc4 	bl	20002ac4 <NVIC_ClearPendingIRQ>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:118 (discriminator 3)
    for(inc = 0U; inc < NB_OF_GPIO; ++inc)
20002b3c:	687b      	ldr	r3, [r7, #4]
20002b3e:	3301      	adds	r3, #1
20002b40:	607b      	str	r3, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:118 (discriminator 1)
20002b42:	687b      	ldr	r3, [r7, #4]
20002b44:	2b1f      	cmp	r3, #31
20002b46:	d9e9      	bls.n	20002b1c <MSS_GPIO_init+0x24>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:124
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~(SYSREG_GPIO_7_0_SOFTRESET_MASK |
20002b48:	4b07      	ldr	r3, [pc, #28]	; (20002b68 <MSS_GPIO_init+0x70>)
20002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002b4c:	4a06      	ldr	r2, [pc, #24]	; (20002b68 <MSS_GPIO_init+0x70>)
20002b4e:	f023 73f0 	bic.w	r3, r3, #31457280	; 0x1e00000
20002b52:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:128
                             SYSREG_GPIO_15_8_SOFTRESET_MASK |
                             SYSREG_GPIO_23_16_SOFTRESET_MASK |
                             SYSREG_GPIO_31_24_SOFTRESET_MASK);
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
20002b54:	4b04      	ldr	r3, [pc, #16]	; (20002b68 <MSS_GPIO_init+0x70>)
20002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002b58:	4a03      	ldr	r2, [pc, #12]	; (20002b68 <MSS_GPIO_init+0x70>)
20002b5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
20002b5e:	6493      	str	r3, [r2, #72]	; 0x48
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:129
}
20002b60:	bf00      	nop
20002b62:	3708      	adds	r7, #8
20002b64:	46bd      	mov	sp, r7
20002b66:	bd80      	pop	{r7, pc}
20002b68:	40038000 	.word	0x40038000
20002b6c:	20003758 	.word	0x20003758

20002b70 <MSS_GPIO_config>:
MSS_GPIO_config():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:140
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
20002b70:	b480      	push	{r7}
20002b72:	b085      	sub	sp, #20
20002b74:	af00      	add	r7, sp, #0
20002b76:	4603      	mov	r3, r0
20002b78:	6039      	str	r1, [r7, #0]
20002b7a:	71fb      	strb	r3, [r7, #7]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:141
    uint32_t gpio_idx = (uint32_t)port_id;
20002b7c:	79fb      	ldrb	r3, [r7, #7]
20002b7e:	60fb      	str	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:143
    
    ASSERT(gpio_idx < NB_OF_GPIO);
20002b80:	68fb      	ldr	r3, [r7, #12]
20002b82:	2b1f      	cmp	r3, #31
20002b84:	d900      	bls.n	20002b88 <MSS_GPIO_config+0x18>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:143 (discriminator 1)
20002b86:	be00      	bkpt	0x0000
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:145

    if(gpio_idx < NB_OF_GPIO)
20002b88:	68fb      	ldr	r3, [r7, #12]
20002b8a:	2b1f      	cmp	r3, #31
20002b8c:	d805      	bhi.n	20002b9a <MSS_GPIO_config+0x2a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:147
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20002b8e:	4a05      	ldr	r2, [pc, #20]	; (20002ba4 <MSS_GPIO_config+0x34>)
20002b90:	68fb      	ldr	r3, [r7, #12]
20002b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20002b96:	683a      	ldr	r2, [r7, #0]
20002b98:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/drivers/mss_gpio/mss_gpio.c:149
    }
}
20002b9a:	bf00      	nop
20002b9c:	3714      	adds	r7, #20
20002b9e:	46bd      	mov	sp, r7
20002ba0:	bc80      	pop	{r7}
20002ba2:	4770      	bx	lr
20002ba4:	200036d8 	.word	0x200036d8

20002ba8 <SystemInit>:
SystemInit():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:433

/***************************************************************************//**
 * See system_m2sxxx.h for details.
 */
void SystemInit(void)
{
20002ba8:	b580      	push	{r7, lr}
20002baa:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:456
     */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
    complete_clock_config();
#endif

    silicon_workarounds();
20002bac:	f000 f8f8 	bl	20002da0 <silicon_workarounds>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:463
    /*--------------------------------------------------------------------------
     * Set STKALIGN to ensure exception stacking starts on 8 bytes address
     * boundary. This ensures compliance with the "Procedure Call Standards for
     * the ARM Architecture" (AAPCS).
     */
    SCB->CCR |= SCB_CCR_STKALIGN_Msk;
20002bb0:	4b04      	ldr	r3, [pc, #16]	; (20002bc4 <SystemInit+0x1c>)
20002bb2:	695b      	ldr	r3, [r3, #20]
20002bb4:	4a03      	ldr	r2, [pc, #12]	; (20002bc4 <SystemInit+0x1c>)
20002bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20002bba:	6153      	str	r3, [r2, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:492
#endif

    /*--------------------------------------------------------------------------
     * Call user defined configuration function.
     */
    mscc_post_hw_cfg_init();
20002bbc:	f7fd fc3a 	bl	20000434 <mscc_post_hw_cfg_init>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:539
    do
    {
        init_done = CORE_SF2_CFG->INIT_DONE & INIT_DONE_MASK;
    } while (0u == init_done);
#endif
}
20002bc0:	bf00      	nop
20002bc2:	bd80      	pop	{r7, pc}
20002bc4:	e000ed00 	.word	0xe000ed00

20002bc8 <SystemCoreClockUpdate>:
SystemCoreClockUpdate():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:558
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
20002bc8:	b580      	push	{r7, lr}
20002bca:	b088      	sub	sp, #32
20002bcc:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:562
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;
20002bce:	4b30      	ldr	r3, [pc, #192]	; (20002c90 <SystemCoreClockUpdate+0xc8>)
20002bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20002bd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
20002bd8:	61fb      	str	r3, [r7, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:564

    if(0u == controller_pll_init)
20002bda:	69fb      	ldr	r3, [r7, #28]
20002bdc:	2b00      	cmp	r3, #0
20002bde:	d14c      	bne.n	20002c7a <SystemCoreClockUpdate+0xb2>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:569
    {
        /* Normal operations. */
        uint32_t global_mux_sel;

        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
20002be0:	4b2b      	ldr	r3, [pc, #172]	; (20002c90 <SystemCoreClockUpdate+0xc8>)
20002be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20002be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
20002bea:	61bb      	str	r3, [r7, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:570
        if(0u == global_mux_sel)
20002bec:	69bb      	ldr	r3, [r7, #24]
20002bee:	2b00      	cmp	r3, #0
20002bf0:	d115      	bne.n	20002c1e <SystemCoreClockUpdate+0x56>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:573
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
20002bf2:	4b28      	ldr	r3, [pc, #160]	; (20002c94 <SystemCoreClockUpdate+0xcc>)
20002bf4:	4a28      	ldr	r2, [pc, #160]	; (20002c98 <SystemCoreClockUpdate+0xd0>)
20002bf6:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:574
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
20002bf8:	4b28      	ldr	r3, [pc, #160]	; (20002c9c <SystemCoreClockUpdate+0xd4>)
20002bfa:	4a27      	ldr	r2, [pc, #156]	; (20002c98 <SystemCoreClockUpdate+0xd0>)
20002bfc:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:575
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
20002bfe:	4b28      	ldr	r3, [pc, #160]	; (20002ca0 <SystemCoreClockUpdate+0xd8>)
20002c00:	4a25      	ldr	r2, [pc, #148]	; (20002c98 <SystemCoreClockUpdate+0xd0>)
20002c02:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:576
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
20002c04:	4b27      	ldr	r3, [pc, #156]	; (20002ca4 <SystemCoreClockUpdate+0xdc>)
20002c06:	4a28      	ldr	r2, [pc, #160]	; (20002ca8 <SystemCoreClockUpdate+0xe0>)
20002c08:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:577
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
20002c0a:	4b28      	ldr	r3, [pc, #160]	; (20002cac <SystemCoreClockUpdate+0xe4>)
20002c0c:	4a22      	ldr	r2, [pc, #136]	; (20002c98 <SystemCoreClockUpdate+0xd0>)
20002c0e:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:578
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
20002c10:	4b27      	ldr	r3, [pc, #156]	; (20002cb0 <SystemCoreClockUpdate+0xe8>)
20002c12:	4a21      	ldr	r2, [pc, #132]	; (20002c98 <SystemCoreClockUpdate+0xd0>)
20002c14:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:579
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
20002c16:	4b27      	ldr	r3, [pc, #156]	; (20002cb4 <SystemCoreClockUpdate+0xec>)
20002c18:	4a1f      	ldr	r2, [pc, #124]	; (20002c98 <SystemCoreClockUpdate+0xd0>)
20002c1a:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:627
    {
        /* PLL initialization mode. Running from 25/50MHZ RC oscillator. */
        clk_src = get_rcosc_25_50mhz_frequency();
        set_clock_frequency_globals(clk_src);
    }
}
20002c1c:	e034      	b.n	20002c88 <SystemCoreClockUpdate+0xc0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:584
            const uint8_t standby_clock_lut[8] = { RCOSC_25_50MHZ_CLK_SRC,
20002c1e:	4a26      	ldr	r2, [pc, #152]	; (20002cb8 <SystemCoreClockUpdate+0xf0>)
20002c20:	1d3b      	adds	r3, r7, #4
20002c22:	e892 0003 	ldmia.w	r2, {r0, r1}
20002c26:	e883 0003 	stmia.w	r3, {r0, r1}
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:596
            standby_sel = (SYSREG->MSSDDR_FACC2_CR >> FACC_STANDBY_SHIFT) & FACC_STANDBY_SEL_MASK;
20002c2a:	4b19      	ldr	r3, [pc, #100]	; (20002c90 <SystemCoreClockUpdate+0xc8>)
20002c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
20002c30:	099b      	lsrs	r3, r3, #6
20002c32:	f003 0307 	and.w	r3, r3, #7
20002c36:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:597
            clock_source = standby_clock_lut[standby_sel];
20002c38:	1d3a      	adds	r2, r7, #4
20002c3a:	697b      	ldr	r3, [r7, #20]
20002c3c:	4413      	add	r3, r2
20002c3e:	781b      	ldrb	r3, [r3, #0]
20002c40:	74fb      	strb	r3, [r7, #19]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:598
            switch(clock_source)
20002c42:	7cfb      	ldrb	r3, [r7, #19]
20002c44:	2b01      	cmp	r3, #1
20002c46:	d00a      	beq.n	20002c5e <SystemCoreClockUpdate+0x96>
20002c48:	2b02      	cmp	r3, #2
20002c4a:	d00d      	beq.n	20002c68 <SystemCoreClockUpdate+0xa0>
20002c4c:	2b00      	cmp	r3, #0
20002c4e:	d10f      	bne.n	20002c70 <SystemCoreClockUpdate+0xa8>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:601
                    clk_src = get_rcosc_25_50mhz_frequency();
20002c50:	f000 f836 	bl	20002cc0 <get_rcosc_25_50mhz_frequency>
20002c54:	60f8      	str	r0, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:602
                    set_clock_frequency_globals(clk_src);
20002c56:	68f8      	ldr	r0, [r7, #12]
20002c58:	f000 f850 	bl	20002cfc <set_clock_frequency_globals>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:603
                break;
20002c5c:	e014      	b.n	20002c88 <SystemCoreClockUpdate+0xc0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:606
                    set_clock_frequency_globals(FREQ_32KHZ);
20002c5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20002c62:	f000 f84b 	bl	20002cfc <set_clock_frequency_globals>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:607
                break;
20002c66:	e00f      	b.n	20002c88 <SystemCoreClockUpdate+0xc0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:610
                    set_clock_frequency_globals(FREQ_1MHZ);
20002c68:	4814      	ldr	r0, [pc, #80]	; (20002cbc <SystemCoreClockUpdate+0xf4>)
20002c6a:	f000 f847 	bl	20002cfc <set_clock_frequency_globals>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:611
                break;
20002c6e:	e00b      	b.n	20002c88 <SystemCoreClockUpdate+0xc0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:616
                    set_clock_frequency_globals(FREQ_1MHZ);
20002c70:	4812      	ldr	r0, [pc, #72]	; (20002cbc <SystemCoreClockUpdate+0xf4>)
20002c72:	f000 f843 	bl	20002cfc <set_clock_frequency_globals>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:617
                break;
20002c76:	bf00      	nop
20002c78:	e006      	b.n	20002c88 <SystemCoreClockUpdate+0xc0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:624
        clk_src = get_rcosc_25_50mhz_frequency();
20002c7a:	f000 f821 	bl	20002cc0 <get_rcosc_25_50mhz_frequency>
20002c7e:	60f8      	str	r0, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:625
        set_clock_frequency_globals(clk_src);
20002c80:	68f8      	ldr	r0, [r7, #12]
20002c82:	f000 f83b 	bl	20002cfc <set_clock_frequency_globals>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:627
}
20002c86:	e7ff      	b.n	20002c88 <SystemCoreClockUpdate+0xc0>
20002c88:	bf00      	nop
20002c8a:	3720      	adds	r7, #32
20002c8c:	46bd      	mov	sp, r7
20002c8e:	bd80      	pop	{r7, pc}
20002c90:	40038000 	.word	0x40038000
20002c94:	20003ba0 	.word	0x20003ba0
20002c98:	05f5e100 	.word	0x05f5e100
20002c9c:	20003ba4 	.word	0x20003ba4
20002ca0:	20003ba8 	.word	0x20003ba8
20002ca4:	20003bac 	.word	0x20003bac
20002ca8:	017d7840 	.word	0x017d7840
20002cac:	20003bb0 	.word	0x20003bb0
20002cb0:	20003bb4 	.word	0x20003bb4
20002cb4:	20003bb8 	.word	0x20003bb8
20002cb8:	20003778 	.word	0x20003778
20002cbc:	000f4240 	.word	0x000f4240

20002cc0 <get_rcosc_25_50mhz_frequency>:
get_rcosc_25_50mhz_frequency():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:633

/***************************************************************************//**
 * Find out frequency generated by the 25_50mhz RC osciallator.
 */
static uint32_t get_rcosc_25_50mhz_frequency(void)
{
20002cc0:	b480      	push	{r7}
20002cc2:	b083      	sub	sp, #12
20002cc4:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:637
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;

    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
20002cc6:	4b0a      	ldr	r3, [pc, #40]	; (20002cf0 <get_rcosc_25_50mhz_frequency+0x30>)
20002cc8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20002ccc:	f003 0304 	and.w	r3, r3, #4
20002cd0:	603b      	str	r3, [r7, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:638
    if(0u == rcosc_div2)
20002cd2:	683b      	ldr	r3, [r7, #0]
20002cd4:	2b00      	cmp	r3, #0
20002cd6:	d102      	bne.n	20002cde <get_rcosc_25_50mhz_frequency+0x1e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:641
    {
        /* 25_50mhz oscillator is configured for 25 MHz operations. */
        rcosc_frequency = FREQ_25MHZ;
20002cd8:	4b06      	ldr	r3, [pc, #24]	; (20002cf4 <get_rcosc_25_50mhz_frequency+0x34>)
20002cda:	607b      	str	r3, [r7, #4]
20002cdc:	e001      	b.n	20002ce2 <get_rcosc_25_50mhz_frequency+0x22>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:646
    }
    else
    {
        /* 25_50mhz oscillator is configured for 50 MHz operations. */
        rcosc_frequency = FREQ_50MHZ;
20002cde:	4b06      	ldr	r3, [pc, #24]	; (20002cf8 <get_rcosc_25_50mhz_frequency+0x38>)
20002ce0:	607b      	str	r3, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:649
    }

    return rcosc_frequency;
20002ce2:	687b      	ldr	r3, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:650
}
20002ce4:	4618      	mov	r0, r3
20002ce6:	370c      	adds	r7, #12
20002ce8:	46bd      	mov	sp, r7
20002cea:	bc80      	pop	{r7}
20002cec:	4770      	bx	lr
20002cee:	bf00      	nop
20002cf0:	40038000 	.word	0x40038000
20002cf4:	017d7840 	.word	0x017d7840
20002cf8:	02faf080 	.word	0x02faf080

20002cfc <set_clock_frequency_globals>:
set_clock_frequency_globals():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:665
        - g_FrequencyFIC0
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
20002cfc:	b480      	push	{r7}
20002cfe:	b083      	sub	sp, #12
20002d00:	af00      	add	r7, sp, #0
20002d02:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:666
    SystemCoreClock = standby_clk;
20002d04:	4a0c      	ldr	r2, [pc, #48]	; (20002d38 <set_clock_frequency_globals+0x3c>)
20002d06:	687b      	ldr	r3, [r7, #4]
20002d08:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:667
    g_FrequencyPCLK0 = standby_clk;
20002d0a:	4a0c      	ldr	r2, [pc, #48]	; (20002d3c <set_clock_frequency_globals+0x40>)
20002d0c:	687b      	ldr	r3, [r7, #4]
20002d0e:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:668
    g_FrequencyPCLK1 = standby_clk;
20002d10:	4a0b      	ldr	r2, [pc, #44]	; (20002d40 <set_clock_frequency_globals+0x44>)
20002d12:	687b      	ldr	r3, [r7, #4]
20002d14:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:669
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
20002d16:	4b0b      	ldr	r3, [pc, #44]	; (20002d44 <set_clock_frequency_globals+0x48>)
20002d18:	4a0b      	ldr	r2, [pc, #44]	; (20002d48 <set_clock_frequency_globals+0x4c>)
20002d1a:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:670
    g_FrequencyFIC0 = standby_clk;
20002d1c:	4a0b      	ldr	r2, [pc, #44]	; (20002d4c <set_clock_frequency_globals+0x50>)
20002d1e:	687b      	ldr	r3, [r7, #4]
20002d20:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:671
    g_FrequencyFIC1 = standby_clk;
20002d22:	4a0b      	ldr	r2, [pc, #44]	; (20002d50 <set_clock_frequency_globals+0x54>)
20002d24:	687b      	ldr	r3, [r7, #4]
20002d26:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:672
    g_FrequencyFIC64 = standby_clk;
20002d28:	4a0a      	ldr	r2, [pc, #40]	; (20002d54 <set_clock_frequency_globals+0x58>)
20002d2a:	687b      	ldr	r3, [r7, #4]
20002d2c:	6013      	str	r3, [r2, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:673
}
20002d2e:	bf00      	nop
20002d30:	370c      	adds	r7, #12
20002d32:	46bd      	mov	sp, r7
20002d34:	bc80      	pop	{r7}
20002d36:	4770      	bx	lr
20002d38:	20003ba0 	.word	0x20003ba0
20002d3c:	20003ba4 	.word	0x20003ba4
20002d40:	20003ba8 	.word	0x20003ba8
20002d44:	20003bac 	.word	0x20003bac
20002d48:	017d7840 	.word	0x017d7840
20002d4c:	20003bb0 	.word	0x20003bb0
20002d50:	20003bb4 	.word	0x20003bb4
20002d54:	20003bb8 	.word	0x20003bb8

20002d58 <get_silicon_revision>:
get_silicon_revision():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:916

/*------------------------------------------------------------------------------
  Retrieve silicon revision from system registers.
 */
static uint32_t get_silicon_revision(void)
{
20002d58:	b480      	push	{r7}
20002d5a:	b083      	sub	sp, #12
20002d5c:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:920
    uint32_t silicon_revision;
    uint32_t device_version;

    device_version = SYSREG->DEVICE_VERSION;
20002d5e:	4b0e      	ldr	r3, [pc, #56]	; (20002d98 <get_silicon_revision+0x40>)
20002d60:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
20002d64:	603b      	str	r3, [r7, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:921
    switch(device_version)
20002d66:	683b      	ldr	r3, [r7, #0]
20002d68:	f64f 0202 	movw	r2, #63490	; 0xf802
20002d6c:	4293      	cmp	r3, r2
20002d6e:	d004      	beq.n	20002d7a <get_silicon_revision+0x22>
20002d70:	683b      	ldr	r3, [r7, #0]
20002d72:	4a0a      	ldr	r2, [pc, #40]	; (20002d9c <get_silicon_revision+0x44>)
20002d74:	4293      	cmp	r3, r2
20002d76:	d003      	beq.n	20002d80 <get_silicon_revision+0x28>
20002d78:	e005      	b.n	20002d86 <get_silicon_revision+0x2e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:924
    {
        case 0x0000F802:
            silicon_revision = M2S050_REV_A_SILICON;
20002d7a:	2301      	movs	r3, #1
20002d7c:	607b      	str	r3, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:925
            break;
20002d7e:	e005      	b.n	20002d8c <get_silicon_revision+0x34>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:928

        case 0x0001F802:
            silicon_revision = M2S050_REV_B_SILICON;
20002d80:	2302      	movs	r3, #2
20002d82:	607b      	str	r3, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:929
            break;
20002d84:	e002      	b.n	20002d8c <get_silicon_revision+0x34>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:932

        default:
            silicon_revision = UNKNOWN_SILICON_REV;
20002d86:	2300      	movs	r3, #0
20002d88:	607b      	str	r3, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:933
            break;
20002d8a:	bf00      	nop
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:936
    }

    return silicon_revision;
20002d8c:	687b      	ldr	r3, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:937
}
20002d8e:	4618      	mov	r0, r3
20002d90:	370c      	adds	r7, #12
20002d92:	46bd      	mov	sp, r7
20002d94:	bc80      	pop	{r7}
20002d96:	4770      	bx	lr
20002d98:	40038000 	.word	0x40038000
20002d9c:	0001f802 	.word	0x0001f802

20002da0 <silicon_workarounds>:
silicon_workarounds():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:943

/*------------------------------------------------------------------------------
  Workarounds for various silicon versions.
 */
static void silicon_workarounds(void)
{
20002da0:	b580      	push	{r7, lr}
20002da2:	b082      	sub	sp, #8
20002da4:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:946
    uint32_t silicon_revision;

    silicon_revision = get_silicon_revision();
20002da6:	f7ff ffd7 	bl	20002d58 <get_silicon_revision>
20002daa:	6078      	str	r0, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:948

    switch(silicon_revision)
20002dac:	687b      	ldr	r3, [r7, #4]
20002dae:	2b01      	cmp	r3, #1
20002db0:	d102      	bne.n	20002db8 <silicon_workarounds+0x18>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:951
    {
        case M2S050_REV_A_SILICON:
            m2s050_rev_a_workarounds();
20002db2:	f000 f807 	bl	20002dc4 <m2s050_rev_a_workarounds>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:952
            break;
20002db6:	e000      	b.n	20002dba <silicon_workarounds+0x1a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:959
        case M2S050_REV_B_SILICON:
            /* Fall through. */
        case UNKNOWN_SILICON_REV:
            /* Fall through. */
        default:
            break;
20002db8:	bf00      	nop
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:961
    }
}
20002dba:	bf00      	nop
20002dbc:	3708      	adds	r7, #8
20002dbe:	46bd      	mov	sp, r7
20002dc0:	bd80      	pop	{r7, pc}
	...

20002dc4 <m2s050_rev_a_workarounds>:
m2s050_rev_a_workarounds():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:967

/*------------------------------------------------------------------------------
  Silicon workarounds for M2S050 rev A.
 */
static void m2s050_rev_a_workarounds(void)
{
20002dc4:	b480      	push	{r7}
20002dc6:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:972
    /*--------------------------------------------------------------------------
     * Work around a couple of silicon issues:
     */
    /* DDR_CLK_EN <- 1 */
    SYSREG->MSSDDR_FACC1_CR |= (uint32_t)1 << DDR_CLK_EN_SHIFT;
20002dc8:	4b09      	ldr	r3, [pc, #36]	; (20002df0 <m2s050_rev_a_workarounds+0x2c>)
20002dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20002dce:	4a08      	ldr	r2, [pc, #32]	; (20002df0 <m2s050_rev_a_workarounds+0x2c>)
20002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20002dd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:975

    /* CONTROLLER_PLL_INIT <- 0 */
    SYSREG->MSSDDR_FACC1_CR = SYSREG->MSSDDR_FACC1_CR & ~CONTROLLER_PLL_INIT_MASK;
20002dd8:	4b05      	ldr	r3, [pc, #20]	; (20002df0 <m2s050_rev_a_workarounds+0x2c>)
20002dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20002dde:	4a04      	ldr	r2, [pc, #16]	; (20002df0 <m2s050_rev_a_workarounds+0x2c>)
20002de0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
20002de4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../firmware/CMSIS/system_m2sxxx.c:976
}
20002de8:	bf00      	nop
20002dea:	46bd      	mov	sp, r7
20002dec:	bc80      	pop	{r7}
20002dee:	4770      	bx	lr
20002df0:	40038000 	.word	0x40038000

20002df4 <main>:
main():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:75

/***************************************************************************//**
 * main function.
 */
int main()
{
20002df4:	b580      	push	{r7, lr}
20002df6:	b084      	sub	sp, #16
20002df8:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:76
	volatile uint8_t errors = 0;
20002dfa:	2300      	movs	r3, #0
20002dfc:	73fb      	strb	r3, [r7, #15]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:81
	uint8_t buff[10];
	uint8_t man_id, dev_id, dev_type;


	MSS_UART_init(&g_mss_uart0,
20002dfe:	2203      	movs	r2, #3
20002e00:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
20002e04:	4837      	ldr	r0, [pc, #220]	; (20002ee4 <main+0xf0>)
20002e06:	f7fd fc09 	bl	2000061c <MSS_UART_init>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:84
			MSS_UART_115200_BAUD,
			MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
	MSS_UART_polled_tx_string(&g_mss_uart0, g_greeting_msg);
20002e0a:	4937      	ldr	r1, [pc, #220]	; (20002ee8 <main+0xf4>)
20002e0c:	4835      	ldr	r0, [pc, #212]	; (20002ee4 <main+0xf0>)
20002e0e:	f7fd fc3d 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:86

	MSS_GPIO_init();
20002e12:	f7ff fe71 	bl	20002af8 <MSS_GPIO_init>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:90
	/*--------------------------------------------------------------------------
	 * Flash Driver Initialization
	 */
	FLASH_init();
20002e16:	f000 f991 	bl	2000313c <FLASH_init>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:92

	FLASH_global_unprotect();
20002e1a:	f000 fa03 	bl	20003224 <FLASH_global_unprotect>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:96

	/*--------------------------------------------------------------------------
	 * Check SPI Flash part manufacturer and device ID.*/
	FLASH_read_device_id(&man_id, &dev_type, &dev_id);
20002e1e:	1cba      	adds	r2, r7, #2
20002e20:	1c79      	adds	r1, r7, #1
20002e22:	1cfb      	adds	r3, r7, #3
20002e24:	4618      	mov	r0, r3
20002e26:	f000 f99d 	bl	20003164 <FLASH_read_device_id>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:97
	itoa(man_id, buff, 16);
20002e2a:	78fb      	ldrb	r3, [r7, #3]
20002e2c:	4618      	mov	r0, r3
20002e2e:	1d3b      	adds	r3, r7, #4
20002e30:	2210      	movs	r2, #16
20002e32:	4619      	mov	r1, r3
20002e34:	f000 fb84 	bl	20003540 <itoa>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:98
	MSS_UART_polled_tx_string(&g_mss_uart0, "\r\nManuf ID:");
20002e38:	492c      	ldr	r1, [pc, #176]	; (20002eec <main+0xf8>)
20002e3a:	482a      	ldr	r0, [pc, #168]	; (20002ee4 <main+0xf0>)
20002e3c:	f7fd fc26 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:99
	MSS_UART_polled_tx_string(&g_mss_uart0, buff);
20002e40:	1d3b      	adds	r3, r7, #4
20002e42:	4619      	mov	r1, r3
20002e44:	4827      	ldr	r0, [pc, #156]	; (20002ee4 <main+0xf0>)
20002e46:	f7fd fc21 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:101

	memset(buff, 0, sizeof(buff));
20002e4a:	1d3b      	adds	r3, r7, #4
20002e4c:	220a      	movs	r2, #10
20002e4e:	2100      	movs	r1, #0
20002e50:	4618      	mov	r0, r3
20002e52:	f000 fb77 	bl	20003544 <memset>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:102
	itoa(dev_type, buff, 16);
20002e56:	787b      	ldrb	r3, [r7, #1]
20002e58:	4618      	mov	r0, r3
20002e5a:	1d3b      	adds	r3, r7, #4
20002e5c:	2210      	movs	r2, #16
20002e5e:	4619      	mov	r1, r3
20002e60:	f000 fb6e 	bl	20003540 <itoa>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:103
	MSS_UART_polled_tx_string(&g_mss_uart0, "\tDev type:");
20002e64:	4922      	ldr	r1, [pc, #136]	; (20002ef0 <main+0xfc>)
20002e66:	481f      	ldr	r0, [pc, #124]	; (20002ee4 <main+0xf0>)
20002e68:	f7fd fc10 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:104
	MSS_UART_polled_tx_string(&g_mss_uart0, buff);
20002e6c:	1d3b      	adds	r3, r7, #4
20002e6e:	4619      	mov	r1, r3
20002e70:	481c      	ldr	r0, [pc, #112]	; (20002ee4 <main+0xf0>)
20002e72:	f7fd fc0b 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:106

	memset(buff, 0, sizeof(buff));
20002e76:	1d3b      	adds	r3, r7, #4
20002e78:	220a      	movs	r2, #10
20002e7a:	2100      	movs	r1, #0
20002e7c:	4618      	mov	r0, r3
20002e7e:	f000 fb61 	bl	20003544 <memset>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:107
	itoa(dev_id, buff, 16);
20002e82:	78bb      	ldrb	r3, [r7, #2]
20002e84:	4618      	mov	r0, r3
20002e86:	1d3b      	adds	r3, r7, #4
20002e88:	2210      	movs	r2, #16
20002e8a:	4619      	mov	r1, r3
20002e8c:	f000 fb58 	bl	20003540 <itoa>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:108
	MSS_UART_polled_tx_string(&g_mss_uart0, "\tDev ID:");
20002e90:	4918      	ldr	r1, [pc, #96]	; (20002ef4 <main+0x100>)
20002e92:	4814      	ldr	r0, [pc, #80]	; (20002ee4 <main+0xf0>)
20002e94:	f7fd fbfa 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:109
	MSS_UART_polled_tx_string(&g_mss_uart0, buff);
20002e98:	1d3b      	adds	r3, r7, #4
20002e9a:	4619      	mov	r1, r3
20002e9c:	4811      	ldr	r0, [pc, #68]	; (20002ee4 <main+0xf0>)
20002e9e:	f7fd fbf5 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:110
	memset(buff, 0, sizeof(buff));
20002ea2:	1d3b      	adds	r3, r7, #4
20002ea4:	220a      	movs	r2, #10
20002ea6:	2100      	movs	r1, #0
20002ea8:	4618      	mov	r0, r3
20002eaa:	f000 fb4b 	bl	20003544 <memset>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:112

	for (i = 0; i < 4; i++) {
20002eae:	4b12      	ldr	r3, [pc, #72]	; (20002ef8 <main+0x104>)
20002eb0:	2200      	movs	r2, #0
20002eb2:	701a      	strb	r2, [r3, #0]
20002eb4:	e00e      	b.n	20002ed4 <main+0xe0>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:113 (discriminator 3)
		MSS_GPIO_config(LED[i], MSS_GPIO_OUTPUT_MODE);
20002eb6:	4b10      	ldr	r3, [pc, #64]	; (20002ef8 <main+0x104>)
20002eb8:	781b      	ldrb	r3, [r3, #0]
20002eba:	461a      	mov	r2, r3
20002ebc:	4b0f      	ldr	r3, [pc, #60]	; (20002efc <main+0x108>)
20002ebe:	5c9b      	ldrb	r3, [r3, r2]
20002ec0:	2105      	movs	r1, #5
20002ec2:	4618      	mov	r0, r3
20002ec4:	f7ff fe54 	bl	20002b70 <MSS_GPIO_config>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:112 (discriminator 3)
	for (i = 0; i < 4; i++) {
20002ec8:	4b0b      	ldr	r3, [pc, #44]	; (20002ef8 <main+0x104>)
20002eca:	781b      	ldrb	r3, [r3, #0]
20002ecc:	3301      	adds	r3, #1
20002ece:	b2da      	uxtb	r2, r3
20002ed0:	4b09      	ldr	r3, [pc, #36]	; (20002ef8 <main+0x104>)
20002ed2:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:112 (discriminator 1)
20002ed4:	4b08      	ldr	r3, [pc, #32]	; (20002ef8 <main+0x104>)
20002ed6:	781b      	ldrb	r3, [r3, #0]
20002ed8:	2b03      	cmp	r3, #3
20002eda:	d9ec      	bls.n	20002eb6 <main+0xc2>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:117 (discriminator 1)
	}
	while(1)
	{
		Init();
20002edc:	f000 f810 	bl	20002f00 <Init>
20002ee0:	e7fc      	b.n	20002edc <main+0xe8>
20002ee2:	bf00      	nop
20002ee4:	20003cdc 	.word	0x20003cdc
20002ee8:	20003784 	.word	0x20003784
20002eec:	20003938 	.word	0x20003938
20002ef0:	20003944 	.word	0x20003944
20002ef4:	20003950 	.word	0x20003950
20002ef8:	20003f0e 	.word	0x20003f0e
20002efc:	20003780 	.word	0x20003780

20002f00 <Init>:
Init():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:126
/*--------------------------------------------------------------------------
 * Write Data to Flash.
 */

void Init()
{
20002f00:	b580      	push	{r7, lr}
20002f02:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:127
	MSS_UART_polled_tx_string(&g_mss_uart0,(const uint8_t*)"\n\rEnter your choice and press Enter\n\r 1.Write \n\r 2.Read \n\r " );
20002f04:	490e      	ldr	r1, [pc, #56]	; (20002f40 <Init+0x40>)
20002f06:	480f      	ldr	r0, [pc, #60]	; (20002f44 <Init+0x44>)
20002f08:	f7fd fbc0 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:128
	ch = scannumber();
20002f0c:	f000 f8dc 	bl	200030c8 <scannumber>
20002f10:	4603      	mov	r3, r0
20002f12:	b2da      	uxtb	r2, r3
20002f14:	4b0c      	ldr	r3, [pc, #48]	; (20002f48 <Init+0x48>)
20002f16:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:130

	if(ch==1)
20002f18:	4b0b      	ldr	r3, [pc, #44]	; (20002f48 <Init+0x48>)
20002f1a:	781b      	ldrb	r3, [r3, #0]
20002f1c:	2b01      	cmp	r3, #1
20002f1e:	d102      	bne.n	20002f26 <Init+0x26>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:131
		Flash_write();
20002f20:	f000 f816 	bl	20002f50 <Flash_write>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:136
	else if(ch==2)
		Flash_read();
	else
		MSS_UART_polled_tx_string( &g_mss_uart0,(const uint8_t*)"Enter correct choice\n\r" );
}
20002f24:	e00a      	b.n	20002f3c <Init+0x3c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:132
	else if(ch==2)
20002f26:	4b08      	ldr	r3, [pc, #32]	; (20002f48 <Init+0x48>)
20002f28:	781b      	ldrb	r3, [r3, #0]
20002f2a:	2b02      	cmp	r3, #2
20002f2c:	d102      	bne.n	20002f34 <Init+0x34>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:133
		Flash_read();
20002f2e:	f000 f86b 	bl	20003008 <Flash_read>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:136
}
20002f32:	e003      	b.n	20002f3c <Init+0x3c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:135
		MSS_UART_polled_tx_string( &g_mss_uart0,(const uint8_t*)"Enter correct choice\n\r" );
20002f34:	4905      	ldr	r1, [pc, #20]	; (20002f4c <Init+0x4c>)
20002f36:	4803      	ldr	r0, [pc, #12]	; (20002f44 <Init+0x44>)
20002f38:	f7fd fba8 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:136
}
20002f3c:	bf00      	nop
20002f3e:	bd80      	pop	{r7, pc}
20002f40:	2000395c 	.word	0x2000395c
20002f44:	20003cdc 	.word	0x20003cdc
20002f48:	20003f0f 	.word	0x20003f0f
20002f4c:	20003998 	.word	0x20003998

20002f50 <Flash_write>:
Flash_write():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:138
void Flash_write()
{
20002f50:	b580      	push	{r7, lr}
20002f52:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:139
	address = 0;
20002f54:	4b25      	ldr	r3, [pc, #148]	; (20002fec <Flash_write+0x9c>)
20002f56:	2200      	movs	r2, #0
20002f58:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:140
	for(loop_count = 0; loop_count <(BUFFER_A_SIZE); loop_count++)
20002f5a:	4b25      	ldr	r3, [pc, #148]	; (20002ff0 <Flash_write+0xa0>)
20002f5c:	2200      	movs	r2, #0
20002f5e:	801a      	strh	r2, [r3, #0]
20002f60:	e00b      	b.n	20002f7a <Flash_write+0x2a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:142 (discriminator 3)
	{
		g_flash_wr_buf[loop_count] = 0;
20002f62:	4b23      	ldr	r3, [pc, #140]	; (20002ff0 <Flash_write+0xa0>)
20002f64:	881b      	ldrh	r3, [r3, #0]
20002f66:	461a      	mov	r2, r3
20002f68:	4b22      	ldr	r3, [pc, #136]	; (20002ff4 <Flash_write+0xa4>)
20002f6a:	2100      	movs	r1, #0
20002f6c:	5499      	strb	r1, [r3, r2]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:140 (discriminator 3)
	for(loop_count = 0; loop_count <(BUFFER_A_SIZE); loop_count++)
20002f6e:	4b20      	ldr	r3, [pc, #128]	; (20002ff0 <Flash_write+0xa0>)
20002f70:	881b      	ldrh	r3, [r3, #0]
20002f72:	3301      	adds	r3, #1
20002f74:	b29a      	uxth	r2, r3
20002f76:	4b1e      	ldr	r3, [pc, #120]	; (20002ff0 <Flash_write+0xa0>)
20002f78:	801a      	strh	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:140 (discriminator 1)
20002f7a:	4b1d      	ldr	r3, [pc, #116]	; (20002ff0 <Flash_write+0xa0>)
20002f7c:	881b      	ldrh	r3, [r3, #0]
20002f7e:	2b04      	cmp	r3, #4
20002f80:	d9ef      	bls.n	20002f62 <Flash_write+0x12>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:145
	}
//	FLASH_erase_64k_block(0);
	FLASH_chip_erase();
20002f82:	f000 f97d 	bl	20003280 <FLASH_chip_erase>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:146
	MSS_UART_polled_tx_string(&g_mss_uart0, "Enter any 5 values between 0 to 99 to write to Flash Memory \n\r\n\r");
20002f86:	491c      	ldr	r1, [pc, #112]	; (20002ff8 <Flash_write+0xa8>)
20002f88:	481c      	ldr	r0, [pc, #112]	; (20002ffc <Flash_write+0xac>)
20002f8a:	f7fd fb7f 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:148

	for(i=0;i<5;i++)
20002f8e:	4b1c      	ldr	r3, [pc, #112]	; (20003000 <Flash_write+0xb0>)
20002f90:	2200      	movs	r2, #0
20002f92:	701a      	strb	r2, [r3, #0]
20002f94:	e01c      	b.n	20002fd0 <Flash_write+0x80>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:151
	{

		g_flash_wr_buf[i] = scannumber();
20002f96:	f000 f897 	bl	200030c8 <scannumber>
20002f9a:	4601      	mov	r1, r0
20002f9c:	4b18      	ldr	r3, [pc, #96]	; (20003000 <Flash_write+0xb0>)
20002f9e:	781b      	ldrb	r3, [r3, #0]
20002fa0:	461a      	mov	r2, r3
20002fa2:	b2c9      	uxtb	r1, r1
20002fa4:	4b13      	ldr	r3, [pc, #76]	; (20002ff4 <Flash_write+0xa4>)
20002fa6:	5499      	strb	r1, [r3, r2]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:152
		while(g_flash_wr_buf[i]<0 || g_flash_wr_buf[i]> 99 )
20002fa8:	e005      	b.n	20002fb6 <Flash_write+0x66>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:154
		{
			MSS_UART_polled_tx_string( &g_mss_uart0,(const uint8_t*)"Enter only 2 digit number\n\r" );
20002faa:	4916      	ldr	r1, [pc, #88]	; (20003004 <Flash_write+0xb4>)
20002fac:	4813      	ldr	r0, [pc, #76]	; (20002ffc <Flash_write+0xac>)
20002fae:	f7fd fb6d 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:155
			Init();
20002fb2:	f7ff ffa5 	bl	20002f00 <Init>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:152
		while(g_flash_wr_buf[i]<0 || g_flash_wr_buf[i]> 99 )
20002fb6:	4b12      	ldr	r3, [pc, #72]	; (20003000 <Flash_write+0xb0>)
20002fb8:	781b      	ldrb	r3, [r3, #0]
20002fba:	461a      	mov	r2, r3
20002fbc:	4b0d      	ldr	r3, [pc, #52]	; (20002ff4 <Flash_write+0xa4>)
20002fbe:	5c9b      	ldrb	r3, [r3, r2]
20002fc0:	2b63      	cmp	r3, #99	; 0x63
20002fc2:	d8f2      	bhi.n	20002faa <Flash_write+0x5a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:148 (discriminator 2)
	for(i=0;i<5;i++)
20002fc4:	4b0e      	ldr	r3, [pc, #56]	; (20003000 <Flash_write+0xb0>)
20002fc6:	781b      	ldrb	r3, [r3, #0]
20002fc8:	3301      	adds	r3, #1
20002fca:	b2da      	uxtb	r2, r3
20002fcc:	4b0c      	ldr	r3, [pc, #48]	; (20003000 <Flash_write+0xb0>)
20002fce:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:148 (discriminator 1)
20002fd0:	4b0b      	ldr	r3, [pc, #44]	; (20003000 <Flash_write+0xb0>)
20002fd2:	781b      	ldrb	r3, [r3, #0]
20002fd4:	2b04      	cmp	r3, #4
20002fd6:	d9de      	bls.n	20002f96 <Flash_write+0x46>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:158
		}
	}
	FLASH_program(address, g_flash_wr_buf, sizeof(g_flash_wr_buf));
20002fd8:	4b04      	ldr	r3, [pc, #16]	; (20002fec <Flash_write+0x9c>)
20002fda:	681b      	ldr	r3, [r3, #0]
20002fdc:	2205      	movs	r2, #5
20002fde:	4905      	ldr	r1, [pc, #20]	; (20002ff4 <Flash_write+0xa4>)
20002fe0:	4618      	mov	r0, r3
20002fe2:	f000 f9e5 	bl	200033b0 <FLASH_program>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:160

}
20002fe6:	bf00      	nop
20002fe8:	bd80      	pop	{r7, pc}
20002fea:	bf00      	nop
20002fec:	20003c98 	.word	0x20003c98
20002ff0:	20003f0c 	.word	0x20003f0c
20002ff4:	20003c88 	.word	0x20003c88
20002ff8:	200039b0 	.word	0x200039b0
20002ffc:	20003cdc 	.word	0x20003cdc
20003000:	20003f0e 	.word	0x20003f0e
20003004:	200039f4 	.word	0x200039f4

20003008 <Flash_read>:
Flash_read():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:165
/*--------------------------------------------------------------------------
 * Read Data From Flash.
 */
void Flash_read()
{
20003008:	b580      	push	{r7, lr}
2000300a:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:166
	address = 0;
2000300c:	4b15      	ldr	r3, [pc, #84]	; (20003064 <Flash_read+0x5c>)
2000300e:	2200      	movs	r2, #0
20003010:	601a      	str	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:167
	for(loop_count = 0; loop_count <(BUFFER_A_SIZE); loop_count++)
20003012:	4b15      	ldr	r3, [pc, #84]	; (20003068 <Flash_read+0x60>)
20003014:	2200      	movs	r2, #0
20003016:	801a      	strh	r2, [r3, #0]
20003018:	e00b      	b.n	20003032 <Flash_read+0x2a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:169 (discriminator 3)
	{
		g_flash_rd_buf[loop_count] = 0;
2000301a:	4b13      	ldr	r3, [pc, #76]	; (20003068 <Flash_read+0x60>)
2000301c:	881b      	ldrh	r3, [r3, #0]
2000301e:	461a      	mov	r2, r3
20003020:	4b12      	ldr	r3, [pc, #72]	; (2000306c <Flash_read+0x64>)
20003022:	2100      	movs	r1, #0
20003024:	5499      	strb	r1, [r3, r2]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:167 (discriminator 3)
	for(loop_count = 0; loop_count <(BUFFER_A_SIZE); loop_count++)
20003026:	4b10      	ldr	r3, [pc, #64]	; (20003068 <Flash_read+0x60>)
20003028:	881b      	ldrh	r3, [r3, #0]
2000302a:	3301      	adds	r3, #1
2000302c:	b29a      	uxth	r2, r3
2000302e:	4b0e      	ldr	r3, [pc, #56]	; (20003068 <Flash_read+0x60>)
20003030:	801a      	strh	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:167 (discriminator 1)
20003032:	4b0d      	ldr	r3, [pc, #52]	; (20003068 <Flash_read+0x60>)
20003034:	881b      	ldrh	r3, [r3, #0]
20003036:	2b04      	cmp	r3, #4
20003038:	d9ef      	bls.n	2000301a <Flash_read+0x12>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:171
	}
	FLASH_read(address, g_flash_rd_buf, sizeof(g_flash_wr_buf));
2000303a:	4b0a      	ldr	r3, [pc, #40]	; (20003064 <Flash_read+0x5c>)
2000303c:	681b      	ldr	r3, [r3, #0]
2000303e:	2205      	movs	r2, #5
20003040:	490a      	ldr	r1, [pc, #40]	; (2000306c <Flash_read+0x64>)
20003042:	4618      	mov	r0, r3
20003044:	f000 f8be 	bl	200031c4 <FLASH_read>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:172
	MSS_UART_polled_tx_string(&g_mss_uart0, " \n\rRead Data From Flash: ");
20003048:	4909      	ldr	r1, [pc, #36]	; (20003070 <Flash_read+0x68>)
2000304a:	480a      	ldr	r0, [pc, #40]	; (20003074 <Flash_read+0x6c>)
2000304c:	f7fd fb1e 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:175
//	for(i=0;i<(BUFFER_A_SIZE);i++)

		MSS_UART_polled_tx_string(&g_mss_uart0, g_flash_rd_buf);
20003050:	4906      	ldr	r1, [pc, #24]	; (2000306c <Flash_read+0x64>)
20003052:	4808      	ldr	r0, [pc, #32]	; (20003074 <Flash_read+0x6c>)
20003054:	f7fd fb1a 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:178


	MSS_UART_polled_tx_string(&g_mss_uart0, " \n\rRead operation is completed \n\r ");
20003058:	4907      	ldr	r1, [pc, #28]	; (20003078 <Flash_read+0x70>)
2000305a:	4806      	ldr	r0, [pc, #24]	; (20003074 <Flash_read+0x6c>)
2000305c:	f7fd fb16 	bl	2000068c <MSS_UART_polled_tx_string>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:179
}
20003060:	bf00      	nop
20003062:	bd80      	pop	{r7, pc}
20003064:	20003c98 	.word	0x20003c98
20003068:	20003f0c 	.word	0x20003f0c
2000306c:	20003c90 	.word	0x20003c90
20003070:	20003a10 	.word	0x20003a10
20003074:	20003cdc 	.word	0x20003cdc
20003078:	20003a2c 	.word	0x20003a2c

2000307c <UART_Polled_Rx>:
UART_Polled_Rx():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:189
(
		mss_uart_instance_t * this_uart,
		uint8_t * rx_buff,
		size_t buff_size
)
{
2000307c:	b480      	push	{r7}
2000307e:	b087      	sub	sp, #28
20003080:	af00      	add	r7, sp, #0
20003082:	60f8      	str	r0, [r7, #12]
20003084:	60b9      	str	r1, [r7, #8]
20003086:	607a      	str	r2, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:190
	size_t rx_size = 0U;
20003088:	2300      	movs	r3, #0
2000308a:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:192

	while( rx_size < buff_size )
2000308c:	e012      	b.n	200030b4 <UART_Polled_Rx+0x38>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:196
	{
		while ( ((this_uart->hw_reg->LSR) & 0x1) != 0U  )
		{
			rx_buff[rx_size] = this_uart->hw_reg->RBR;
2000308e:	68fb      	ldr	r3, [r7, #12]
20003090:	681a      	ldr	r2, [r3, #0]
20003092:	68b9      	ldr	r1, [r7, #8]
20003094:	697b      	ldr	r3, [r7, #20]
20003096:	440b      	add	r3, r1
20003098:	7812      	ldrb	r2, [r2, #0]
2000309a:	b2d2      	uxtb	r2, r2
2000309c:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:197
			++rx_size;
2000309e:	697b      	ldr	r3, [r7, #20]
200030a0:	3301      	adds	r3, #1
200030a2:	617b      	str	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:194
		while ( ((this_uart->hw_reg->LSR) & 0x1) != 0U  )
200030a4:	68fb      	ldr	r3, [r7, #12]
200030a6:	681b      	ldr	r3, [r3, #0]
200030a8:	7d1b      	ldrb	r3, [r3, #20]
200030aa:	b2db      	uxtb	r3, r3
200030ac:	f003 0301 	and.w	r3, r3, #1
200030b0:	2b00      	cmp	r3, #0
200030b2:	d1ec      	bne.n	2000308e <UART_Polled_Rx+0x12>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:192
	while( rx_size < buff_size )
200030b4:	697a      	ldr	r2, [r7, #20]
200030b6:	687b      	ldr	r3, [r7, #4]
200030b8:	429a      	cmp	r2, r3
200030ba:	d3f3      	bcc.n	200030a4 <UART_Polled_Rx+0x28>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:201
		}
	}

	return rx_size;
200030bc:	697b      	ldr	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:202
}
200030be:	4618      	mov	r0, r3
200030c0:	371c      	adds	r7, #28
200030c2:	46bd      	mov	sp, r7
200030c4:	bc80      	pop	{r7}
200030c6:	4770      	bx	lr

200030c8 <scannumber>:
scannumber():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:204
int scannumber()
{
200030c8:	b580      	push	{r7, lr}
200030ca:	b086      	sub	sp, #24
200030cc:	af00      	add	r7, sp, #0
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:205
	uint8_t rxbuff,x[8]={0},i=0;//[8];
200030ce:	463b      	mov	r3, r7
200030d0:	2200      	movs	r2, #0
200030d2:	601a      	str	r2, [r3, #0]
200030d4:	605a      	str	r2, [r3, #4]
200030d6:	2300      	movs	r3, #0
200030d8:	75fb      	strb	r3, [r7, #23]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:206
	mss_uart_instance_t * this_uart = &g_mss_uart0;
200030da:	4b17      	ldr	r3, [pc, #92]	; (20003138 <scannumber+0x70>)
200030dc:	613b      	str	r3, [r7, #16]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:208
	int num;
	while(i<5)
200030de:	e01d      	b.n	2000311c <scannumber+0x54>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:210
	{
		UART_Polled_Rx( &g_mss_uart0, &rxbuff, sizeof(rxbuff) );
200030e0:	f107 030b 	add.w	r3, r7, #11
200030e4:	2201      	movs	r2, #1
200030e6:	4619      	mov	r1, r3
200030e8:	4813      	ldr	r0, [pc, #76]	; (20003138 <scannumber+0x70>)
200030ea:	f7ff ffc7 	bl	2000307c <UART_Polled_Rx>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:212

		if(rxbuff == '\n')
200030ee:	7afb      	ldrb	r3, [r7, #11]
200030f0:	2b0a      	cmp	r3, #10
200030f2:	d10a      	bne.n	2000310a <scannumber+0x42>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:214
		{
			rxbuff= this_uart->hw_reg->RBR;
200030f4:	693b      	ldr	r3, [r7, #16]
200030f6:	681b      	ldr	r3, [r3, #0]
200030f8:	781b      	ldrb	r3, [r3, #0]
200030fa:	b2db      	uxtb	r3, r3
200030fc:	72fb      	strb	r3, [r7, #11]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:215
			rxbuff= this_uart->hw_reg->RBR;
200030fe:	693b      	ldr	r3, [r7, #16]
20003100:	681b      	ldr	r3, [r3, #0]
20003102:	781b      	ldrb	r3, [r3, #0]
20003104:	b2db      	uxtb	r3, r3
20003106:	72fb      	strb	r3, [r7, #11]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:216
			break;
20003108:	e00b      	b.n	20003122 <scannumber+0x5a>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:219
		}
		else
			x[i++]=rxbuff;
2000310a:	7dfb      	ldrb	r3, [r7, #23]
2000310c:	1c5a      	adds	r2, r3, #1
2000310e:	75fa      	strb	r2, [r7, #23]
20003110:	7afa      	ldrb	r2, [r7, #11]
20003112:	f107 0118 	add.w	r1, r7, #24
20003116:	440b      	add	r3, r1
20003118:	f803 2c18 	strb.w	r2, [r3, #-24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:208
	while(i<5)
2000311c:	7dfb      	ldrb	r3, [r7, #23]
2000311e:	2b04      	cmp	r3, #4
20003120:	d9de      	bls.n	200030e0 <scannumber+0x18>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:221
	}
	num = atoi(x);
20003122:	463b      	mov	r3, r7
20003124:	4618      	mov	r0, r3
20003126:	f000 f9cb 	bl	200034c0 <atoi>
2000312a:	60f8      	str	r0, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:222
	return num;
2000312c:	68fb      	ldr	r3, [r7, #12]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../test.c:223
}
2000312e:	4618      	mov	r0, r3
20003130:	3718      	adds	r7, #24
20003132:	46bd      	mov	sp, r7
20003134:	bd80      	pop	{r7, pc}
20003136:	bf00      	nop
20003138:	20003cdc 	.word	0x20003cdc

2000313c <FLASH_init>:
FLASH_init():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:46

/*******************************************************************************
 *
 */
void FLASH_init( void )
{
2000313c:	b580      	push	{r7, lr}
2000313e:	b082      	sub	sp, #8
20003140:	af02      	add	r7, sp, #8
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:50
    /*--------------------------------------------------------------------------
     * Configure SPI.
     */
    MSS_SPI_init( &g_mss_spi0 );
20003142:	4807      	ldr	r0, [pc, #28]	; (20003160 <FLASH_init+0x24>)
20003144:	f7fe f902 	bl	2000134c <MSS_SPI_init>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:52
    
    MSS_SPI_configure_master_mode
20003148:	2308      	movs	r3, #8
2000314a:	9300      	str	r3, [sp, #0]
2000314c:	2304      	movs	r3, #4
2000314e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
20003152:	2100      	movs	r1, #0
20003154:	4802      	ldr	r0, [pc, #8]	; (20003160 <FLASH_init+0x24>)
20003156:	f7fe f9ff 	bl	20001558 <MSS_SPI_configure_master_mode>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:74
            PDMA_TO_SPI_1,
            PDMA_LOW_PRIORITY | PDMA_BYTE_TRANSFER | PDMA_INC_SRC_ONE_BYTE,
            PDMA_DEFAULT_WRITE_ADJ
        );
*/
}
2000315a:	bf00      	nop
2000315c:	46bd      	mov	sp, r7
2000315e:	bd80      	pop	{r7, pc}
20003160:	20003da0 	.word	0x20003da0

20003164 <FLASH_read_device_id>:
FLASH_read_device_id():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:85
(
    uint8_t * manufacturer_id,
	uint8_t * dev_type,
    uint8_t * device_id
)
{
20003164:	b580      	push	{r7, lr}
20003166:	b08a      	sub	sp, #40	; 0x28
20003168:	af02      	add	r7, sp, #8
2000316a:	60f8      	str	r0, [r7, #12]
2000316c:	60b9      	str	r1, [r7, #8]
2000316e:	607a      	str	r2, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:88
    uint8_t cmd_buffer[6];
    uint8_t read_buffer[3];
    cmd_buffer[0] = DEVICE_ID_READ;
20003170:	239f      	movs	r3, #159	; 0x9f
20003172:	763b      	strb	r3, [r7, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:89
    cmd_buffer[1] = 0x0;
20003174:	2300      	movs	r3, #0
20003176:	767b      	strb	r3, [r7, #25]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:90
    cmd_buffer[2] = 0x0;
20003178:	2300      	movs	r3, #0
2000317a:	76bb      	strb	r3, [r7, #26]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:91
    cmd_buffer[3] = 0x0;
2000317c:	2300      	movs	r3, #0
2000317e:	76fb      	strb	r3, [r7, #27]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:94
    
    
    MSS_SPI_set_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
20003180:	2100      	movs	r1, #0
20003182:	480f      	ldr	r0, [pc, #60]	; (200031c0 <FLASH_read_device_id+0x5c>)
20003184:	f7fe fa80 	bl	20001688 <MSS_SPI_set_slave_select>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:96
    
    MSS_SPI_transfer_block( &g_mss_spi0, cmd_buffer, 4, read_buffer, sizeof(read_buffer) );
20003188:	f107 0214 	add.w	r2, r7, #20
2000318c:	f107 0118 	add.w	r1, r7, #24
20003190:	2303      	movs	r3, #3
20003192:	9300      	str	r3, [sp, #0]
20003194:	4613      	mov	r3, r2
20003196:	2204      	movs	r2, #4
20003198:	4809      	ldr	r0, [pc, #36]	; (200031c0 <FLASH_read_device_id+0x5c>)
2000319a:	f7fe fb2f 	bl	200017fc <MSS_SPI_transfer_block>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:97
    MSS_SPI_clear_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
2000319e:	2100      	movs	r1, #0
200031a0:	4807      	ldr	r0, [pc, #28]	; (200031c0 <FLASH_read_device_id+0x5c>)
200031a2:	f7fe fae7 	bl	20001774 <MSS_SPI_clear_slave_select>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:99

    *manufacturer_id = read_buffer[0];
200031a6:	7d3a      	ldrb	r2, [r7, #20]
200031a8:	68fb      	ldr	r3, [r7, #12]
200031aa:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:100
    *dev_type = read_buffer[1];
200031ac:	7d7a      	ldrb	r2, [r7, #21]
200031ae:	68bb      	ldr	r3, [r7, #8]
200031b0:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:101
    *device_id = read_buffer[2];
200031b2:	7dba      	ldrb	r2, [r7, #22]
200031b4:	687b      	ldr	r3, [r7, #4]
200031b6:	701a      	strb	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:102
}
200031b8:	bf00      	nop
200031ba:	3720      	adds	r7, #32
200031bc:	46bd      	mov	sp, r7
200031be:	bd80      	pop	{r7, pc}
200031c0:	20003da0 	.word	0x20003da0

200031c4 <FLASH_read>:
FLASH_read():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:113
(
    uint32_t address,
    uint8_t * rx_buffer,
    size_t size_in_bytes
)
{
200031c4:	b580      	push	{r7, lr}
200031c6:	b088      	sub	sp, #32
200031c8:	af02      	add	r7, sp, #8
200031ca:	60f8      	str	r0, [r7, #12]
200031cc:	60b9      	str	r1, [r7, #8]
200031ce:	607a      	str	r2, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:116
    uint8_t cmd_buffer[4];
    
    cmd_buffer[0] = READ_ARRAY_OPCODE;
200031d0:	2303      	movs	r3, #3
200031d2:	753b      	strb	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:117
    cmd_buffer[1] = (uint8_t)((address >> 16) & 0xFF);
200031d4:	68fb      	ldr	r3, [r7, #12]
200031d6:	0c1b      	lsrs	r3, r3, #16
200031d8:	b2db      	uxtb	r3, r3
200031da:	757b      	strb	r3, [r7, #21]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:118
    cmd_buffer[2] = (uint8_t)((address >> 8) & 0xFF);;
200031dc:	68fb      	ldr	r3, [r7, #12]
200031de:	0a1b      	lsrs	r3, r3, #8
200031e0:	b2db      	uxtb	r3, r3
200031e2:	75bb      	strb	r3, [r7, #22]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:119
    cmd_buffer[3] = (uint8_t)(address & 0xFF);
200031e4:	68fb      	ldr	r3, [r7, #12]
200031e6:	b2db      	uxtb	r3, r3
200031e8:	75fb      	strb	r3, [r7, #23]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:123
//    cmd_buffer[4] = DONT_CARE;
//    cmd_buffer[5] = DONT_CARE;
    
    MSS_SPI_set_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
200031ea:	2100      	movs	r1, #0
200031ec:	480c      	ldr	r0, [pc, #48]	; (20003220 <FLASH_read+0x5c>)
200031ee:	f7fe fa4b 	bl	20001688 <MSS_SPI_set_slave_select>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:124
    wait_ready();
200031f2:	f000 f949 	bl	20003488 <wait_ready>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:125
    MSS_SPI_transfer_block( &g_mss_spi0, cmd_buffer, 4, rx_buffer, size_in_bytes );
200031f6:	687b      	ldr	r3, [r7, #4]
200031f8:	b29b      	uxth	r3, r3
200031fa:	f107 0114 	add.w	r1, r7, #20
200031fe:	9300      	str	r3, [sp, #0]
20003200:	68bb      	ldr	r3, [r7, #8]
20003202:	2204      	movs	r2, #4
20003204:	4806      	ldr	r0, [pc, #24]	; (20003220 <FLASH_read+0x5c>)
20003206:	f7fe faf9 	bl	200017fc <MSS_SPI_transfer_block>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:126
    wait_ready();
2000320a:	f000 f93d 	bl	20003488 <wait_ready>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:127
    MSS_SPI_clear_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
2000320e:	2100      	movs	r1, #0
20003210:	4803      	ldr	r0, [pc, #12]	; (20003220 <FLASH_read+0x5c>)
20003212:	f7fe faaf 	bl	20001774 <MSS_SPI_clear_slave_select>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:128
}
20003216:	bf00      	nop
20003218:	3718      	adds	r7, #24
2000321a:	46bd      	mov	sp, r7
2000321c:	bd80      	pop	{r7, pc}
2000321e:	bf00      	nop
20003220:	20003da0 	.word	0x20003da0

20003224 <FLASH_global_unprotect>:
FLASH_global_unprotect():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:134

/*******************************************************************************
 *
 */
void FLASH_global_unprotect( void )
{
20003224:	b580      	push	{r7, lr}
20003226:	b084      	sub	sp, #16
20003228:	af02      	add	r7, sp, #8
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:137
    uint8_t cmd_buffer[2];
    /* Send Write Enable command */
    cmd_buffer[0] = WRITE_ENABLE_CMD;
2000322a:	2306      	movs	r3, #6
2000322c:	713b      	strb	r3, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:139

    MSS_SPI_set_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
2000322e:	2100      	movs	r1, #0
20003230:	4812      	ldr	r0, [pc, #72]	; (2000327c <FLASH_global_unprotect+0x58>)
20003232:	f7fe fa29 	bl	20001688 <MSS_SPI_set_slave_select>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:140
    wait_ready();
20003236:	f000 f927 	bl	20003488 <wait_ready>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:141
    MSS_SPI_transfer_block( &g_mss_spi0, cmd_buffer, 1, 0, 0 );
2000323a:	1d39      	adds	r1, r7, #4
2000323c:	2300      	movs	r3, #0
2000323e:	9300      	str	r3, [sp, #0]
20003240:	2300      	movs	r3, #0
20003242:	2201      	movs	r2, #1
20003244:	480d      	ldr	r0, [pc, #52]	; (2000327c <FLASH_global_unprotect+0x58>)
20003246:	f7fe fad9 	bl	200017fc <MSS_SPI_transfer_block>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:144
    
    /* Send Chip Erase command */
    cmd_buffer[0] = WRITE_STATUS1_OPCODE;
2000324a:	2398      	movs	r3, #152	; 0x98
2000324c:	713b      	strb	r3, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:145
    cmd_buffer[1] = 0;
2000324e:	2300      	movs	r3, #0
20003250:	717b      	strb	r3, [r7, #5]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:147
    
    wait_ready();
20003252:	f000 f919 	bl	20003488 <wait_ready>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:148
    MSS_SPI_transfer_block( &g_mss_spi0, cmd_buffer, 2, 0, 0 );
20003256:	1d39      	adds	r1, r7, #4
20003258:	2300      	movs	r3, #0
2000325a:	9300      	str	r3, [sp, #0]
2000325c:	2300      	movs	r3, #0
2000325e:	2202      	movs	r2, #2
20003260:	4806      	ldr	r0, [pc, #24]	; (2000327c <FLASH_global_unprotect+0x58>)
20003262:	f7fe facb 	bl	200017fc <MSS_SPI_transfer_block>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:149
    wait_ready();
20003266:	f000 f90f 	bl	20003488 <wait_ready>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:150
    MSS_SPI_clear_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
2000326a:	2100      	movs	r1, #0
2000326c:	4803      	ldr	r0, [pc, #12]	; (2000327c <FLASH_global_unprotect+0x58>)
2000326e:	f7fe fa81 	bl	20001774 <MSS_SPI_clear_slave_select>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:151
}
20003272:	bf00      	nop
20003274:	3708      	adds	r7, #8
20003276:	46bd      	mov	sp, r7
20003278:	bd80      	pop	{r7, pc}
2000327a:	bf00      	nop
2000327c:	20003da0 	.word	0x20003da0

20003280 <FLASH_chip_erase>:
FLASH_chip_erase():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:157

/*******************************************************************************
 *
 */
void FLASH_chip_erase( void )
{
20003280:	b580      	push	{r7, lr}
20003282:	b084      	sub	sp, #16
20003284:	af02      	add	r7, sp, #8
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:160
    uint8_t cmd_buffer;
    /* Send Write Enable command */
    cmd_buffer = WRITE_ENABLE_CMD;
20003286:	2306      	movs	r3, #6
20003288:	71fb      	strb	r3, [r7, #7]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:162

    MSS_SPI_set_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
2000328a:	2100      	movs	r1, #0
2000328c:	4811      	ldr	r0, [pc, #68]	; (200032d4 <FLASH_chip_erase+0x54>)
2000328e:	f7fe f9fb 	bl	20001688 <MSS_SPI_set_slave_select>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:163
    wait_ready();
20003292:	f000 f8f9 	bl	20003488 <wait_ready>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:164
    MSS_SPI_transfer_block( &g_mss_spi0, &cmd_buffer, 1, 0, 0 );
20003296:	1df9      	adds	r1, r7, #7
20003298:	2300      	movs	r3, #0
2000329a:	9300      	str	r3, [sp, #0]
2000329c:	2300      	movs	r3, #0
2000329e:	2201      	movs	r2, #1
200032a0:	480c      	ldr	r0, [pc, #48]	; (200032d4 <FLASH_chip_erase+0x54>)
200032a2:	f7fe faab 	bl	200017fc <MSS_SPI_transfer_block>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:167
    
    /* Send Chip Erase command */
    cmd_buffer = CHIP_ERASE_OPCODE;
200032a6:	23c7      	movs	r3, #199	; 0xc7
200032a8:	71fb      	strb	r3, [r7, #7]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:169
    
    wait_ready();
200032aa:	f000 f8ed 	bl	20003488 <wait_ready>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:170
    MSS_SPI_transfer_block( &g_mss_spi0, &cmd_buffer, 1, 0, 0 );
200032ae:	1df9      	adds	r1, r7, #7
200032b0:	2300      	movs	r3, #0
200032b2:	9300      	str	r3, [sp, #0]
200032b4:	2300      	movs	r3, #0
200032b6:	2201      	movs	r2, #1
200032b8:	4806      	ldr	r0, [pc, #24]	; (200032d4 <FLASH_chip_erase+0x54>)
200032ba:	f7fe fa9f 	bl	200017fc <MSS_SPI_transfer_block>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:171
    wait_ready();
200032be:	f000 f8e3 	bl	20003488 <wait_ready>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:172
    MSS_SPI_clear_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
200032c2:	2100      	movs	r1, #0
200032c4:	4803      	ldr	r0, [pc, #12]	; (200032d4 <FLASH_chip_erase+0x54>)
200032c6:	f7fe fa55 	bl	20001774 <MSS_SPI_clear_slave_select>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:173
}
200032ca:	bf00      	nop
200032cc:	3708      	adds	r7, #8
200032ce:	46bd      	mov	sp, r7
200032d0:	bd80      	pop	{r7, pc}
200032d2:	bf00      	nop
200032d4:	20003da0 	.word	0x20003da0

200032d8 <write_cmd_data>:
write_cmd_data():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:242
    const uint8_t * cmd_buffer,
    uint16_t cmd_byte_size,
    uint8_t * data_buffer,
    uint16_t data_byte_size
)
{
200032d8:	b590      	push	{r4, r7, lr}
200032da:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
200032de:	af02      	add	r7, sp, #8
200032e0:	f107 040c 	add.w	r4, r7, #12
200032e4:	6020      	str	r0, [r4, #0]
200032e6:	f107 0008 	add.w	r0, r7, #8
200032ea:	6001      	str	r1, [r0, #0]
200032ec:	4611      	mov	r1, r2
200032ee:	463a      	mov	r2, r7
200032f0:	6013      	str	r3, [r2, #0]
200032f2:	1dbb      	adds	r3, r7, #6
200032f4:	460a      	mov	r2, r1
200032f6:	801a      	strh	r2, [r3, #0]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:272
    MSS_SPI_enable( this_spi );
#else

    uint8_t tx_buffer[516];
    uint16_t transfer_size;
    uint16_t idx = 0;
200032f8:	2300      	movs	r3, #0
200032fa:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:274
    
    transfer_size = cmd_byte_size + data_byte_size;
200032fe:	1dbb      	adds	r3, r7, #6
20003300:	881a      	ldrh	r2, [r3, #0]
20003302:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
20003306:	4413      	add	r3, r2
20003308:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:276
    
    for(idx = 0; idx < cmd_byte_size; ++idx)
2000330c:	2300      	movs	r3, #0
2000330e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
20003312:	e010      	b.n	20003336 <write_cmd_data+0x5e>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:278 (discriminator 3)
    {
        tx_buffer[idx] = cmd_buffer[idx];
20003314:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
20003318:	f107 0208 	add.w	r2, r7, #8
2000331c:	6812      	ldr	r2, [r2, #0]
2000331e:	441a      	add	r2, r3
20003320:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
20003324:	7811      	ldrb	r1, [r2, #0]
20003326:	f107 0210 	add.w	r2, r7, #16
2000332a:	54d1      	strb	r1, [r2, r3]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:276 (discriminator 3)
    for(idx = 0; idx < cmd_byte_size; ++idx)
2000332c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
20003330:	3301      	adds	r3, #1
20003332:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:276 (discriminator 1)
20003336:	1dbb      	adds	r3, r7, #6
20003338:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
2000333c:	881b      	ldrh	r3, [r3, #0]
2000333e:	429a      	cmp	r2, r3
20003340:	d3e8      	bcc.n	20003314 <write_cmd_data+0x3c>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:281
    }

    for(idx = 0; idx < data_byte_size; ++idx)
20003342:	2300      	movs	r3, #0
20003344:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
20003348:	e012      	b.n	20003370 <write_cmd_data+0x98>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:283 (discriminator 3)
    {
        tx_buffer[cmd_byte_size + idx] = data_buffer[idx];
2000334a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
2000334e:	463a      	mov	r2, r7
20003350:	6812      	ldr	r2, [r2, #0]
20003352:	441a      	add	r2, r3
20003354:	1dbb      	adds	r3, r7, #6
20003356:	8819      	ldrh	r1, [r3, #0]
20003358:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
2000335c:	440b      	add	r3, r1
2000335e:	7811      	ldrb	r1, [r2, #0]
20003360:	f107 0210 	add.w	r2, r7, #16
20003364:	54d1      	strb	r1, [r2, r3]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:281 (discriminator 3)
    for(idx = 0; idx < data_byte_size; ++idx)
20003366:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
2000336a:	3301      	adds	r3, #1
2000336c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:281 (discriminator 1)
20003370:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
20003374:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
20003378:	429a      	cmp	r2, r3
2000337a:	d3e6      	bcc.n	2000334a <write_cmd_data+0x72>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:286
    }
    
    MSS_SPI_transfer_block( &g_mss_spi0, tx_buffer, transfer_size, 0, 0 );
2000337c:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
20003380:	f107 0110 	add.w	r1, r7, #16
20003384:	2300      	movs	r3, #0
20003386:	9300      	str	r3, [sp, #0]
20003388:	2300      	movs	r3, #0
2000338a:	4808      	ldr	r0, [pc, #32]	; (200033ac <write_cmd_data+0xd4>)
2000338c:	f7fe fa36 	bl	200017fc <MSS_SPI_transfer_block>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:289
    
#endif    
    while ( !MSS_SPI_tx_done(this_spi) )
20003390:	bf00      	nop
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:289 (discriminator 1)
20003392:	f107 030c 	add.w	r3, r7, #12
20003396:	6818      	ldr	r0, [r3, #0]
20003398:	f7fe fb2a 	bl	200019f0 <MSS_SPI_tx_done>
2000339c:	4603      	mov	r3, r0
2000339e:	2b00      	cmp	r3, #0
200033a0:	d0f7      	beq.n	20003392 <write_cmd_data+0xba>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:293
    {
        ;
    }
}
200033a2:	bf00      	nop
200033a4:	f507 7707 	add.w	r7, r7, #540	; 0x21c
200033a8:	46bd      	mov	sp, r7
200033aa:	bd90      	pop	{r4, r7, pc}
200033ac:	20003da0 	.word	0x20003da0

200033b0 <FLASH_program>:
FLASH_program():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:304
(
    uint32_t address,
    uint8_t * write_buffer,
    size_t size_in_bytes
)
{
200033b0:	b580      	push	{r7, lr}
200033b2:	b08c      	sub	sp, #48	; 0x30
200033b4:	af02      	add	r7, sp, #8
200033b6:	60f8      	str	r0, [r7, #12]
200033b8:	60b9      	str	r1, [r7, #8]
200033ba:	607a      	str	r2, [r7, #4]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:311
    
    uint32_t in_buffer_idx;
    uint32_t nb_bytes_to_write;
    uint32_t target_addr;

    MSS_SPI_set_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
200033bc:	2100      	movs	r1, #0
200033be:	4831      	ldr	r0, [pc, #196]	; (20003484 <FLASH_program+0xd4>)
200033c0:	f7fe f962 	bl	20001688 <MSS_SPI_set_slave_select>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:332
//    cmd_buffer[0] = WRITE_ENABLE_CMD;
//    wait_ready();
//    MSS_SPI_transfer_block( &g_mss_spi0, cmd_buffer, 1, 0, 0 );
    
    /**/
    in_buffer_idx = 0;
200033c4:	2300      	movs	r3, #0
200033c6:	627b      	str	r3, [r7, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:333
    nb_bytes_to_write = size_in_bytes;
200033c8:	687b      	ldr	r3, [r7, #4]
200033ca:	623b      	str	r3, [r7, #32]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:334
    target_addr = address;
200033cc:	68fb      	ldr	r3, [r7, #12]
200033ce:	61fb      	str	r3, [r7, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:336
    
    while ( in_buffer_idx < size_in_bytes )
200033d0:	e03f      	b.n	20003452 <FLASH_program+0xa2>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:339
    {
        uint32_t size_left;
        nb_bytes_to_write = 0x100 - (target_addr & 0xFF);   /* adjust max possible size to page boundary. */
200033d2:	69fb      	ldr	r3, [r7, #28]
200033d4:	b2db      	uxtb	r3, r3
200033d6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
200033da:	623b      	str	r3, [r7, #32]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:340
        size_left = size_in_bytes - in_buffer_idx;
200033dc:	687a      	ldr	r2, [r7, #4]
200033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200033e0:	1ad3      	subs	r3, r2, r3
200033e2:	61bb      	str	r3, [r7, #24]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:341
        if ( size_left < nb_bytes_to_write )
200033e4:	69ba      	ldr	r2, [r7, #24]
200033e6:	6a3b      	ldr	r3, [r7, #32]
200033e8:	429a      	cmp	r2, r3
200033ea:	d201      	bcs.n	200033f0 <FLASH_program+0x40>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:343
        {
            nb_bytes_to_write = size_left;
200033ec:	69bb      	ldr	r3, [r7, #24]
200033ee:	623b      	str	r3, [r7, #32]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:346
        }
        
        wait_ready();
200033f0:	f000 f84a 	bl	20003488 <wait_ready>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:349
        
        /* Send Write Enable command */
        cmd_buffer[0] = WRITE_ENABLE_CMD;
200033f4:	2306      	movs	r3, #6
200033f6:	753b      	strb	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:350
        MSS_SPI_transfer_block( &g_mss_spi0, cmd_buffer, 1, 0, 0 );
200033f8:	f107 0114 	add.w	r1, r7, #20
200033fc:	2300      	movs	r3, #0
200033fe:	9300      	str	r3, [sp, #0]
20003400:	2300      	movs	r3, #0
20003402:	2201      	movs	r2, #1
20003404:	481f      	ldr	r0, [pc, #124]	; (20003484 <FLASH_program+0xd4>)
20003406:	f7fe f9f9 	bl	200017fc <MSS_SPI_transfer_block>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:353
            
        /* Program page */
        wait_ready();
2000340a:	f000 f83d 	bl	20003488 <wait_ready>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:355
    
        cmd_buffer[0] = PROGRAM_PAGE_CMD;
2000340e:	2302      	movs	r3, #2
20003410:	753b      	strb	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:356
        cmd_buffer[1] = (target_addr >> 16) & 0xFF;
20003412:	69fb      	ldr	r3, [r7, #28]
20003414:	0c1b      	lsrs	r3, r3, #16
20003416:	b2db      	uxtb	r3, r3
20003418:	757b      	strb	r3, [r7, #21]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:357
        cmd_buffer[2] = (target_addr >> 8 ) & 0xFF;
2000341a:	69fb      	ldr	r3, [r7, #28]
2000341c:	0a1b      	lsrs	r3, r3, #8
2000341e:	b2db      	uxtb	r3, r3
20003420:	75bb      	strb	r3, [r7, #22]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:358
        cmd_buffer[3] = target_addr & 0xFF;
20003422:	69fb      	ldr	r3, [r7, #28]
20003424:	b2db      	uxtb	r3, r3
20003426:	75fb      	strb	r3, [r7, #23]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:360
        
        write_cmd_data
20003428:	68ba      	ldr	r2, [r7, #8]
2000342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000342c:	441a      	add	r2, r3
2000342e:	6a3b      	ldr	r3, [r7, #32]
20003430:	b29b      	uxth	r3, r3
20003432:	f107 0114 	add.w	r1, r7, #20
20003436:	9300      	str	r3, [sp, #0]
20003438:	4613      	mov	r3, r2
2000343a:	2204      	movs	r2, #4
2000343c:	4811      	ldr	r0, [pc, #68]	; (20003484 <FLASH_program+0xd4>)
2000343e:	f7ff ff4b 	bl	200032d8 <write_cmd_data>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:369
            sizeof(cmd_buffer),
            &write_buffer[in_buffer_idx],
            nb_bytes_to_write
          );
        
        target_addr += nb_bytes_to_write;
20003442:	69fa      	ldr	r2, [r7, #28]
20003444:	6a3b      	ldr	r3, [r7, #32]
20003446:	4413      	add	r3, r2
20003448:	61fb      	str	r3, [r7, #28]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:370
        in_buffer_idx += nb_bytes_to_write;
2000344a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000344c:	6a3b      	ldr	r3, [r7, #32]
2000344e:	4413      	add	r3, r2
20003450:	627b      	str	r3, [r7, #36]	; 0x24
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:336
    while ( in_buffer_idx < size_in_bytes )
20003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003454:	687b      	ldr	r3, [r7, #4]
20003456:	429a      	cmp	r2, r3
20003458:	d3bb      	bcc.n	200033d2 <FLASH_program+0x22>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:374
    }
    
    /* Send Write Disable command. */
    cmd_buffer[0] = WRITE_DISABLE_CMD;
2000345a:	2304      	movs	r3, #4
2000345c:	753b      	strb	r3, [r7, #20]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:376

    wait_ready();
2000345e:	f000 f813 	bl	20003488 <wait_ready>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:378

    MSS_SPI_transfer_block( &g_mss_spi0, cmd_buffer, 1, 0, 0 );
20003462:	f107 0114 	add.w	r1, r7, #20
20003466:	2300      	movs	r3, #0
20003468:	9300      	str	r3, [sp, #0]
2000346a:	2300      	movs	r3, #0
2000346c:	2201      	movs	r2, #1
2000346e:	4805      	ldr	r0, [pc, #20]	; (20003484 <FLASH_program+0xd4>)
20003470:	f7fe f9c4 	bl	200017fc <MSS_SPI_transfer_block>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:379
    MSS_SPI_clear_slave_select( &g_mss_spi0, MSS_SPI_SLAVE_0 );
20003474:	2100      	movs	r1, #0
20003476:	4803      	ldr	r0, [pc, #12]	; (20003484 <FLASH_program+0xd4>)
20003478:	f7fe f97c 	bl	20001774 <MSS_SPI_clear_slave_select>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:380
}
2000347c:	bf00      	nop
2000347e:	3728      	adds	r7, #40	; 0x28
20003480:	46bd      	mov	sp, r7
20003482:	bd80      	pop	{r7, pc}
20003484:	20003da0 	.word	0x20003da0

20003488 <wait_ready>:
wait_ready():
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:399

/*******************************************************************************
 *
 */
static void wait_ready( void )
{
20003488:	b580      	push	{r7, lr}
2000348a:	b084      	sub	sp, #16
2000348c:	af02      	add	r7, sp, #8
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:401
    uint8_t ready_bit;
    uint8_t command = READ_STATUS;
2000348e:	2305      	movs	r3, #5
20003490:	71bb      	strb	r3, [r7, #6]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:404 (discriminator 1)
    
    do {
        MSS_SPI_transfer_block( &g_mss_spi0, &command, sizeof(command), &ready_bit, sizeof(ready_bit) );
20003492:	1dfa      	adds	r2, r7, #7
20003494:	1db9      	adds	r1, r7, #6
20003496:	2301      	movs	r3, #1
20003498:	9300      	str	r3, [sp, #0]
2000349a:	4613      	mov	r3, r2
2000349c:	2201      	movs	r2, #1
2000349e:	4807      	ldr	r0, [pc, #28]	; (200034bc <wait_ready+0x34>)
200034a0:	f7fe f9ac 	bl	200017fc <MSS_SPI_transfer_block>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:405 (discriminator 1)
        ready_bit = ready_bit & READY_BIT_MASK;
200034a4:	79fb      	ldrb	r3, [r7, #7]
200034a6:	f003 0301 	and.w	r3, r3, #1
200034aa:	b2db      	uxtb	r3, r3
200034ac:	71fb      	strb	r3, [r7, #7]
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:406 (discriminator 1)
    } while( ready_bit == 1 );
200034ae:	79fb      	ldrb	r3, [r7, #7]
200034b0:	2b01      	cmp	r3, #1
200034b2:	d0ee      	beq.n	20003492 <wait_ready+0xa>
D:\SoftConsoleWorkspace-Windows\Demo\Debug/../winbondflash.c:407
}
200034b4:	bf00      	nop
200034b6:	3708      	adds	r7, #8
200034b8:	46bd      	mov	sp, r7
200034ba:	bd80      	pop	{r7, pc}
200034bc:	20003da0 	.word	0x20003da0

200034c0 <atoi>:
atoi():
200034c0:	220a      	movs	r2, #10
200034c2:	2100      	movs	r1, #0
200034c4:	f000 b8be 	b.w	20003644 <strtol>

200034c8 <__libc_init_array>:
__libc_init_array():
200034c8:	b570      	push	{r4, r5, r6, lr}
200034ca:	2600      	movs	r6, #0
200034cc:	4d0c      	ldr	r5, [pc, #48]	; (20003500 <__libc_init_array+0x38>)
200034ce:	4c0d      	ldr	r4, [pc, #52]	; (20003504 <__libc_init_array+0x3c>)
200034d0:	1b64      	subs	r4, r4, r5
200034d2:	10a4      	asrs	r4, r4, #2
200034d4:	42a6      	cmp	r6, r4
200034d6:	d109      	bne.n	200034ec <__libc_init_array+0x24>
200034d8:	f000 fb4e 	bl	20003b78 <_init>
200034dc:	2600      	movs	r6, #0
200034de:	4d0a      	ldr	r5, [pc, #40]	; (20003508 <__libc_init_array+0x40>)
200034e0:	4c0a      	ldr	r4, [pc, #40]	; (2000350c <__libc_init_array+0x44>)
200034e2:	1b64      	subs	r4, r4, r5
200034e4:	10a4      	asrs	r4, r4, #2
200034e6:	42a6      	cmp	r6, r4
200034e8:	d105      	bne.n	200034f6 <__libc_init_array+0x2e>
200034ea:	bd70      	pop	{r4, r5, r6, pc}
200034ec:	f855 3b04 	ldr.w	r3, [r5], #4
200034f0:	4798      	blx	r3
200034f2:	3601      	adds	r6, #1
200034f4:	e7ee      	b.n	200034d4 <__libc_init_array+0xc>
200034f6:	f855 3b04 	ldr.w	r3, [r5], #4
200034fa:	4798      	blx	r3
200034fc:	3601      	adds	r6, #1
200034fe:	e7f2      	b.n	200034e6 <__libc_init_array+0x1e>
20003500:	20003b90 	.word	0x20003b90
20003504:	20003b90 	.word	0x20003b90
20003508:	20003b90 	.word	0x20003b90
2000350c:	20003b94 	.word	0x20003b94

20003510 <__itoa>:
__itoa():
20003510:	1e93      	subs	r3, r2, #2
20003512:	2b22      	cmp	r3, #34	; 0x22
20003514:	b510      	push	{r4, lr}
20003516:	460c      	mov	r4, r1
20003518:	d904      	bls.n	20003524 <__itoa+0x14>
2000351a:	2300      	movs	r3, #0
2000351c:	461c      	mov	r4, r3
2000351e:	700b      	strb	r3, [r1, #0]
20003520:	4620      	mov	r0, r4
20003522:	bd10      	pop	{r4, pc}
20003524:	2a0a      	cmp	r2, #10
20003526:	d109      	bne.n	2000353c <__itoa+0x2c>
20003528:	2800      	cmp	r0, #0
2000352a:	da07      	bge.n	2000353c <__itoa+0x2c>
2000352c:	232d      	movs	r3, #45	; 0x2d
2000352e:	700b      	strb	r3, [r1, #0]
20003530:	2101      	movs	r1, #1
20003532:	4240      	negs	r0, r0
20003534:	4421      	add	r1, r4
20003536:	f000 f88f 	bl	20003658 <__utoa>
2000353a:	e7f1      	b.n	20003520 <__itoa+0x10>
2000353c:	2100      	movs	r1, #0
2000353e:	e7f9      	b.n	20003534 <__itoa+0x24>

20003540 <itoa>:
itoa():
20003540:	f7ff bfe6 	b.w	20003510 <__itoa>

20003544 <memset>:
memset():
20003544:	4603      	mov	r3, r0
20003546:	4402      	add	r2, r0
20003548:	4293      	cmp	r3, r2
2000354a:	d100      	bne.n	2000354e <memset+0xa>
2000354c:	4770      	bx	lr
2000354e:	f803 1b01 	strb.w	r1, [r3], #1
20003552:	e7f9      	b.n	20003548 <memset+0x4>

20003554 <_strtol_l.isra.0>:
_strtol_l.isra.0():
20003554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20003558:	4686      	mov	lr, r0
2000355a:	4608      	mov	r0, r1
2000355c:	4f38      	ldr	r7, [pc, #224]	; (20003640 <_strtol_l.isra.0+0xec>)
2000355e:	4605      	mov	r5, r0
20003560:	f815 4b01 	ldrb.w	r4, [r5], #1
20003564:	5de6      	ldrb	r6, [r4, r7]
20003566:	f016 0608 	ands.w	r6, r6, #8
2000356a:	d134      	bne.n	200035d6 <_strtol_l.isra.0+0x82>
2000356c:	2c2d      	cmp	r4, #45	; 0x2d
2000356e:	d134      	bne.n	200035da <_strtol_l.isra.0+0x86>
20003570:	f04f 0801 	mov.w	r8, #1
20003574:	782c      	ldrb	r4, [r5, #0]
20003576:	1c85      	adds	r5, r0, #2
20003578:	2b00      	cmp	r3, #0
2000357a:	d05c      	beq.n	20003636 <_strtol_l.isra.0+0xe2>
2000357c:	2b10      	cmp	r3, #16
2000357e:	d109      	bne.n	20003594 <_strtol_l.isra.0+0x40>
20003580:	2c30      	cmp	r4, #48	; 0x30
20003582:	d107      	bne.n	20003594 <_strtol_l.isra.0+0x40>
20003584:	7828      	ldrb	r0, [r5, #0]
20003586:	f000 00df 	and.w	r0, r0, #223	; 0xdf
2000358a:	2858      	cmp	r0, #88	; 0x58
2000358c:	d14e      	bne.n	2000362c <_strtol_l.isra.0+0xd8>
2000358e:	2310      	movs	r3, #16
20003590:	786c      	ldrb	r4, [r5, #1]
20003592:	3502      	adds	r5, #2
20003594:	f1b8 0f00 	cmp.w	r8, #0
20003598:	bf14      	ite	ne
2000359a:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
2000359e:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
200035a2:	2700      	movs	r7, #0
200035a4:	fbbc f9f3 	udiv	r9, ip, r3
200035a8:	4638      	mov	r0, r7
200035aa:	fb03 ca19 	mls	sl, r3, r9, ip
200035ae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
200035b2:	2e09      	cmp	r6, #9
200035b4:	d818      	bhi.n	200035e8 <_strtol_l.isra.0+0x94>
200035b6:	4634      	mov	r4, r6
200035b8:	42a3      	cmp	r3, r4
200035ba:	dd24      	ble.n	20003606 <_strtol_l.isra.0+0xb2>
200035bc:	1c7e      	adds	r6, r7, #1
200035be:	d007      	beq.n	200035d0 <_strtol_l.isra.0+0x7c>
200035c0:	4581      	cmp	r9, r0
200035c2:	d31d      	bcc.n	20003600 <_strtol_l.isra.0+0xac>
200035c4:	d101      	bne.n	200035ca <_strtol_l.isra.0+0x76>
200035c6:	45a2      	cmp	sl, r4
200035c8:	db1a      	blt.n	20003600 <_strtol_l.isra.0+0xac>
200035ca:	2701      	movs	r7, #1
200035cc:	fb00 4003 	mla	r0, r0, r3, r4
200035d0:	f815 4b01 	ldrb.w	r4, [r5], #1
200035d4:	e7eb      	b.n	200035ae <_strtol_l.isra.0+0x5a>
200035d6:	4628      	mov	r0, r5
200035d8:	e7c1      	b.n	2000355e <_strtol_l.isra.0+0xa>
200035da:	2c2b      	cmp	r4, #43	; 0x2b
200035dc:	bf08      	it	eq
200035de:	782c      	ldrbeq	r4, [r5, #0]
200035e0:	46b0      	mov	r8, r6
200035e2:	bf08      	it	eq
200035e4:	1c85      	addeq	r5, r0, #2
200035e6:	e7c7      	b.n	20003578 <_strtol_l.isra.0+0x24>
200035e8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
200035ec:	2e19      	cmp	r6, #25
200035ee:	d801      	bhi.n	200035f4 <_strtol_l.isra.0+0xa0>
200035f0:	3c37      	subs	r4, #55	; 0x37
200035f2:	e7e1      	b.n	200035b8 <_strtol_l.isra.0+0x64>
200035f4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
200035f8:	2e19      	cmp	r6, #25
200035fa:	d804      	bhi.n	20003606 <_strtol_l.isra.0+0xb2>
200035fc:	3c57      	subs	r4, #87	; 0x57
200035fe:	e7db      	b.n	200035b8 <_strtol_l.isra.0+0x64>
20003600:	f04f 37ff 	mov.w	r7, #4294967295
20003604:	e7e4      	b.n	200035d0 <_strtol_l.isra.0+0x7c>
20003606:	1c7b      	adds	r3, r7, #1
20003608:	d106      	bne.n	20003618 <_strtol_l.isra.0+0xc4>
2000360a:	2322      	movs	r3, #34	; 0x22
2000360c:	4660      	mov	r0, ip
2000360e:	f8ce 3000 	str.w	r3, [lr]
20003612:	b942      	cbnz	r2, 20003626 <_strtol_l.isra.0+0xd2>
20003614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20003618:	f1b8 0f00 	cmp.w	r8, #0
2000361c:	d000      	beq.n	20003620 <_strtol_l.isra.0+0xcc>
2000361e:	4240      	negs	r0, r0
20003620:	2a00      	cmp	r2, #0
20003622:	d0f7      	beq.n	20003614 <_strtol_l.isra.0+0xc0>
20003624:	b107      	cbz	r7, 20003628 <_strtol_l.isra.0+0xd4>
20003626:	1e69      	subs	r1, r5, #1
20003628:	6011      	str	r1, [r2, #0]
2000362a:	e7f3      	b.n	20003614 <_strtol_l.isra.0+0xc0>
2000362c:	2430      	movs	r4, #48	; 0x30
2000362e:	2b00      	cmp	r3, #0
20003630:	d1b0      	bne.n	20003594 <_strtol_l.isra.0+0x40>
20003632:	2308      	movs	r3, #8
20003634:	e7ae      	b.n	20003594 <_strtol_l.isra.0+0x40>
20003636:	2c30      	cmp	r4, #48	; 0x30
20003638:	d0a4      	beq.n	20003584 <_strtol_l.isra.0+0x30>
2000363a:	230a      	movs	r3, #10
2000363c:	e7aa      	b.n	20003594 <_strtol_l.isra.0+0x40>
2000363e:	bf00      	nop
20003640:	20003a75 	.word	0x20003a75

20003644 <strtol>:
strtol():
20003644:	4613      	mov	r3, r2
20003646:	460a      	mov	r2, r1
20003648:	4601      	mov	r1, r0
2000364a:	4802      	ldr	r0, [pc, #8]	; (20003654 <strtol+0x10>)
2000364c:	6800      	ldr	r0, [r0, #0]
2000364e:	f7ff bf81 	b.w	20003554 <_strtol_l.isra.0>
20003652:	bf00      	nop
20003654:	20003bbc 	.word	0x20003bbc

20003658 <__utoa>:
__utoa():
20003658:	b5f0      	push	{r4, r5, r6, r7, lr}
2000365a:	b08b      	sub	sp, #44	; 0x2c
2000365c:	4607      	mov	r7, r0
2000365e:	460c      	mov	r4, r1
20003660:	466d      	mov	r5, sp
20003662:	4b1c      	ldr	r3, [pc, #112]	; (200036d4 <__utoa+0x7c>)
20003664:	f103 0c20 	add.w	ip, r3, #32
20003668:	462e      	mov	r6, r5
2000366a:	6818      	ldr	r0, [r3, #0]
2000366c:	6859      	ldr	r1, [r3, #4]
2000366e:	3308      	adds	r3, #8
20003670:	c603      	stmia	r6!, {r0, r1}
20003672:	4563      	cmp	r3, ip
20003674:	4635      	mov	r5, r6
20003676:	d1f7      	bne.n	20003668 <__utoa+0x10>
20003678:	6818      	ldr	r0, [r3, #0]
2000367a:	791b      	ldrb	r3, [r3, #4]
2000367c:	6030      	str	r0, [r6, #0]
2000367e:	7133      	strb	r3, [r6, #4]
20003680:	1e93      	subs	r3, r2, #2
20003682:	2b22      	cmp	r3, #34	; 0x22
20003684:	f04f 0100 	mov.w	r1, #0
20003688:	d904      	bls.n	20003694 <__utoa+0x3c>
2000368a:	7021      	strb	r1, [r4, #0]
2000368c:	460c      	mov	r4, r1
2000368e:	4620      	mov	r0, r4
20003690:	b00b      	add	sp, #44	; 0x2c
20003692:	bdf0      	pop	{r4, r5, r6, r7, pc}
20003694:	1e65      	subs	r5, r4, #1
20003696:	fbb7 f6f2 	udiv	r6, r7, r2
2000369a:	fb02 7316 	mls	r3, r2, r6, r7
2000369e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
200036a2:	4463      	add	r3, ip
200036a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
200036a8:	42ba      	cmp	r2, r7
200036aa:	f101 0001 	add.w	r0, r1, #1
200036ae:	f805 3f01 	strb.w	r3, [r5, #1]!
200036b2:	d90c      	bls.n	200036ce <__utoa+0x76>
200036b4:	2300      	movs	r3, #0
200036b6:	1862      	adds	r2, r4, r1
200036b8:	5423      	strb	r3, [r4, r0]
200036ba:	1ac8      	subs	r0, r1, r3
200036bc:	4283      	cmp	r3, r0
200036be:	dae6      	bge.n	2000368e <__utoa+0x36>
200036c0:	5ce0      	ldrb	r0, [r4, r3]
200036c2:	7815      	ldrb	r5, [r2, #0]
200036c4:	54e5      	strb	r5, [r4, r3]
200036c6:	f802 0901 	strb.w	r0, [r2], #-1
200036ca:	3301      	adds	r3, #1
200036cc:	e7f5      	b.n	200036ba <__utoa+0x62>
200036ce:	4601      	mov	r1, r0
200036d0:	4637      	mov	r7, r6
200036d2:	e7e0      	b.n	20003696 <__utoa+0x3e>
200036d4:	20003a4f 	.word	0x20003a4f

200036d8 <g_config_reg_lut>:
200036d8:	40013000 40013004 40013008 4001300c     .0.@.0.@.0.@.0.@
200036e8:	40013010 40013014 40013018 4001301c     .0.@.0.@.0.@.0.@
200036f8:	40013020 40013024 40013028 4001302c      0.@$0.@(0.@,0.@
20003708:	40013030 40013034 40013038 4001303c     00.@40.@80.@<0.@
20003718:	40013040 40013044 40013048 4001304c     @0.@D0.@H0.@L0.@
20003728:	40013050 40013054 40013058 4001305c     P0.@T0.@X0.@\0.@
20003738:	40013060 40013064 40013068 4001306c     `0.@d0.@h0.@l0.@
20003748:	40013070 40013074 40013078 4001307c     p0.@t0.@x0.@|0.@

20003758 <g_gpio_irqn_lut>:
20003758:	35343332 39383736 3d3c3b3a 41403f3e     23456789:;<=>?@A
20003768:	45444342 49484746 4d4c4b4a 51504f4e     BCDEFGHIJKLMNOPQ
20003778:	01000100 03030202                       ........

20003780 <LED>:
20003780:	08040302                                ....

20003784 <g_greeting_msg>:
20003784:	0a0d0a0d 2a2a2a2a 2a2a2a2a 2a2a2a2a     ....************
20003794:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
200037a4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
200037b4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
200037c4:	2a2a2a2a 2a2a2a2a 0a0d2a2a 2a2a2a2a     **********..****
200037d4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 6d53202a     ************* Sm
200037e4:	46747261 6f697375 4d20326e 53205353     artFusion2 MSS S
200037f4:	46204950 6873616c 61786520 656c706d     PI Flash example
20003804:	2a2a2a20 2a2a2a2a 2a2a2a2a 2a2a2a2a      ***************
20003814:	0a0d2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     **..************
20003824:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
20003834:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
20003844:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
20003854:	2a2a2a2a 2a2a2a2a 0a0d2a2a 73696854     **********..This
20003864:	61786520 656c706d 6f727020 7463656a      example project
20003874:	6d656420 74736e6f 65746172 68742073      demonstrates th
20003884:	73752065 666f2065 65687420 616d5320     e use of the Sma
20003894:	75467472 6e6f6973 534d2032 50532053     rtFusion2 MSS SP
200038a4:	620a0d49 6b636f6c 2074492e 64616572     I..block.It read
200038b4:	6e612073 72772064 73657469 65687420     s and writes the
200038c4:	6e6f6320 746e6574 20666f20 65206e61      content of an e
200038d4:	72657478 206c616e 20495053 73616c66     xternal SPI flas
200038e4:	65642068 65636976 2d2d0a0d 2d2d2d2d     h device..------
200038f4:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
20003904:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
20003914:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
20003924:	2d2d2d2d 2d2d2d2d 2d2d2d2d 0d2d2d2d     ---------------.
20003934:	0000000a 614d0a0d 2066756e 003a4449     ......Manuf ID:.
20003944:	76654409 70797420 00003a65 76654409     .Dev type:...Dev
20003954:	3a444920 00000000 6e450d0a 20726574      ID:......Enter 
20003964:	72756f79 6f686320 20656369 20646e61     your choice and 
20003974:	73657270 6e452073 0a726574 2e31200d     press Enter.. 1.
20003984:	74697257 0d0a2065 522e3220 20646165     Write .. 2.Read 
20003994:	00200d0a 65746e45 6f632072 63657272     .. .Enter correc
200039a4:	68632074 6563696f 00000d0a 65746e45     t choice....Ente
200039b4:	6e612072 20352079 756c6176 62207365     r any 5 values b
200039c4:	65777465 30206e65 206f7420 74203939     etween 0 to 99 t
200039d4:	7277206f 20657469 46206f74 6873616c     o write to Flash
200039e4:	6d654d20 2079726f 0d0a0d0a 00000000      Memory ........
200039f4:	65746e45 6e6f2072 3220796c 67696420     Enter only 2 dig
20003a04:	6e207469 65626d75 000d0a72 520d0a20     it number... ..R
20003a14:	20646165 61746144 6f724620 6c46206d     ead Data From Fl
20003a24:	3a687361 00000020 520d0a20 20646165     ash: ... ..Read 
20003a34:	7265706f 6f697461 7369206e 6d6f6320     operation is com
20003a44:	74656c70 0a206465 3000200d 34333231     pleted .. .01234
20003a54:	38373635 63626139 67666564 6b6a6968     56789abcdefghijk
20003a64:	6f6e6d6c 73727170 77767574 007a7978     lmnopqrstuvwxyz.

20003a74 <_ctype_>:
20003a74:	20202000 20202020 28282020 20282828     .         ((((( 
20003a84:	20202020 20202020 20202020 20202020                     
20003a94:	10108820 10101010 10101010 10101010      ...............
20003aa4:	04040410 04040404 10040404 10101010     ................
20003ab4:	41411010 41414141 01010101 01010101     ..AAAAAA........
20003ac4:	01010101 01010101 01010101 10101010     ................
20003ad4:	42421010 42424242 02020202 02020202     ..BBBBBB........
20003ae4:	02020202 02020202 02020202 10101010     ................
20003af4:	00000020 00000000 00000000 00000000      ...............
	...

20003b78 <_init>:
_init():
20003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003b7a:	bf00      	nop
20003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003b7e:	bc08      	pop	{r3}
20003b80:	469e      	mov	lr, r3
20003b82:	4770      	bx	lr

20003b84 <_fini>:
_fini():
20003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003b86:	bf00      	nop
20003b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003b8a:	bc08      	pop	{r3}
20003b8c:	469e      	mov	lr, r3
20003b8e:	4770      	bx	lr

20003b90 <__frame_dummy_init_array_entry>:
__preinit_array_start():
20003b90:	0519 2000                                   ... 

20003b94 <__do_global_dtors_aux_fini_array_entry>:
__init_array_end():
20003b94:	04f1 2000 0000 0000 0000 0000               ... ........
